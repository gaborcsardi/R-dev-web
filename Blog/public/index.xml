<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The R Blog</title>
    <link>https://developer.r-project.org/Blog/public/</link>
    <description>Recent content on The R Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 07 Jan 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://developer.r-project.org/Blog/public/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Parser Speedups</title>
      <link>https://developer.r-project.org/Blog/public/2019/01/07/parser-speedups/</link>
      <pubDate>Mon, 07 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://developer.r-project.org/Blog/public/2019/01/07/parser-speedups/</guid>
      <description>It wasn’t my primary goal to improve parser performance nor to measure it. I’ve been working on optimizations to reduce the runtime overhead of including source reference into packages (this is not done by default due to space and execution time overheads). I’ve added an option to exclude parse data from source references and enabled it by default for packages, as parse data account for most of the runtime overhead of source references while they are rarely needed.</description>
    </item>
    
    <item>
      <title>Unprotecting by Value</title>
      <link>https://developer.r-project.org/Blog/public/2018/12/10/unprotecting-by-value/</link>
      <pubDate>Mon, 10 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://developer.r-project.org/Blog/public/2018/12/10/unprotecting-by-value/</guid>
      <description>In short, UNPROTECT_PTR is dangerous and should not be used. This text describes why and describes how to replace it, including mset-based functions that have been introduced as a substitute for situations when unprotection by value is really needed. This could be of interest to anyone who writes native code to interface with the R heap, and definitely to all who use UNPROTECT_PTR in their code.
Background R provides several functions to protect pointers to R objects held by local C variables (typed SEXP) from the garbage collector.</description>
    </item>
    
    <item>
      <title>Conditions of Length Greater Than One</title>
      <link>https://developer.r-project.org/Blog/public/2018/10/12/conditions-of-length-greater-than-one/</link>
      <pubDate>Fri, 12 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://developer.r-project.org/Blog/public/2018/10/12/conditions-of-length-greater-than-one/</guid>
      <description>Historically R language allows conditions in if and while statements to be vectors (of length greater than one). The first element is used but the remaining elements are ignored, since November 2002 also with a warning (added by Brian Ripley). Following an intuition that such situations would typically arise from a programming error, an option has been added in March 2017 to optionally allow signalling a runtime error, instead (the patch was by Martin Maechler, pinged by a suggestion of Henrik Bengtsson on the R-devel mailing list).</description>
    </item>
    
    <item>
      <title>Maximum Number of DLLs</title>
      <link>https://developer.r-project.org/Blog/public/2018/03/23/maximum-number-of-dlls/</link>
      <pubDate>Fri, 23 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://developer.r-project.org/Blog/public/2018/03/23/maximum-number-of-dlls/</guid>
      <description>Some packages contain native code, which is linked to R dynamically in the form of dynamically loaded libraries (DLLs). Recently, R users started loading increasing numbers of packages; “workflow documents” are one source of this pattern. This has eventually lead to hitting the DLL limit in R, which materializes as runtime error “maximal number of DLLs reached”.
Limit on the number of open files The DLL limit in R is good for one important reason.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://developer.r-project.org/Blog/public/about/</link>
      <pubDate>Wed, 17 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://developer.r-project.org/Blog/public/about/</guid>
      <description>On this blogging site R developers share their experience, ideas and plans related to R core implementation. Technical details presented here might be useful for package developers and interesting for technically-minded R enthusiasts.
The blog posts represent individual opinions of their authors. Unless stated so explicitly, they should not be taken as positions of R Core nor R Foundation.
In the interest of technical quality of the posts, the authors may modify existing posts after publication.</description>
    </item>
    
  </channel>
</rss>