<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Package Development on The R Blog</title>
    <link>https://developer.r-project.org/Blog/public/categories/package-development/</link>
    <description>Recent content in Package Development on The R Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 15 May 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://developer.r-project.org/Blog/public/categories/package-development/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>GFortran Issues with LAPACK</title>
      <link>https://developer.r-project.org/Blog/public/2019/05/15/gfortran-issues-with-lapack/</link>
      <pubDate>Wed, 15 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://developer.r-project.org/Blog/public/2019/05/15/gfortran-issues-with-lapack/</guid>
      <description>Recent version of the GNU Fortran compiler (7, 8, 9) include optimizations that break interoperability between C and Fortran code with BLAS/LAPACK. The compiled code of BLAS/LAPACK corrupts stack, often resulting in crashes. This impacts R, R packages directly calling into BLAS/LAPACK, and all other applications of BLAS/LAPACK. The work-around is to compile BLAS/LAPACK with -fno-optimize-sibling-calls. This option is now used in R-Devel and R-Patched, so that the reference BLAS and LAPACK included in R are compiled with that option.</description>
    </item>
    
    <item>
      <title>Use of C&#43;&#43; in Packages</title>
      <link>https://developer.r-project.org/Blog/public/2019/03/28/use-of-c-in-packages/</link>
      <pubDate>Thu, 28 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://developer.r-project.org/Blog/public/2019/03/28/use-of-c-in-packages/</guid>
      <description>About 20% packages from CRAN and BIOC repositories include some native code and more than a half of those include some code in C++. This number is rather high given that the R API and runtime have been designed for C (or Fortran) and cannot be used reliably from C++, without extensive effort and restrictions. To avoid nasty bugs in such code, one needs to know R internals well, and when following the restrictions, one cannot use much from C++ anyway.</description>
    </item>
    
  </channel>
</rss>