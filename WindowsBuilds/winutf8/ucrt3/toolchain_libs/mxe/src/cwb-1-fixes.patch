diff -Nru cwb-3.4.22-orig/cl/cl.h cwb-3.4.22-patched/cl/cl.h
--- cwb-3.4.22-orig/cl/cl.h	2020-02-10 01:28:37.000000000 -0500
+++ cwb-3.4.22-patched/cl/cl.h	2021-03-19 13:35:33.775309631 -0400
@@ -432,6 +432,9 @@
 
 #ifdef __MINGW__
 /* only on Windows are the binary flags any different ... */
+#undef CL_STREAM_READ_BIN
+#undef CL_STREAM_WRITE_BIN
+#undef CL_STREAM_APPEND_BIN
 #define CL_STREAM_READ_BIN   4
 #define CL_STREAM_WRITE_BIN  5
 #define CL_STREAM_APPEND_BIN 6
diff -Nru cwb-3.4.22-orig/cl/endian.h cwb-3.4.22-patched/cl/endian.h
--- cwb-3.4.22-orig/cl/endian.h	2019-08-27 07:24:17.000000000 -0400
+++ cwb-3.4.22-patched/cl/endian.h	2021-03-19 13:32:27.675452998 -0400
@@ -53,8 +53,8 @@
  */
 #else
 /* but in windows we need to use winsock2.h (poss also windows.h?) from the Windows API instead */
-#include <windows.h>
 #include <winsock2.h>
+#include <windows.h>
 /* note, in order for all this to work, it is necessary to link against ws2_32 in MinGW. */
 #endif
 
diff -Nru cwb-3.4.22-orig/cl/storage.c cwb-3.4.22-patched/cl/storage.c
--- cwb-3.4.22-orig/cl/storage.c	2020-02-10 01:28:37.000000000 -0500
+++ cwb-3.4.22-patched/cl/storage.c	2021-03-19 14:21:34.137230583 -0400
@@ -19,6 +19,7 @@
 #ifndef __MINGW__
 #include <sys/mman.h>
 #else
+#include <winsock2.h>
 #include "windows-mmap.h"
 #endif
 #include <sys/stat.h>
diff -Nru cwb-3.4.22-orig/config/platform/mingw-cross cwb-3.4.22-patched/config/platform/mingw-cross
--- cwb-3.4.22-orig/config/platform/mingw-cross	2016-07-18 19:39:59.000000000 -0400
+++ cwb-3.4.22-patched/config/platform/mingw-cross	2021-03-19 13:45:08.322863411 -0400
@@ -29,15 +29,15 @@
 UNIX2DOS = unix2dos
 
 ## C compiler
-CC = i586-mingw32msvc-gcc
+#CC = i586-mingw32msvc-gcc
 
 ## we also MAY need the following sub-programs...
-LD = i586-mingw32msvc-ld
-RC = i586-mingw32msvc-windres
+#LD = i586-mingw32msvc-ld
+#RC = i586-mingw32msvc-windres
 
 ## C compiler flags (optimisation, warning, additional include directories)
 ## in this case, we also have the __MINGW__ macro-constant that is "ifdef" checked in the C code 
-CFLAGS = -O2 -Wall -D__MINGW__ -DEMULATE_SETENV -DG_OS_WIN32
+CFLAGS = -O2 -Wall -D__MINGW__ -DEMULATE_SETENV -fcommon
 ## MinGW doesn't have setenv() for manipulating environment variables, so we need to emulate it with putenv()
 ## this is controlled by EMULATE_SETENV, created for Solaris but also useful here.
 ## Note that we need "G_OS_WIN32" in order to stop glib.h from attempting to pull in
@@ -53,19 +53,19 @@
 
 ## How to combine object files into a library archive (*.a) and build a table of contents
 ## (ranlib is optional, simply set to "echo" or so to skip
-AR = i586-mingw32msvc-ar cq
-RANLIB = i586-mingw32msvc-ranlib
+#AR = i586-mingw32msvc-ar cq
+#RANLIB = i586-mingw32msvc-ranlib
 
 
 ## Windows binaries must end in .EXE
 EXEC_SUFFIX = .exe
 
 ## CPU architecture and operating system used to name binary releases
-RELEASE_ARCH = i586
+#RELEASE_ARCH = i586
 RELEASE_OS = windows
 
 ## How to update dependencies between source code files ("make depend" requires this option to be set)
-DEPEND = i586-mingw32msvc-gcc -MM -MG
+DEPEND = $(CC) -MM -MG
 
 ## How to index source code symbols for Emacs editor ("make tags" requires this option to be set)
 ETAGS = etags
diff -Nru cwb-3.4.22-orig/cqp/eval.c cwb-3.4.22-patched/cqp/eval.c
--- cwb-3.4.22-orig/cqp/eval.c	2020-02-10 03:15:19.000000000 -0500
+++ cwb-3.4.22-patched/cqp/eval.c	2021-03-19 15:21:17.710479191 -0400
@@ -2745,7 +2745,7 @@
 
   nr_columns = 0;
   for (col = evalenv->evaltree; col; col = col->tab_el.next) {
-    assert(col->type == tabular);
+    assert((col->type == tabular));
     if (evalenv->patternlist[col->tab_el.patindex].type != Pattern) {
       cqpmessage(Error, "matchall [] (or another token pattern matching the entire corpus) is not allowed in TAB query (column #%d)\n", nr_columns + 1);
       init_matchlist(&result);
diff -Nru cwb-3.4.22-orig/cqp/Makefile cwb-3.4.22-patched/cqp/Makefile
--- cwb-3.4.22-orig/cqp/Makefile	2019-08-16 23:20:36.000000000 -0400
+++ cwb-3.4.22-patched/cqp/Makefile	2021-03-19 15:35:26.209897979 -0400
@@ -98,9 +98,16 @@
 
 PROGRAMS = cqp$(EXEC_SUFFIX) cqpcl$(EXEC_SUFFIX) cqpserver$(EXEC_SUFFIX)
 
+libcqp.a: $(OBJS) $(CQI_OBJS)
+	$(RM) $@
+	$(AR) $@ $^
+	$(RANLIB) $@
+
+
 ## ----------------------------------------------------------------------
 
-all: $(PROGRAMS)
+#all: $(PROGRAMS) libcqp.a
+all: libcqp.a
 
 parser.tab.c parser.tab.h: parser.y
 	@$(ECHO) "    .... compile CQP parser from Bison grammar"
@@ -145,10 +152,10 @@
 	if [ ! -d $(INCINSTDIR) ]; then $(INSTALL) $(INST_FLAGS_DIR) $(INCINSTDIR) ; fi;
 	$(INSTALL) $(INST_FLAGS_DATA) ../CQi/cqi.h $(INCINSTDIR)
 
-release: $(PROGRAMS)
-	@$(ECHO) "    .... add to release: the CQP programs"
-	if [ ! -d "$(RELEASE_DIR)/bin" ]; then $(INSTALL) $(INST_FLAGS_DIR) "$(RELEASE_DIR)/bin"; fi;
-	for i in $(PROGRAMS); do $(INSTALL) $(INST_FLAGS_BIN) $$i "$(RELEASE_DIR)/bin"; done
+release: libcqp.a
+	@$(ECHO) "    .... add to release: libcqp static library file"
+	if [ ! -d "$(RELEASE_DIR)/lib" ]; then $(INSTALL) $(INST_FLAGS_DIR) "$(RELEASE_DIR)/lib"; fi;
+	$(INSTALL) $(INST_FLAGS_DATA) libcqp.a "$(RELEASE_DIR)/lib"
 	@$(ECHO) "    .... add to release: the CQi/cqi.h header file"
 	if [ ! -d "$(RELEASE_DIR)/include/cwb" ]; then $(INSTALL) $(INST_FLAGS_DIR) "$(RELEASE_DIR)/include/cwb"; fi;
 	$(INSTALL) $(INST_FLAGS_DATA) ../CQi/cqi.h "$(RELEASE_DIR)/include/cwb"
diff -Nru cwb-3.4.22-orig/definitions.mk cwb-3.4.22-patched/definitions.mk
--- cwb-3.4.22-orig/definitions.mk	2020-04-04 07:43:10.000000000 -0400
+++ cwb-3.4.22-patched/definitions.mk	2021-03-19 13:56:19.274373351 -0400
@@ -268,9 +268,10 @@
 endif
 LDFLAGS_LIBS = $(PCRE_LIBS) $(GLIB_LIBS)  
 else
-LDFLAGS_LIBS := -L$(MINGW_CROSS_HOME)/lib  -lpcre -lpcre.dll -lglib-2.0               \
+LDFLAGS_LIBS := -L$(MINGW_CROSS_HOME)/lib  -lpcre -lglib-2.0               \
     $(shell $(MINGW_CROSS_HOME)/bin/pcre-config --libs)   \
-    $(shell export PKG_CONFIG_PATH=$(MINGW_CROSS_HOME)/lib/pkgconfig ; pkg-config --libs glib-2.0)
+    $(shell export PKG_CONFIG_PATH=$(MINGW_CROSS_HOME)/lib/pkgconfig ; pkg-config --libs glib-2.0) \
+    -lws2_32 -lole32
 endif 
 
 # complete sets of compiler and linker flags (allows easy specification of specific build rules)
diff -Nru cwb-3.4.22-orig/Makefile cwb-3.4.22-patched/Makefile
--- cwb-3.4.22-orig/Makefile	2019-08-28 03:02:43.000000000 -0400
+++ cwb-3.4.22-patched/Makefile	2021-03-19 15:33:32.505957095 -0400
@@ -166,16 +166,16 @@
 	$(MAKE) -C cl release
 	$(MAKE) -C cqp release
 	$(MAKE) -C utils release
-	$(MAKE) -C man release
-	$(MAKE) -C instutils all
-	$(MAKE) -C instutils release
+#	$(MAKE) -C man release
+#	$(MAKE) -C instutils all
+#	$(MAKE) -C instutils release
 ifdef __MINGW__
 # we also need DLL file(s)
-	for i in $(DLLS_TO_INSTALL); do $(INSTALL) $(INST_FLAGS_DATA) $$i "$(RELEASE_DIR)/bin"; done
+#	for i in $(DLLS_TO_INSTALL); do $(INSTALL) $(INST_FLAGS_DATA) $$i "$(RELEASE_DIR)/bin"; done
 endif
-	if [ -f "$(RELEASE_COMPRESSED_FILENAME)" ]; then $(RM) "$(RELEASE_COMPRESSED_FILENAME)"; fi
-	(cd build/ && $(COMPRESS_COMMAND) "$(RELEASE_COMPRESSED_FILENAME)" "$(RELEASE_NAME)")
-	@$(ECHO) "==> CREATED BINARY RELEASE build/$(RELEASE_COMPRESSED_FILENAME)"
+#	if [ -f "$(RELEASE_COMPRESSED_FILENAME)" ]; then $(RM) "$(RELEASE_COMPRESSED_FILENAME)"; fi
+#	(cd build/ && $(COMPRESS_COMMAND) "$(RELEASE_COMPRESSED_FILENAME)" "$(RELEASE_NAME)")
+#	@$(ECHO) "==> CREATED BINARY RELEASE build/$(RELEASE_COMPRESSED_FILENAME)"
 
 uninstall:
 	@$(ECHO) "ERROR: uninstall operation is currently not supported!"
diff -Nru cwb-3.4.22-orig/utils/cwb-makeall.c cwb-3.4.22-patched/utils/cwb-makeall.c
--- cwb-3.4.22-orig/utils/cwb-makeall.c	2020-02-10 01:28:37.000000000 -0500
+++ cwb-3.4.22-patched/utils/cwb-makeall.c	2021-03-19 15:19:37.778552394 -0400
@@ -15,6 +15,9 @@
  *  WWW at http://www.gnu.org/copyleft/gpl.html).
  */
 
+#ifdef _MINGW32
+#include <winsock2.h>
+#endif
 
 #include "../cl/cl.h"
 #include "../cl/cwb-globals.h"
diff -Nru cwb-3.4.22-orig/utils/Makefile cwb-3.4.22-patched/utils/Makefile
--- cwb-3.4.22-orig/utils/Makefile	2019-08-16 23:20:36.000000000 -0400
+++ cwb-3.4.22-patched/utils/Makefile	2021-03-19 15:39:12.069768695 -0400
@@ -86,7 +86,12 @@
 
 ## ----------------------------------------------------------------------
 
-all: $(PROGRAMS)
+libcwb.a: cwb-makeall.o cwb-huffcode.o cwb-compress-rdx.o
+	$(RM) $@
+	$(AR) $@ $^
+	$(RANLIB) $@
+	
+all: libcwb.a
 
 ## general linking rule for all utility programs
 cwb-%$(EXEC_SUFFIX): cwb-%.o
@@ -132,14 +137,10 @@
 	if [ ! -d "$(BININSTDIR)" ]; then $(INSTALL) $(INST_FLAGS_DIR) "$(BININSTDIR)"; fi;
 	for i in $(PROGRAMS); do $(INSTALL) $(INST_FLAGS_BIN) $$i "$(BININSTDIR)"; done
 
-release: $(PROGRAMS)
-	@$(ECHO) "    .... add to release: the CWB utility programs"
-	if [ ! -d "$(RELEASE_DIR)/bin" ]; then $(INSTALL) $(INST_FLAGS_DIR) "$(RELEASE_DIR)/bin"; fi;
-	for i in $(PROGRAMS); do $(INSTALL) $(INST_FLAGS_BIN) $$i "$(RELEASE_DIR)/bin"; done
-ifdef __MINGW__
-	# Do not include cwb-atoi and cwb-atoi in Windows release as they trigger malware alerts in much antivirus software
-	for i in cwb-atoi$(EXEC_SUFFIX) cwb-itoa$(EXEC_SUFFIX) ; do $(RM) "$(RELEASE_DIR)/bin/$$i"; done
-endif
+release: libcwb.a
+	@$(ECHO) "    .... add to release: libcwb static library file"
+	if [ ! -d "$(RELEASE_DIR)/lib" ]; then $(INSTALL) $(INST_FLAGS_DIR) "$(RELEASE_DIR)/lib"; fi;
+	$(INSTALL) $(INST_FLAGS_DATA) libcwb.a "$(RELEASE_DIR)/lib"
 
 uninstall:
 	@$(ECHO) "ERROR: uninstall operation is currently not supported!"
