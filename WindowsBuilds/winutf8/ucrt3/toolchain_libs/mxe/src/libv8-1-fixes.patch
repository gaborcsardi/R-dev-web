diff -Nru orig/common.gypi patched/common.gypi
--- orig/common.gypi	2019-04-30 13:31:12.000000000 -0400
+++ patched/common.gypi	2021-03-10 05:45:19.993249629 -0500
@@ -11,7 +11,7 @@
     'msvs_multi_core_compile': '0',   # we do enable multicore compiles, but not using the V8 way
     'enable_pgo_generate%': '0',
     'enable_pgo_use%': '0',
-    'python%': 'python',
+    'python%': 'python2',
 
     'node_shared%': 'false',
     'force_dynamic_crt%': 0,
@@ -376,6 +376,13 @@
         'cflags': [ '-pthread' ],
         'ldflags': [ '-pthread' ],
       }],
+      [ 'OS in "linux win"', {
+        'target_conditions': [
+          ['_type=="static_library"', {
+           'standalone_static_library': 1,
+          }],
+         ],
+      }],      
       [ 'OS in "linux freebsd openbsd solaris android aix cloudabi"', {
         'cflags': [ '-Wall', '-Wextra', '-Wno-unused-parameter', ],
         'cflags_cc': [ '-fno-rtti', '-fno-exceptions', '-std=gnu++1y' ],
diff -Nru orig/configure patched/configure
--- orig/configure	2019-04-30 13:31:12.000000000 -0400
+++ patched/configure	2021-03-10 05:44:54.313299768 -0500
@@ -6,7 +6,7 @@
 _=[ 'exec' '/bin/sh' '-c' '''
 which python2.7 >/dev/null && exec python2.7 "$0" "$@"
 which python2 >/dev/null && exec python2 "$0" "$@"
-exec python "$0" "$@"
+exec python2 "$0" "$@"
 ''' "$0" "$@"
 ]
 del _
diff -Nru orig/configure.py patched/configure.py
--- orig/configure.py	2019-04-30 13:31:12.000000000 -0400
+++ patched/configure.py	2021-03-10 05:44:54.313299768 -0500
@@ -955,7 +955,7 @@
   o['variables']['node_report'] = b(not options.without_report)
   o['default_configuration'] = 'Debug' if options.debug else 'Release'
 
-  host_arch = host_arch_win() if os.name == 'nt' else host_arch_cc()
+  host_arch = host_arch_win() if (os.name == 'nt' and not ('GCC' in sys.version)) else host_arch_cc()
   target_arch = options.dest_cpu or host_arch
   # ia32 is preferred by the build tools (GYP) over x86 even if we prefer the latter
   # the Makefile resets this to x86 afterward
@@ -1570,7 +1570,7 @@
   # sys.executable. This directory will be prefixed to the PATH, so that
   # other tools that shell out to `python` will use the appropriate python
 
-  which_python = which('python')
+  which_python = which('python2')
   if (which_python and
       os.path.realpath(which_python) == os.path.realpath(sys.executable)):
     return
@@ -1581,7 +1581,7 @@
   except OSError as e:
     if e.errno != errno.EEXIST: raise e
 
-  python_link = os.path.join(bin_override, 'python')
+  python_link = os.path.join(bin_override, 'python2')
   try:
     os.unlink(python_link)
   except OSError as e:
@@ -1687,7 +1687,7 @@
 
 if options.use_ninja:
   gyp_args += ['-f', 'ninja']
-elif flavor == 'win' and sys.platform != 'msys':
+elif flavor == 'win' and sys.platform != 'msys' and not ('GCC' in sys.version):
   gyp_args += ['-f', 'msvs', '-G', 'msvs_version=auto']
 else:
   gyp_args += ['-f', 'make-' + flavor]
@@ -1701,6 +1701,6 @@
 if warn.warned and not options.verbose:
   warn('warnings were emitted in the configure phase')
 
-print_verbose("running: \n    " + " ".join(['python', 'tools/gyp_node.py'] + gyp_args))
+print_verbose("running: \n    " + " ".join(['python2', 'tools/gyp_node.py'] + gyp_args))
 run_gyp(gyp_args)
 info('configure completed successfully')
diff -Nru orig/deps/gtest/src/gtest_main.cc patched/deps/gtest/src/gtest_main.cc
--- orig/deps/gtest/src/gtest_main.cc	2019-04-30 13:31:12.000000000 -0400
+++ patched/deps/gtest/src/gtest_main.cc	2021-03-10 05:44:54.313299768 -0500
@@ -31,7 +31,68 @@
 
 #include "gtest/gtest.h"
 
+#ifdef _WIN32
+#include <windows.h>
+#include <VersionHelpers.h>
+
+#if defined(__MINGW_VERSION_MAJOR)
+#extern "C" {
+#endif
+
+int wmain(int argc, wchar_t *wargv[]) {
+  if (!IsWindows7OrGreater()) {
+    fprintf(stderr, "This application is only supported on Windows 7, "
+                    "Windows Server 2008 R2, or higher.");
+    exit(1);
+  }
+
+  // Convert argv to to UTF8
+  char** argv = new char*[argc + 1];
+  for (int i = 0; i < argc; i++) {
+    // Compute the size of the required buffer
+    DWORD size = WideCharToMultiByte(CP_UTF8,
+                                     0,
+                                     wargv[i],
+                                     -1,
+                                     nullptr,
+                                     0,
+                                     nullptr,
+                                     nullptr);
+    if (size == 0) {
+      // This should never happen.
+      fprintf(stderr, "Could not convert arguments to utf8.");
+      exit(1);
+    }
+    // Do the actual conversion
+    argv[i] = new char[size];
+    DWORD result = WideCharToMultiByte(CP_UTF8,
+                                       0,
+                                       wargv[i],
+                                       -1,
+                                       argv[i],
+                                       size,
+                                       nullptr,
+                                       nullptr);
+    if (result == 0) {
+      // This should never happen.
+      fprintf(stderr, "Could not convert arguments to utf8.");
+      exit(1);
+    }
+  }
+  argv[argc] = nullptr;
+  testing::InitGoogleTest(&argc, argv);
+  return RUN_ALL_TESTS();
+}
+
+#if defined(__MINGW_VERSION_MAJOR)
+}
+#endif
+
+#else
+
 GTEST_API_ int main(int argc, char **argv) {
   testing::InitGoogleTest(&argc, argv);
   return RUN_ALL_TESTS();
 }
+
+#endif
diff -Nru orig/deps/npm/bin/npm patched/deps/npm/bin/npm
--- orig/deps/npm/bin/npm	2019-04-30 13:31:13.000000000 -0400
+++ patched/deps/npm/bin/npm	2021-03-10 05:44:54.313299768 -0500
@@ -12,12 +12,12 @@
   NODE_EXE=node
 fi
 
-NPM_CLI_JS="$basedir/node_modules/npm/bin/npm-cli.js"
+NPM_CLI_JS="$basedir/../lib/node_modules/npm/bin/npm-cli.js"
 
 case `uname` in
   *MINGW*)
     NPM_PREFIX=`"$NODE_EXE" "$NPM_CLI_JS" prefix -g`
-    NPM_PREFIX_NPM_CLI_JS="$NPM_PREFIX/node_modules/npm/bin/npm-cli.js"
+    NPM_PREFIX_NPM_CLI_JS="$NPM_PREFIX/../lib/node_modules/npm/bin/npm-cli.js"
     if [ -f "$NPM_PREFIX_NPM_CLI_JS" ]; then
       NPM_CLI_JS="$NPM_PREFIX_NPM_CLI_JS"
     fi
diff -Nru orig/deps/npm/bin/npm.cmd patched/deps/npm/bin/npm.cmd
--- orig/deps/npm/bin/npm.cmd	2019-04-30 13:31:13.000000000 -0400
+++ patched/deps/npm/bin/npm.cmd	2021-03-10 05:44:54.313299768 -0500
@@ -8,9 +8,9 @@
   SET "NODE_EXE=node"
 )
 
-SET "NPM_CLI_JS=%~dp0\node_modules\npm\bin\npm-cli.js"
+SET "NPM_CLI_JS=%~dp0\..\lib\node_modules\npm\bin\npm-cli.js"
 FOR /F "delims=" %%F IN ('CALL "%NODE_EXE%" "%NPM_CLI_JS%" prefix -g') DO (
-  SET "NPM_PREFIX_NPM_CLI_JS=%%F\node_modules\npm\bin\npm-cli.js"
+  SET "NPM_PREFIX_NPM_CLI_JS=%%F\..\lib\node_modules\npm\bin\npm-cli.js"
 )
 IF EXIST "%NPM_PREFIX_NPM_CLI_JS%" (
   SET "NPM_CLI_JS=%NPM_PREFIX_NPM_CLI_JS%"
diff -Nru orig/deps/npm/lib/config/defaults.js patched/deps/npm/lib/config/defaults.js
--- orig/deps/npm/lib/config/defaults.js	2019-04-30 13:31:13.000000000 -0400
+++ patched/deps/npm/lib/config/defaults.js	2021-03-10 05:44:54.313299768 -0500
@@ -81,8 +81,8 @@
 if (home) process.env.HOME = home
 else home = path.resolve(temp, 'npm-' + uidOrPid)
 
-var cacheExtra = process.platform === 'win32' ? 'npm-cache' : '.npm'
-var cacheRoot = (process.platform === 'win32' && process.env.APPDATA) || home
+var cacheExtra = '.npm'
+var cacheRoot = home
 var cache = path.resolve(cacheRoot, cacheExtra)
 
 var globalPrefix
@@ -91,9 +91,6 @@
 
   if (process.env.PREFIX) {
     globalPrefix = process.env.PREFIX
-  } else if (process.platform === 'win32') {
-    // c:\node\node.exe --> prefix=c:\node\
-    globalPrefix = path.dirname(process.execPath)
   } else {
     // /usr/local/bin/node --> prefix=/usr/local
     globalPrefix = path.dirname(path.dirname(process.execPath))
diff -Nru orig/deps/npm/lib/npm.js patched/deps/npm/lib/npm.js
--- orig/deps/npm/lib/npm.js	2019-04-30 13:31:13.000000000 -0400
+++ patched/deps/npm/lib/npm.js	2021-03-10 05:44:54.313299768 -0500
@@ -387,7 +387,7 @@
     {
       get: function () {
         var b = npm.globalPrefix
-        if (process.platform !== 'win32') b = path.resolve(b, 'bin')
+        b = path.resolve(b, 'bin')
         return b
       }
     })
@@ -404,9 +404,7 @@
   Object.defineProperty(npm, 'globalDir',
     {
       get: function () {
-        return (process.platform !== 'win32')
-          ? path.resolve(npm.globalPrefix, 'lib', 'node_modules')
-          : path.resolve(npm.globalPrefix, 'node_modules')
+        return path.resolve(npm.globalPrefix, 'lib', 'node_modules')
       },
       enumerable: true
     })
diff -Nru orig/deps/npm/lib/unbuild.js patched/deps/npm/lib/unbuild.js
--- orig/deps/npm/lib/unbuild.js	2019-04-30 13:31:13.000000000 -0400
+++ patched/deps/npm/lib/unbuild.js	2021-03-10 05:44:54.313299768 -0500
@@ -92,7 +92,6 @@
 function rmMans (pkg, folder, parent, top, cb) {
   if (!pkg.man ||
       !top ||
-      process.platform === 'win32' ||
       !npm.config.get('global')) {
     return cb()
   }
diff -Nru orig/deps/npm/node_modules/bin-links/index.js patched/deps/npm/node_modules/bin-links/index.js
--- orig/deps/npm/node_modules/bin-links/index.js	2019-04-30 13:31:13.000000000 -0400
+++ patched/deps/npm/node_modules/bin-links/index.js	2021-03-10 05:44:54.317299760 -0500
@@ -115,7 +115,7 @@
 }
 
 function linkMans (pkg, folder, parent, gtop, opts) {
-  if (!pkg.man || !gtop || process.platform === 'win32') return
+  if (!pkg.man || !gtop) return
 
   var manRoot = path.resolve(opts.prefix, 'share', 'man')
   opts.log.verbose('linkMans', 'man files are', pkg.man, 'in', manRoot)
diff -Nru orig/deps/npm/node_modules/node-gyp/gyp/gyp patched/deps/npm/node_modules/node-gyp/gyp/gyp
--- orig/deps/npm/node_modules/node-gyp/gyp/gyp	2019-04-30 13:31:13.000000000 -0400
+++ patched/deps/npm/node_modules/node-gyp/gyp/gyp	2021-03-10 05:44:54.317299760 -0500
@@ -5,4 +5,4 @@
 
 set -e
 base=$(dirname "$0")
-exec python "${base}/gyp_main.py" "$@"
+exec python2 "${base}/gyp_main.py" "$@"
diff -Nru orig/deps/npm/node_modules/node-gyp/gyp/gyp_main.py patched/deps/npm/node_modules/node-gyp/gyp/gyp_main.py
--- orig/deps/npm/node_modules/node-gyp/gyp/gyp_main.py	2019-04-30 13:31:13.000000000 -0400
+++ patched/deps/npm/node_modules/node-gyp/gyp/gyp_main.py	2021-03-10 05:44:54.317299760 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 
 # Copyright (c) 2009 Google Inc. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
diff -Nru orig/deps/npm/node_modules/node-gyp/gyp/pylib/gyp/common_test.py patched/deps/npm/node_modules/node-gyp/gyp/pylib/gyp/common_test.py
--- orig/deps/npm/node_modules/node-gyp/gyp/pylib/gyp/common_test.py	2019-04-30 13:31:13.000000000 -0400
+++ patched/deps/npm/node_modules/node-gyp/gyp/pylib/gyp/common_test.py	2021-03-10 05:44:54.317299760 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 
 # Copyright (c) 2012 Google Inc. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
diff -Nru orig/deps/npm/node_modules/node-gyp/gyp/pylib/gyp/easy_xml_test.py patched/deps/npm/node_modules/node-gyp/gyp/pylib/gyp/easy_xml_test.py
--- orig/deps/npm/node_modules/node-gyp/gyp/pylib/gyp/easy_xml_test.py	2019-04-30 13:31:13.000000000 -0400
+++ patched/deps/npm/node_modules/node-gyp/gyp/pylib/gyp/easy_xml_test.py	2021-03-10 05:44:54.317299760 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 
 # Copyright (c) 2011 Google Inc. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
diff -Nru orig/deps/npm/node_modules/node-gyp/gyp/pylib/gyp/flock_tool.py patched/deps/npm/node_modules/node-gyp/gyp/pylib/gyp/flock_tool.py
--- orig/deps/npm/node_modules/node-gyp/gyp/pylib/gyp/flock_tool.py	2019-04-30 13:31:13.000000000 -0400
+++ patched/deps/npm/node_modules/node-gyp/gyp/pylib/gyp/flock_tool.py	2021-03-10 05:44:54.317299760 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 # Copyright (c) 2011 Google Inc. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
diff -Nru orig/deps/npm/node_modules/node-gyp/gyp/pylib/gyp/generator/msvs_test.py patched/deps/npm/node_modules/node-gyp/gyp/pylib/gyp/generator/msvs_test.py
--- orig/deps/npm/node_modules/node-gyp/gyp/pylib/gyp/generator/msvs_test.py	2019-04-30 13:31:13.000000000 -0400
+++ patched/deps/npm/node_modules/node-gyp/gyp/pylib/gyp/generator/msvs_test.py	2021-03-10 05:44:54.317299760 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 # Copyright (c) 2012 Google Inc. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
diff -Nru orig/deps/npm/node_modules/node-gyp/gyp/pylib/gyp/generator/ninja.py patched/deps/npm/node_modules/node-gyp/gyp/pylib/gyp/generator/ninja.py
--- orig/deps/npm/node_modules/node-gyp/gyp/pylib/gyp/generator/ninja.py	2019-04-30 13:31:13.000000000 -0400
+++ patched/deps/npm/node_modules/node-gyp/gyp/pylib/gyp/generator/ninja.py	2021-03-10 05:44:54.317299760 -0500
@@ -1754,7 +1754,7 @@
     return '%(python)s gyp-win-tool link-with-manifests $arch %(embed)s ' \
            '%(out)s "%(ldcmd)s" %(resname)s $mt $rc "$intermediatemanifest" ' \
            '$manifests' % {
-               'python': sys.executable,
+               'python2': sys.executable,
                'out': out,
                'ldcmd': ldcmd,
                'resname': resource_name,
diff -Nru orig/deps/npm/node_modules/node-gyp/gyp/pylib/gyp/generator/ninja_test.py patched/deps/npm/node_modules/node-gyp/gyp/pylib/gyp/generator/ninja_test.py
--- orig/deps/npm/node_modules/node-gyp/gyp/pylib/gyp/generator/ninja_test.py	2019-04-30 13:31:13.000000000 -0400
+++ patched/deps/npm/node_modules/node-gyp/gyp/pylib/gyp/generator/ninja_test.py	2021-03-10 05:44:54.317299760 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 
 # Copyright (c) 2012 Google Inc. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
diff -Nru orig/deps/npm/node_modules/node-gyp/gyp/pylib/gyp/generator/xcode.py patched/deps/npm/node_modules/node-gyp/gyp/pylib/gyp/generator/xcode.py
--- orig/deps/npm/node_modules/node-gyp/gyp/pylib/gyp/generator/xcode.py	2019-04-30 13:31:13.000000000 -0400
+++ patched/deps/npm/node_modules/node-gyp/gyp/pylib/gyp/generator/xcode.py	2021-03-10 05:44:54.317299760 -0500
@@ -283,7 +283,7 @@
         command_prefix = ''
         if serialize_all_tests:
           command_prefix = \
-"""python -c "import fcntl, subprocess, sys
+"""python2 -c "import fcntl, subprocess, sys
 file = open('$TMPDIR/GYP_serialize_test_runs', 'a')
 fcntl.flock(file.fileno(), fcntl.LOCK_EX)
 sys.exit(subprocess.call(sys.argv[1:]))" """
diff -Nru orig/deps/npm/node_modules/node-gyp/gyp/pylib/gyp/generator/xcode_test.py patched/deps/npm/node_modules/node-gyp/gyp/pylib/gyp/generator/xcode_test.py
--- orig/deps/npm/node_modules/node-gyp/gyp/pylib/gyp/generator/xcode_test.py	2019-04-30 13:31:13.000000000 -0400
+++ patched/deps/npm/node_modules/node-gyp/gyp/pylib/gyp/generator/xcode_test.py	2021-03-10 05:44:54.317299760 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 
 # Copyright (c) 2013 Google Inc. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
diff -Nru orig/deps/npm/node_modules/node-gyp/gyp/pylib/gyp/__init__.py patched/deps/npm/node_modules/node-gyp/gyp/pylib/gyp/__init__.py
--- orig/deps/npm/node_modules/node-gyp/gyp/pylib/gyp/__init__.py	2019-04-30 13:31:13.000000000 -0400
+++ patched/deps/npm/node_modules/node-gyp/gyp/pylib/gyp/__init__.py	2021-03-10 05:44:54.317299760 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 
 # Copyright (c) 2012 Google Inc. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
diff -Nru orig/deps/npm/node_modules/node-gyp/gyp/pylib/gyp/input_test.py patched/deps/npm/node_modules/node-gyp/gyp/pylib/gyp/input_test.py
--- orig/deps/npm/node_modules/node-gyp/gyp/pylib/gyp/input_test.py	2019-04-30 13:31:13.000000000 -0400
+++ patched/deps/npm/node_modules/node-gyp/gyp/pylib/gyp/input_test.py	2021-03-10 05:44:54.321299752 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 
 # Copyright 2013 Google Inc. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
diff -Nru orig/deps/npm/node_modules/node-gyp/gyp/pylib/gyp/mac_tool.py patched/deps/npm/node_modules/node-gyp/gyp/pylib/gyp/mac_tool.py
--- orig/deps/npm/node_modules/node-gyp/gyp/pylib/gyp/mac_tool.py	2019-04-30 13:31:13.000000000 -0400
+++ patched/deps/npm/node_modules/node-gyp/gyp/pylib/gyp/mac_tool.py	2021-03-10 05:44:54.321299752 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 # Copyright (c) 2012 Google Inc. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
diff -Nru orig/deps/npm/node_modules/node-gyp/gyp/pylib/gyp/MSVSSettings_test.py patched/deps/npm/node_modules/node-gyp/gyp/pylib/gyp/MSVSSettings_test.py
--- orig/deps/npm/node_modules/node-gyp/gyp/pylib/gyp/MSVSSettings_test.py	2019-04-30 13:31:13.000000000 -0400
+++ patched/deps/npm/node_modules/node-gyp/gyp/pylib/gyp/MSVSSettings_test.py	2021-03-10 05:44:54.321299752 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 
 # Copyright (c) 2012 Google Inc. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
diff -Nru orig/deps/npm/node_modules/node-gyp/gyp/pylib/gyp/win_tool.py patched/deps/npm/node_modules/node-gyp/gyp/pylib/gyp/win_tool.py
--- orig/deps/npm/node_modules/node-gyp/gyp/pylib/gyp/win_tool.py	2019-04-30 13:31:13.000000000 -0400
+++ patched/deps/npm/node_modules/node-gyp/gyp/pylib/gyp/win_tool.py	2021-03-10 05:44:54.321299752 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 
 # Copyright (c) 2012 Google Inc. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
@@ -144,7 +144,7 @@
     # first and only link. We still tell link to generate a manifest, but we
     # only use that to assert that our simpler process did not miss anything.
     variables = {
-      'python': sys.executable,
+      'python2': sys.executable,
       'arch': arch,
       'out': out,
       'ldcmd': ldcmd,
diff -Nru orig/deps/npm/node_modules/node-gyp/gyp/samples/samples patched/deps/npm/node_modules/node-gyp/gyp/samples/samples
--- orig/deps/npm/node_modules/node-gyp/gyp/samples/samples	2019-04-30 13:31:13.000000000 -0400
+++ patched/deps/npm/node_modules/node-gyp/gyp/samples/samples	2021-03-10 05:44:54.321299752 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/python
+#!/usr/bin/python2
 
 # Copyright (c) 2009 Google Inc. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
diff -Nru orig/deps/npm/node_modules/node-gyp/gyp/setup.py patched/deps/npm/node_modules/node-gyp/gyp/setup.py
--- orig/deps/npm/node_modules/node-gyp/gyp/setup.py	2019-04-30 13:31:13.000000000 -0400
+++ patched/deps/npm/node_modules/node-gyp/gyp/setup.py	2021-03-10 05:44:54.321299752 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 
 # Copyright (c) 2009 Google Inc. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
diff -Nru orig/deps/npm/node_modules/node-gyp/gyp/tools/emacs/testdata/media.gyp patched/deps/npm/node_modules/node-gyp/gyp/tools/emacs/testdata/media.gyp
--- orig/deps/npm/node_modules/node-gyp/gyp/tools/emacs/testdata/media.gyp	2019-04-30 13:31:13.000000000 -0400
+++ patched/deps/npm/node_modules/node-gyp/gyp/tools/emacs/testdata/media.gyp	2021-03-10 05:44:54.321299752 -0500
@@ -987,7 +987,7 @@
                 '<(SHARED_INTERMEDIATE_DIR)/media/jni/media_player_listener_jni.h',
               ],
               'action': [
-                'python',
+                'python2',
                 '<(DEPTH)/base/android/jni_generator/jni_generator.py',
                 '-o',
                 '<@(_inputs)',
diff -Nru orig/deps/npm/node_modules/node-gyp/gyp/tools/emacs/testdata/media.gyp.fontified patched/deps/npm/node_modules/node-gyp/gyp/tools/emacs/testdata/media.gyp.fontified
--- orig/deps/npm/node_modules/node-gyp/gyp/tools/emacs/testdata/media.gyp.fontified	2019-04-30 13:31:13.000000000 -0400
+++ patched/deps/npm/node_modules/node-gyp/gyp/tools/emacs/testdata/media.gyp.fontified	2021-03-10 05:44:54.321299752 -0500
@@ -988,7 +988,7 @@
                 '<(SHARED_INTERMEDIATE_DIR)/media/jni/media_player_listener_jni.h',
               ],
               'action': [
-                'python',
+                'python2',
                 '<(DEPTH)/base/android/jni_generator/jni_generator.py',
                 '-o',
                 '<@(_inputs)',
diff -Nru orig/deps/npm/node_modules/node-gyp/gyp/tools/graphviz.py patched/deps/npm/node_modules/node-gyp/gyp/tools/graphviz.py
--- orig/deps/npm/node_modules/node-gyp/gyp/tools/graphviz.py	2019-04-30 13:31:13.000000000 -0400
+++ patched/deps/npm/node_modules/node-gyp/gyp/tools/graphviz.py	2021-03-10 05:44:54.321299752 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 
 # Copyright (c) 2011 Google Inc. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
diff -Nru orig/deps/npm/node_modules/node-gyp/gyp/tools/pretty_gyp.py patched/deps/npm/node_modules/node-gyp/gyp/tools/pretty_gyp.py
--- orig/deps/npm/node_modules/node-gyp/gyp/tools/pretty_gyp.py	2019-04-30 13:31:13.000000000 -0400
+++ patched/deps/npm/node_modules/node-gyp/gyp/tools/pretty_gyp.py	2021-03-10 05:44:54.321299752 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 
 # Copyright (c) 2012 Google Inc. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
diff -Nru orig/deps/npm/node_modules/node-gyp/gyp/tools/pretty_sln.py patched/deps/npm/node_modules/node-gyp/gyp/tools/pretty_sln.py
--- orig/deps/npm/node_modules/node-gyp/gyp/tools/pretty_sln.py	2019-04-30 13:31:13.000000000 -0400
+++ patched/deps/npm/node_modules/node-gyp/gyp/tools/pretty_sln.py	2021-03-10 05:44:54.325299744 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 
 # Copyright (c) 2012 Google Inc. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
diff -Nru orig/deps/npm/node_modules/node-gyp/gyp/tools/pretty_vcproj.py patched/deps/npm/node_modules/node-gyp/gyp/tools/pretty_vcproj.py
--- orig/deps/npm/node_modules/node-gyp/gyp/tools/pretty_vcproj.py	2019-04-30 13:31:13.000000000 -0400
+++ patched/deps/npm/node_modules/node-gyp/gyp/tools/pretty_vcproj.py	2021-03-10 05:44:54.325299744 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 
 # Copyright (c) 2012 Google Inc. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
diff -Nru orig/deps/npm/node_modules/node-gyp/lib/configure.js patched/deps/npm/node_modules/node-gyp/lib/configure.js
--- orig/deps/npm/node_modules/node-gyp/lib/configure.js	2019-04-30 13:31:13.000000000 -0400
+++ patched/deps/npm/node_modules/node-gyp/lib/configure.js	2021-03-10 05:44:54.325299744 -0500
@@ -47,7 +47,7 @@
 
   function getNodeDir () {
 
-    // 'python' should be set by now
+    // 'python2' should be set by now
     process.env.PYTHON = python
 
     if (gyp.opts.nodedir) {
@@ -397,7 +397,7 @@
       if (err) {
         this.log.verbose('`which` failed', this.python, err)
         if (this.python === 'python2') {
-          this.python = 'python'
+          this.python = 'python2'
           return this.checkPython()
         }
         if (this.win) {
diff -Nru orig/deps/npm/node_modules/node-gyp/README.md patched/deps/npm/node_modules/node-gyp/README.md
--- orig/deps/npm/node_modules/node-gyp/README.md	2019-04-30 13:31:13.000000000 -0400
+++ patched/deps/npm/node_modules/node-gyp/README.md	2021-03-10 05:44:54.325299744 -0500
@@ -70,7 +70,7 @@
 ```
 
 If `node-gyp` is called by way of `npm` *and* you have multiple versions of
-Python installed, then you can set `npm`'s 'python' config key to the appropriate
+Python installed, then you can set `npm`'s 'python2' config key to the appropriate
 value:
 
 ``` bash
diff -Nru orig/deps/npm/node_modules/node-gyp/test/test-addon.js patched/deps/npm/node_modules/node-gyp/test/test-addon.js
--- orig/deps/npm/node_modules/node-gyp/test/test-addon.js	2019-04-30 13:31:13.000000000 -0400
+++ patched/deps/npm/node_modules/node-gyp/test/test-addon.js	2021-03-10 05:44:54.325299744 -0500
@@ -16,13 +16,13 @@
 
 function getEncoding() {
   var code = 'import locale;print locale.getdefaultlocale()[1]'
-  return execFileSync('python', ['-c', code]).toString().trim()
+  return execFileSync('python2', ['-c', code]).toString().trim()
 }
 
 function checkCharmapValid() {
   var data
   try {
-    data = execFileSync('python', ['fixtures/test-charmap.py'],
+    data = execFileSync('python2', ['fixtures/test-charmap.py'],
                         { cwd: __dirname })
   } catch (err) {
     return false
diff -Nru orig/deps/npm/node_modules/node-gyp/test/test-find-python.js patched/deps/npm/node_modules/node-gyp/test/test-find-python.js
--- orig/deps/npm/node_modules/node-gyp/test/test-find-python.js	2019-04-30 13:31:13.000000000 -0400
+++ patched/deps/npm/node_modules/node-gyp/test/test-find-python.js	2021-03-10 05:44:54.325299744 -0500
@@ -9,7 +9,7 @@
 test('find python', function (t) {
   t.plan(4)
 
-  configure.test.findPython('python', function (err, found) {
+  configure.test.findPython('python2', function (err, found) {
     t.strictEqual(err, null)
     var proc = execFile(found, ['-V'], function (err, stdout, stderr) {
       t.strictEqual(err, null)
@@ -55,13 +55,13 @@
 test('find python - python', function (t) {
   t.plan(5)
 
-  var f = new TestPythonFinder('python', done)
+  var f = new TestPythonFinder('python2', done)
   f.which = function(program, cb) {
-    t.strictEqual(program, 'python')
+    t.strictEqual(program, 'python2')
     cb(null, program)
   }
   f.execFile = function(program, args, opts, cb) {
-    t.strictEqual(program, 'python')
+    t.strictEqual(program, 'python2')
     t.ok(/import sys/.test(args[1]))
     cb(null, '2.7.0')
   }
@@ -69,20 +69,20 @@
 
   function done(err, python) {
     t.strictEqual(err, null)
-    t.strictEqual(python, 'python')
+    t.strictEqual(python, 'python2')
   }
 })
 
 test('find python - python too old', function (t) {
   t.plan(4)
 
-  var f = new TestPythonFinder('python', done)
+  var f = new TestPythonFinder('python2', done)
   f.which = function(program, cb) {
-    t.strictEqual(program, 'python')
+    t.strictEqual(program, 'python2')
     cb(null, program)
   }
   f.execFile = function(program, args, opts, cb) {
-    t.strictEqual(program, 'python')
+    t.strictEqual(program, 'python2')
     t.ok(/import sys/.test(args[1]))
     cb(null, '2.3.4')
   }
@@ -96,13 +96,13 @@
 test('find python - python too new', function (t) {
   t.plan(4)
 
-  var f = new TestPythonFinder('python', done)
+  var f = new TestPythonFinder('python2', done)
   f.which = function(program, cb) {
-    t.strictEqual(program, 'python')
+    t.strictEqual(program, 'python2')
     cb(null, program)
   }
   f.execFile = function(program, args, opts, cb) {
-    t.strictEqual(program, 'python')
+    t.strictEqual(program, 'python2')
     t.ok(/import sys/.test(args[1]))
     cb(null, '3.0.0')
   }
@@ -116,9 +116,9 @@
 test('find python - no python', function (t) {
   t.plan(2)
 
-  var f = new TestPythonFinder('python', done)
+  var f = new TestPythonFinder('python2', done)
   f.which = function(program, cb) {
-    t.strictEqual(program, 'python')
+    t.strictEqual(program, 'python2')
     cb(new Error('not found'))
   }
   f.checkPython()
@@ -134,14 +134,14 @@
   var f = new TestPythonFinder('python2', done)
   f.which = function(program, cb) {
     f.which = function(program, cb) {
-      t.strictEqual(program, 'python')
+      t.strictEqual(program, 'python2')
       cb(null, program)
     }
     t.strictEqual(program, 'python2')
     cb(new Error('not found'))
   }
   f.execFile = function(program, args, opts, cb) {
-    t.strictEqual(program, 'python')
+    t.strictEqual(program, 'python2')
     t.ok(/import sys/.test(args[1]))
     cb(null, '2.7.0')
   }
@@ -149,7 +149,7 @@
 
   function done(err, python) {
     t.strictEqual(err, null)
-    t.strictEqual(python, 'python')
+    t.strictEqual(python, 'python2')
   }
 })
 
@@ -162,7 +162,7 @@
 
   f.which = function(program, cb) {
     f.which = function(program, cb) {
-      t.strictEqual(program, 'python')
+      t.strictEqual(program, 'python2')
       cb(new Error('not found'))
     }
     t.strictEqual(program, 'python2')
@@ -178,12 +178,12 @@
 test('find python - no python, use python launcher', function (t) {
   t.plan(8)
 
-  var f = new TestPythonFinder('python', done)
+  var f = new TestPythonFinder('python2', done)
   f.env = {}
   f.win = true
 
   f.which = function(program, cb) {
-    t.strictEqual(program, 'python')
+    t.strictEqual(program, 'python2')
     cb(new Error('not found'))
   }
   f.execFile = function(program, args, opts, cb) {
@@ -208,12 +208,12 @@
 test('find python - python 3, use python launcher', function (t) {
   t.plan(10)
 
-  var f = new TestPythonFinder('python', done)
+  var f = new TestPythonFinder('python2', done)
   f.env = {}
   f.win = true
 
   f.which = function(program, cb) {
-    t.strictEqual(program, 'python')
+    t.strictEqual(program, 'python2')
     cb(null, program)
   }
   f.execFile = function(program, args, opts, cb) {
@@ -228,7 +228,7 @@
       t.notEqual(args.indexOf('-c'), -1)
       cb(null, 'Z:\\snake.exe')
     }
-    t.strictEqual(program, 'python')
+    t.strictEqual(program, 'python2')
     t.ok(/import sys/.test(args[1]))
     cb(null, '3.0.0')
   }
@@ -244,13 +244,13 @@
      function (t) {
   t.plan(9)
 
-  var f = new TestPythonFinder('python', done)
+  var f = new TestPythonFinder('python2', done)
   f.checkedPythonLauncher = false
   f.env = {}
   f.win = true
 
   f.which = function(program, cb) {
-    t.strictEqual(program, 'python')
+    t.strictEqual(program, 'python2')
     cb(null, program)
   }
   f.execFile = function(program, args, opts, cb) {
@@ -265,7 +265,7 @@
       t.notEqual(args.indexOf('-c'), -1)
       cb(null, 'Z:\\snake.exe')
     }
-    t.strictEqual(program, 'python')
+    t.strictEqual(program, 'python2')
     t.ok(/import sys/.test(args[1]))
     cb(null, '3.0.0')
   }
@@ -280,12 +280,12 @@
   t.plan(6)
 
   var re = /C:[\\\/]Python27[\\\/]python[.]exe/
-  var f = new TestPythonFinder('python', done)
+  var f = new TestPythonFinder('python2', done)
   f.env = {}
   f.win = true
 
   f.which = function(program, cb) {
-    t.strictEqual(program, 'python')
+    t.strictEqual(program, 'python2')
     cb(new Error('not found'))
   }
   f.execFile = function(program, args, opts, cb) {
@@ -312,12 +312,12 @@
 test('find python - no python, no python launcher, bad guess', function (t) {
   t.plan(4)
 
-  var f = new TestPythonFinder('python', done)
+  var f = new TestPythonFinder('python2', done)
   f.env = { SystemDrive: 'Z:\\' }
   f.win = true
 
   f.which = function(program, cb) {
-    t.strictEqual(program, 'python')
+    t.strictEqual(program, 'python2')
     cb(new Error('not found'))
   }
   f.execFile = function(program, args, opts, cb) {
diff -Nru orig/deps/openssl/openssl/fuzz/helper.py patched/deps/openssl/openssl/fuzz/helper.py
--- orig/deps/openssl/openssl/fuzz/helper.py	2019-04-30 13:31:26.000000000 -0400
+++ patched/deps/openssl/openssl/fuzz/helper.py	2021-03-10 05:44:54.325299744 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/python
+#!/usr/bin/python2
 #
 # Copyright 2016-2018 The OpenSSL Project Authors. All Rights Reserved.
 #
diff -Nru orig/deps/uv/gyp_uv.py patched/deps/uv/gyp_uv.py
--- orig/deps/uv/gyp_uv.py	2019-04-30 13:31:27.000000000 -0400
+++ patched/deps/uv/gyp_uv.py	2021-03-10 05:44:54.325299744 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 
 import os
 import platform
diff -Nru orig/deps/uv/tools/make_dist_html.py patched/deps/uv/tools/make_dist_html.py
--- orig/deps/uv/tools/make_dist_html.py	2019-04-30 13:31:27.000000000 -0400
+++ patched/deps/uv/tools/make_dist_html.py	2021-03-10 05:44:54.325299744 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/python
+#!/usr/bin/python2
 
 from __future__ import print_function
 
diff -Nru orig/deps/v8/BUILD.gn patched/deps/v8/BUILD.gn
--- orig/deps/v8/BUILD.gn	2019-04-30 13:31:27.000000000 -0400
+++ patched/deps/v8/BUILD.gn	2021-03-10 05:47:46.304980114 -0500
@@ -74,7 +74,7 @@
   # Enable embedded builtins.
   # TODO(jgruber,v8:6666): Support ia32 and maybe MSVC.
   v8_enable_embedded_builtins = v8_use_snapshot && v8_current_cpu != "x86" &&
-                                !is_aix && (!is_win || is_clang)
+                                !is_aix && (!(current_toolchain != host_toolchain) || is_clang)
 
   # Enable embedded bytecode handlers.
   v8_enable_embedded_bytecode_handlers = false
@@ -151,7 +151,7 @@
 
   v8_enable_gdbjit =
       ((v8_current_cpu == "x86" || v8_current_cpu == "x64") &&
-       (is_linux || is_mac)) || (v8_current_cpu == "ppc64" && is_linux)
+       ((current_toolchain == host_toolchain) || is_mac)) || (v8_current_cpu == "ppc64" && (current_toolchain == host_toolchain))
 
   # Temporary flag to allow embedders to update their microtasks scopes
   # while rolling in a new version of V8.
@@ -541,14 +541,14 @@
 
   if (v8_current_cpu == "x86") {
     defines += [ "V8_TARGET_ARCH_IA32" ]
-    if (is_win) {
+    if ((current_toolchain != host_toolchain)) {
       # Ensure no surprising artifacts from 80bit double math with x86.
       cflags += [ "/arch:SSE2" ]
     }
   }
   if (v8_current_cpu == "x64") {
     defines += [ "V8_TARGET_ARCH_X64" ]
-    if (is_win) {
+    if ((current_toolchain != host_toolchain)) {
       # Increase the initial stack size. The default is 1MB, this is 2MB. This
       # applies only to executables and shared libraries produced by V8 since
       # ldflags are not pushed to dependants.
@@ -563,7 +563,7 @@
   # TODO(jochen): Add support for compiling with simulators.
 
   if (v8_enable_debugging_features) {
-    if (is_linux && v8_enable_backtrace) {
+    if ((current_toolchain == host_toolchain) && v8_enable_backtrace) {
       ldflags += [ "-rdynamic" ]
     }
 
@@ -609,7 +609,7 @@
     }
   }
 
-  if (is_win) {
+  if ((current_toolchain != host_toolchain)) {
     cflags += [
       "/wd4245",  # Conversion with signed/unsigned mismatch.
       "/wd4267",  # Conversion with possible loss of data.
@@ -631,7 +631,7 @@
     ]
   }
 
-  if (!is_clang && !is_win) {
+  if (!is_clang && !(current_toolchain != host_toolchain)) {
     cflags += [
       # Disable gcc warnings for optimizations based on the assumption that
       # signed overflow does not occur. Generates false positives (see
@@ -2665,13 +2665,13 @@
       "src/x64/simulator-x64.h",
       "src/x64/sse-instr.h",
     ]
-    if (is_linux) {
+    if (current_toolchain == host_toolchain) {
       sources += [
         "src/trap-handler/handler-inside-linux.cc",
         "src/trap-handler/handler-outside-linux.cc",
       ]
     }
-    if (is_win) {
+    if (current_toolchain != host_toolchain) {
       sources += [ "src/trap-handler/handler-outside-win.cc" ]
     }
   } else if (v8_current_cpu == "arm") {
@@ -2890,7 +2890,7 @@
     public_deps = [
       "//third_party/icu",
     ]
-    if (is_win) {
+    if ((current_toolchain != host_toolchain)) {
       deps += [ "//third_party/icu:icudata" ]
     }
   } else {
@@ -3063,7 +3063,7 @@
     }
   }
 
-  if (is_linux) {
+  if ((current_toolchain == host_toolchain)) {
     sources += [
       "src/base/debug/stack_trace_posix.cc",
       "src/base/platform/platform-linux.cc",
@@ -3116,7 +3116,7 @@
       "src/base/debug/stack_trace_posix.cc",
       "src/base/platform/platform-macos.cc",
     ]
-  } else if (is_win) {
+  } else if ((current_toolchain != host_toolchain)) {
     # TODO(jochen): Add support for cygwin.
     sources += [
       "src/base/debug/stack_trace_win.cc",
@@ -3127,10 +3127,10 @@
     defines += [ "_CRT_RAND_S" ]  # for rand_s()
 
     libs = [
-      "dbghelp.lib",
-      "shlwapi.lib",
-      "winmm.lib",
-      "ws2_32.lib",
+      "dbghelp",
+      "shlwapi",
+      "winmm",
+      "ws2_32",
     ]
 
     data_deps += [ "//build/win:runtime_libs" ]
@@ -3454,7 +3454,7 @@
 
   if (is_posix || is_fuchsia) {
     sources += [ "src/d8-posix.cc" ]
-  } else if (is_win) {
+  } else if ((current_toolchain != host_toolchain)) {
     sources += [ "src/d8-windows.cc" ]
   }
 
diff -Nru orig/deps/v8/DEPS patched/deps/v8/DEPS
--- orig/deps/v8/DEPS	2019-04-30 13:31:27.000000000 -0400
+++ patched/deps/v8/DEPS	2021-03-10 05:44:54.325299744 -0500
@@ -107,7 +107,7 @@
     'name': 'disable_depot_tools_selfupdate',
     'pattern': '.',
     'action': [
-        'python',
+        'python2',
         'v8/third_party/depot_tools/update_depot_tools_toggle.py',
         '--disable',
     ],
@@ -119,7 +119,7 @@
     'name': 'landmines',
     'pattern': '.',
     'action': [
-        'python',
+        'python2',
         'v8/build/landmines.py',
         '--landmine-scripts',
         'v8/tools/get_landmines.py',
@@ -284,35 +284,35 @@
     'name': 'sysroot_arm',
     'pattern': '.',
     'condition': '(checkout_linux and checkout_arm)',
-    'action': ['python', 'v8/build/linux/sysroot_scripts/install-sysroot.py',
+    'action': ['python2', 'v8/build/linux/sysroot_scripts/install-sysroot.py',
                '--arch=arm'],
   },
   {
     'name': 'sysroot_arm64',
     'pattern': '.',
     'condition': '(checkout_linux and checkout_arm64)',
-    'action': ['python', 'v8/build/linux/sysroot_scripts/install-sysroot.py',
+    'action': ['python2', 'v8/build/linux/sysroot_scripts/install-sysroot.py',
                '--arch=arm64'],
   },
   {
     'name': 'sysroot_x86',
     'pattern': '.',
     'condition': '(checkout_linux and (checkout_x86 or checkout_x64))',
-    'action': ['python', 'v8/build/linux/sysroot_scripts/install-sysroot.py',
+    'action': ['python2', 'v8/build/linux/sysroot_scripts/install-sysroot.py',
                '--arch=x86'],
   },
   {
     'name': 'sysroot_mips',
     'pattern': '.',
     'condition': '(checkout_linux and checkout_mips)',
-    'action': ['python', 'v8/build/linux/sysroot_scripts/install-sysroot.py',
+    'action': ['python2', 'v8/build/linux/sysroot_scripts/install-sysroot.py',
                '--arch=mips'],
   },
   {
     'name': 'sysroot_x64',
     'pattern': '.',
     'condition': 'checkout_linux and checkout_x64',
-    'action': ['python', 'v8/build/linux/sysroot_scripts/install-sysroot.py',
+    'action': ['python2', 'v8/build/linux/sysroot_scripts/install-sysroot.py',
                '--arch=x64'],
   },
   {
@@ -342,14 +342,14 @@
     'name': 'win_toolchain',
     'pattern': '.',
     'condition': 'checkout_win',
-    'action': ['python', 'v8/build/vs_toolchain.py', 'update'],
+    'action': ['python2', 'v8/build/vs_toolchain.py', 'update'],
   },
   {
     # Update the Mac toolchain if necessary.
     'name': 'mac_toolchain',
     'pattern': '.',
     'condition': 'checkout_mac',
-    'action': ['python', 'v8/build/mac_toolchain.py'],
+    'action': ['python2', 'v8/build/mac_toolchain.py'],
   },
   # Pull binutils for linux, enabled debug fission for faster linking /
   # debugging when used with clang on Ubuntu Precise.
@@ -359,7 +359,7 @@
     'pattern': 'v8/third_party/binutils',
     'condition': 'host_os == "linux"',
     'action': [
-        'python',
+        'python2',
         'v8/third_party/binutils/download.py',
     ],
   },
@@ -369,13 +369,13 @@
     'pattern': '.',
     # clang not supported on aix
     'condition': 'host_os != "aix"',
-    'action': ['python', 'v8/tools/clang/scripts/update.py'],
+    'action': ['python2', 'v8/tools/clang/scripts/update.py'],
   },
   {
     # Update LASTCHANGE.
     'name': 'lastchange',
     'pattern': '.',
-    'action': ['python', 'v8/build/util/lastchange.py',
+    'action': ['python2', 'v8/build/util/lastchange.py',
                '-o', 'v8/build/util/LASTCHANGE'],
   },
   {
@@ -383,7 +383,7 @@
     'pattern': '.',
     'condition': 'checkout_fuchsia',
     'action': [
-      'python',
+      'python2',
       'v8/build/fuchsia/update_sdk.py',
     ],
   },
@@ -415,7 +415,7 @@
     'pattern': '.',
     'condition': 'check_v8_header_includes',
     'action': [
-      'python',
+      'python2',
       'v8/tools/generate-header-include-checks.py',
     ],
   },
diff -Nru orig/deps/v8/gypfiles/cctest.gyp patched/deps/v8/gypfiles/cctest.gyp
--- orig/deps/v8/gypfiles/cctest.gyp	2019-04-30 13:31:27.000000000 -0400
+++ patched/deps/v8/gypfiles/cctest.gyp	2021-03-10 05:44:54.325299744 -0500
@@ -438,7 +438,7 @@
             '<(generated_file)',
           ],
           'action': [
-            'python',
+            'python2',
             '../tools/js2c.py',
             '<@(_outputs)',
             'TEST',  # type
diff -Nru orig/deps/v8/gypfiles/coverage_wrapper.py patched/deps/v8/gypfiles/coverage_wrapper.py
--- orig/deps/v8/gypfiles/coverage_wrapper.py	2019-04-30 13:31:27.000000000 -0400
+++ patched/deps/v8/gypfiles/coverage_wrapper.py	2021-03-10 05:44:54.325299744 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 # Copyright 2016 the V8 project authors. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
diff -Nru orig/deps/v8/gypfiles/d8.gyp patched/deps/v8/gypfiles/d8.gyp
--- orig/deps/v8/gypfiles/d8.gyp	2019-04-30 13:31:27.000000000 -0400
+++ patched/deps/v8/gypfiles/d8.gyp	2021-03-10 05:44:54.325299744 -0500
@@ -109,7 +109,7 @@
             '<(SHARED_INTERMEDIATE_DIR)/d8-js.cc',
           ],
           'action': [
-            'python',
+            'python2',
             '../tools/js2c.py',
             '<@(_outputs)',
             'D8',
diff -Nru orig/deps/v8/gypfiles/gyp_v8 patched/deps/v8/gypfiles/gyp_v8
--- orig/deps/v8/gypfiles/gyp_v8	2019-04-30 13:31:27.000000000 -0400
+++ patched/deps/v8/gypfiles/gyp_v8	2021-03-10 05:44:54.325299744 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 #
 # Copyright 2012 the V8 project authors. All rights reserved.
 # Redistribution and use in source and binary forms, with or without
diff -Nru orig/deps/v8/gypfiles/inspector.gypi patched/deps/v8/gypfiles/inspector.gypi
--- orig/deps/v8/gypfiles/inspector.gypi	2019-04-30 13:31:27.000000000 -0400
+++ patched/deps/v8/gypfiles/inspector.gypi	2021-03-10 05:44:54.325299744 -0500
@@ -101,7 +101,7 @@
         '<@(SHARED_INTERMEDIATE_DIR)/src/js_protocol.stamp',
       ],
       'action': [
-        'python',
+        'python2',
         '<(protocol_path)/CheckProtocolCompatibility.py',
         '--stamp', '<@(_outputs)',
         '<(inspector_path)/js_protocol.json',
@@ -120,7 +120,7 @@
       ],
       'process_outputs_as_sources': 1,
       'action': [
-        'python',
+        'python2',
         '<(protocol_path)/CodeGenerator.py',
         '--jinja_dir', '../third_party',
         '--output_base', '<(SHARED_INTERMEDIATE_DIR)/src/inspector',
@@ -139,7 +139,7 @@
       ],
       'process_outputs_as_sources': 1,
       'action': [
-        'python',
+        'python2',
         '<(inspector_path)/build/xxd.py',
         'InjectedScriptSource_js',
         '<(inspector_path)/injected-script-source.js',
diff -Nru orig/deps/v8/gypfiles/run-tests-legacy.py patched/deps/v8/gypfiles/run-tests-legacy.py
--- orig/deps/v8/gypfiles/run-tests-legacy.py	2019-04-30 13:31:27.000000000 -0400
+++ patched/deps/v8/gypfiles/run-tests-legacy.py	2021-03-10 05:44:54.325299744 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 # Copyright 2017 the V8 project authors. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
diff -Nru orig/deps/v8/gypfiles/shim_headers.gypi patched/deps/v8/gypfiles/shim_headers.gypi
--- orig/deps/v8/gypfiles/shim_headers.gypi	2019-04-30 13:31:27.000000000 -0400
+++ patched/deps/v8/gypfiles/shim_headers.gypi	2021-03-10 05:44:54.325299744 -0500
@@ -62,7 +62,7 @@
       'outputs': [
         '<!@pymod_do_main(generate_shim_headers <@(generator_args) --outputs)',
       ],
-      'action': ['python',
+      'action': ['python2',
                  '<(generator_path)',
                  '<@(generator_args)',
                  '--generate',
diff -Nru orig/deps/v8/gypfiles/standalone.gypi patched/deps/v8/gypfiles/standalone.gypi
--- orig/deps/v8/gypfiles/standalone.gypi	2019-04-30 13:31:27.000000000 -0400
+++ patched/deps/v8/gypfiles/standalone.gypi	2021-03-10 05:44:54.325299744 -0500
@@ -78,7 +78,7 @@
         'host_arch%': '<(host_arch)',
         'target_arch%': '<(target_arch)',
         'use_sysroot%': '<(use_sysroot)',
-        'base_dir%': '<!(cd <(DEPTH) && python -c "import os; print os.getcwd()")',
+        'base_dir%': '<!(cd <(DEPTH) && python2 -c "import os; print os.getcwd()")',
 
         # Instrument for code coverage and use coverage wrapper to exclude some
         # files. Uses gcov if clang=0 is set explicitly. Otherwise,
diff -Nru orig/deps/v8/gypfiles/toolchain.gypi patched/deps/v8/gypfiles/toolchain.gypi
--- orig/deps/v8/gypfiles/toolchain.gypi	2019-04-30 13:31:27.000000000 -0400
+++ patched/deps/v8/gypfiles/toolchain.gypi	2021-03-10 05:44:54.325299744 -0500
@@ -41,7 +41,7 @@
     'has_valgrind%': 0,
     'coverage%': 0,
     'v8_target_arch%': '<(target_arch)',
-    'v8_host_byteorder%': '<!(python -c "import sys; print sys.byteorder")',
+    'v8_host_byteorder%': '<!(python2 -c "import sys; print sys.byteorder")',
     'force_dynamic_crt%': 0,
 
     # Setting 'v8_can_use_vfp32dregs' to 'true' will cause V8 to use the VFP
diff -Nru orig/deps/v8/gypfiles/v8.gyp patched/deps/v8/gypfiles/v8.gyp
--- orig/deps/v8/gypfiles/v8.gyp	2019-04-30 13:31:27.000000000 -0400
+++ patched/deps/v8/gypfiles/v8.gyp	2021-03-10 05:45:49.345193428 -0500
@@ -105,7 +105,7 @@
             }],
           ],
           'action': [
-            'python', '../tools/testrunner/utils/dump_build_config_gyp.py',
+            'python2', '../tools/testrunner/utils/dump_build_config_gyp.py',
             '<@(v8_dump_build_config_args)',
           ],
         },
@@ -1629,13 +1629,13 @@
             '../src/x64/sse-instr.h',
           ],
         }],
-        ['v8_target_arch=="x64" and OS=="linux"', {
+        ['v8_target_arch=="x64" and _toolset=="host"', {
             'sources': [
               '../src/trap-handler/handler-inside-linux.cc',
               '../src/trap-handler/handler-outside-linux.cc',
             ],
         }],
-        ['v8_target_arch=="x64" and OS=="win"', {
+        ['v8_target_arch=="x64" and _toolset=="target"', {
             'sources': [
               '../src/trap-handler/handler-outside-win.cc',
             ],
@@ -1838,7 +1838,7 @@
             '../src/wasm/baseline/s390/liftoff-assembler-s390.h',
           ],
         }],
-        ['OS=="win"', {
+        ['v8_target_arch=="x64" and _toolset=="target"', {
           'variables': {
             'gyp_generators': '<!(echo $GYP_GENERATORS)',
           },
@@ -1886,7 +1886,7 @@
               'defines': ['ICU_UTIL_DATA_IMPL=ICU_UTIL_DATA_FILE'],
             }, { # else icu_use_data_file_flag !=1
               'conditions': [
-                ['OS=="win"', {
+                ['v8_target_arch=="x64" and _toolset=="target"', {
                   'defines': ['ICU_UTIL_DATA_IMPL=ICU_UTIL_DATA_SHARED'],
                 }, {
                   'defines': ['ICU_UTIL_DATA_IMPL=ICU_UTIL_DATA_STATIC'],
@@ -1922,11 +1922,6 @@
             '../src/runtime/runtime-intl.cc',
           ],
         }],
-        ['OS=="win" and v8_enable_i18n_support==1', {
-          'dependencies': [
-            '<(icu_gyp_path):icudata',
-          ],
-        }],
       ],
     }, # v8_base
     {
@@ -2027,7 +2022,7 @@
             ],
           },
         }],
-        ['OS=="linux"', {
+        ['v8_target_arch=="x64" and _toolset=="host"', {
             'link_settings': {
               'libraries': [
                 '-ldl',
@@ -2112,7 +2107,7 @@
             '../src/base/platform/platform-posix-time.h',
           ]},
         ],
-        ['OS=="win"', {
+        ['v8_target_arch=="x64" and _toolset=="target"', {
           'defines': [
             '_CRT_RAND_S'  # for rand_s()
           ],
@@ -2152,10 +2147,10 @@
               'msvs_disabled_warnings': [4351, 4355, 4800],
               'link_settings':  {
                 'libraries': [
-                  '-ldbghelp.lib',
-                  '-lshlwapi.lib',
-                  '-lwinmm.lib',
-                  '-lws2_32.lib'
+                  '-ldbghelp',
+                  '-lshlwapi',
+                  '-lwinmm',
+                  '-lws2_32'
                 ],
               },
             }],
@@ -2374,7 +2369,7 @@
               ],
               'outputs': ['<@(libraries_bin_file)'],
               'action': [
-                'python',
+                'python2',
                 '../tools/js2c.py',
                 '<(SHARED_INTERMEDIATE_DIR)/libraries.cc',
                 'CORE',
@@ -2391,7 +2386,7 @@
               ],
               'outputs': ['<@(libraries_extras_bin_file)'],
               'action': [
-                'python',
+                'python2',
                 '../tools/js2c.py',
                 '<(SHARED_INTERMEDIATE_DIR)/extras-libraries.cc',
                 'EXTRAS',
@@ -2408,7 +2403,7 @@
               ],
               'outputs': ['<@(libraries_experimental_extras_bin_file)'],
               'action': [
-                'python',
+                'python2',
                 '../tools/js2c.py',
                 '<(SHARED_INTERMEDIATE_DIR)/experimental-extras-libraries.cc',
                 'EXPERIMENTAL_EXTRAS',
@@ -2433,14 +2428,14 @@
                         '<(PRODUCT_DIR)/natives_blob_host.bin',
                       ],
                       'action': [
-                        'python', '<@(_inputs)', '<(PRODUCT_DIR)/natives_blob_host.bin'
+                        'python2', '<@(_inputs)', '<(PRODUCT_DIR)/natives_blob_host.bin'
                       ],
                     }, {
                       'outputs': [
                         '<(PRODUCT_DIR)/natives_blob.bin',
                       ],
                       'action': [
-                        'python', '<@(_inputs)', '<(PRODUCT_DIR)/natives_blob.bin'
+                        'python2', '<@(_inputs)', '<(PRODUCT_DIR)/natives_blob.bin'
                       ],
                     }],
                   ],
@@ -2449,7 +2444,7 @@
                     '<(PRODUCT_DIR)/natives_blob.bin',
                   ],
                   'action': [
-                    'python', '<@(_inputs)', '<(PRODUCT_DIR)/natives_blob.bin'
+                    'python2', '<@(_inputs)', '<(PRODUCT_DIR)/natives_blob.bin'
                   ],
                 }],
               ],
@@ -2494,7 +2489,7 @@
           ],
           'outputs': ['<(SHARED_INTERMEDIATE_DIR)/libraries.cc'],
           'action': [
-            'python',
+            'python2',
             '../tools/js2c.py',
             '<(SHARED_INTERMEDIATE_DIR)/libraries.cc',
             'CORE',
@@ -2509,7 +2504,7 @@
           ],
           'outputs': ['<(SHARED_INTERMEDIATE_DIR)/extras-libraries.cc'],
           'action': [
-            'python',
+            'python2',
             '../tools/js2c.py',
             '<(SHARED_INTERMEDIATE_DIR)/extras-libraries.cc',
             'EXTRAS',
@@ -2526,7 +2521,7 @@
             '<(SHARED_INTERMEDIATE_DIR)/experimental-extras-libraries.cc',
           ],
           'action': [
-            'python',
+            'python2',
             '../tools/js2c.py',
             '<(SHARED_INTERMEDIATE_DIR)/experimental-extras-libraries.cc',
             'EXPERIMENTAL_EXTRAS',
@@ -2663,7 +2658,7 @@
             '<(SHARED_INTERMEDIATE_DIR)/debug-support.cc',
           ],
           'action': [
-            'python',
+            'python2',
             '../tools/gen-postmortem-metadata.py',
             '<@(_outputs)',
             '<@(heapobject_files)'
diff -Nru orig/deps/v8/gypfiles/verify_source_deps.py patched/deps/v8/gypfiles/verify_source_deps.py
--- orig/deps/v8/gypfiles/verify_source_deps.py	2019-04-30 13:31:27.000000000 -0400
+++ patched/deps/v8/gypfiles/verify_source_deps.py	2021-03-10 05:44:54.325299744 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 # Copyright 2015 the V8 project authors. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
diff -Nru orig/deps/v8/src/base/atomicops.h patched/deps/v8/src/base/atomicops.h
--- orig/deps/v8/src/base/atomicops.h	2019-04-30 13:31:27.000000000 -0400
+++ patched/deps/v8/src/base/atomicops.h	2021-03-10 05:44:54.329299737 -0500
@@ -36,6 +36,10 @@
 #include "src/base/base-export.h"
 #include "src/base/build_config.h"
 
+#if defined(_WIN32)
+#include "win32-headers.h"
+#endif
+
 namespace v8 {
 namespace base {
 
diff -Nru orig/deps/v8/src/base/debug/stack_trace_win.cc patched/deps/v8/src/base/debug/stack_trace_win.cc
--- orig/deps/v8/src/base/debug/stack_trace_win.cc	2019-04-30 13:31:27.000000000 -0400
+++ patched/deps/v8/src/base/debug/stack_trace_win.cc	2021-03-10 05:46:17.961139731 -0500
@@ -16,7 +16,7 @@
 
 #include <windows.h>
 #include <dbghelp.h>
-#include <Shlwapi.h>
+#include <shlwapi.h>
 #include <stddef.h>
 
 #include <iostream>
@@ -50,9 +50,9 @@
 }
 
 void GetExePath(wchar_t* path_out) {
-  GetModuleFileName(nullptr, path_out, MAX_PATH);
+  GetModuleFileNameW(nullptr, path_out, MAX_PATH);
   path_out[MAX_PATH - 1] = L'\0';
-  PathRemoveFileSpec(path_out);
+  PathRemoveFileSpecW(path_out);
 }
 
 bool InitializeSymbols() {
diff -Nru orig/deps/v8/src/base/export-template.h patched/deps/v8/src/base/export-template.h
--- orig/deps/v8/src/base/export-template.h	2019-04-30 13:31:27.000000000 -0400
+++ patched/deps/v8/src/base/export-template.h	2021-03-10 05:44:54.329299737 -0500
@@ -153,7 +153,6 @@
 
 EXPORT_TEMPLATE_TEST(DEFAULT, );
 EXPORT_TEMPLATE_TEST(DEFAULT, __attribute__((visibility("default"))));
-EXPORT_TEMPLATE_TEST(MSVC_HACK, __declspec(dllexport));
 EXPORT_TEMPLATE_TEST(DEFAULT, __declspec(dllimport));
 
 #undef EXPORT_TEMPLATE_TEST
diff -Nru orig/deps/v8/src/base/format-macros.h patched/deps/v8/src/base/format-macros.h
--- orig/deps/v8/src/base/format-macros.h	2019-04-30 13:31:27.000000000 -0400
+++ patched/deps/v8/src/base/format-macros.h	2021-03-10 05:44:54.329299737 -0500
@@ -80,6 +80,16 @@
 
 #else  // V8_OS_WIN
 
+#ifndef PRId64
+#define PRId64 "I64d"
+#endif
+#ifndef PRIu64
+#define PRIu64 "I64u"
+#endif
+#ifndef PRIx64
+#define PRIx64 "I64x"
+#endif
+
 #if !defined(PRId64) || !defined(PRIu64) || !defined(PRIx64)
 #error "inttypes.h provided by win toolchain should define these."
 #endif
diff -Nru orig/deps/v8/src/base/platform/condition-variable.cc patched/deps/v8/src/base/platform/condition-variable.cc
--- orig/deps/v8/src/base/platform/condition-variable.cc	2019-04-30 13:31:27.000000000 -0400
+++ patched/deps/v8/src/base/platform/condition-variable.cc	2021-03-10 05:44:54.329299737 -0500
@@ -9,6 +9,10 @@
 
 #include "src/base/platform/time.h"
 
+#if V8_OS_WIN
+#include <windows.h>
+#endif
+
 namespace v8 {
 namespace base {
 
diff -Nru orig/deps/v8/src/base/platform/platform-win32.cc patched/deps/v8/src/base/platform/platform-win32.cc
--- orig/deps/v8/src/base/platform/platform-win32.cc	2019-04-30 13:31:27.000000000 -0400
+++ patched/deps/v8/src/base/platform/platform-win32.cc	2021-03-10 05:47:03.877055667 -0500
@@ -27,7 +27,7 @@
 #include "src/base/timezone-cache.h"
 #include "src/base/utils/random-number-generator.h"
 
-#include <VersionHelpers.h>
+#include <versionhelpers.h>
 
 #if defined(_MSC_VER)
 #include <crtdbg.h>  // NOLINT
@@ -36,7 +36,7 @@
 // Extra functions for MinGW. Most of these are the _s functions which are in
 // the Microsoft Visual Studio C++ CRT.
 #ifdef __MINGW32__
-
+#define PAGE_TARGETS_INVALID 0x40000000
 
 #ifndef __MINGW64_VERSION_MAJOR
 
@@ -48,8 +48,6 @@
   __asm__ __volatile__("xchgl %%eax,%0 ":"=r" (barrier));
 }
 
-#endif  // __MINGW64_VERSION_MAJOR
-
 
 int localtime_s(tm* out_tm, const time_t* time) {
   tm* posix_local_time_struct = localtime_r(time, out_tm);
@@ -57,7 +55,9 @@
   return 0;
 }
 
+#endif  // __MINGW64_VERSION_MAJOR
 
+/*
 int fopen_s(FILE** pFile, const char* filename, const char* mode) {
   *pFile = fopen(filename, mode);
   return *pFile != nullptr ? 0 : 1;
@@ -95,6 +95,7 @@
   *dest = 0;
   return 0;
 }
+*/
 
 #endif  // __MINGW32__
 
diff -Nru orig/deps/v8/src/base/platform/platform-win32.cc.orig patched/deps/v8/src/base/platform/platform-win32.cc.orig
--- orig/deps/v8/src/base/platform/platform-win32.cc.orig	1969-12-31 19:00:00.000000000 -0500
+++ patched/deps/v8/src/base/platform/platform-win32.cc.orig	2021-03-10 05:44:54.329299737 -0500
@@ -0,0 +1,1373 @@
+// Copyright 2012 the V8 project authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+// Platform-specific code for Win32.
+
+// Secure API functions are not available using MinGW with msvcrt.dll
+// on Windows XP. Make sure MINGW_HAS_SECURE_API is not defined to
+// disable definition of secure API functions in standard headers that
+// would conflict with our own implementation.
+#ifdef __MINGW32__
+#include <_mingw.h>
+#ifdef MINGW_HAS_SECURE_API
+#undef MINGW_HAS_SECURE_API
+#endif  // MINGW_HAS_SECURE_API
+#endif  // __MINGW32__
+
+#include <limits>
+
+#include "src/base/win32-headers.h"
+
+#include "src/base/bits.h"
+#include "src/base/lazy-instance.h"
+#include "src/base/macros.h"
+#include "src/base/platform/platform.h"
+#include "src/base/platform/time.h"
+#include "src/base/timezone-cache.h"
+#include "src/base/utils/random-number-generator.h"
+
+#include <VersionHelpers.h>
+
+#if defined(_MSC_VER)
+#include <crtdbg.h>  // NOLINT
+#endif               // defined(_MSC_VER)
+
+// Extra functions for MinGW. Most of these are the _s functions which are in
+// the Microsoft Visual Studio C++ CRT.
+#ifdef __MINGW32__
+
+
+#ifndef __MINGW64_VERSION_MAJOR
+
+#define _TRUNCATE 0
+#define STRUNCATE 80
+
+inline void MemoryFence() {
+  int barrier = 0;
+  __asm__ __volatile__("xchgl %%eax,%0 ":"=r" (barrier));
+}
+
+#endif  // __MINGW64_VERSION_MAJOR
+
+
+int localtime_s(tm* out_tm, const time_t* time) {
+  tm* posix_local_time_struct = localtime_r(time, out_tm);
+  if (posix_local_time_struct == nullptr) return 1;
+  return 0;
+}
+
+
+int fopen_s(FILE** pFile, const char* filename, const char* mode) {
+  *pFile = fopen(filename, mode);
+  return *pFile != nullptr ? 0 : 1;
+}
+
+int _vsnprintf_s(char* buffer, size_t sizeOfBuffer, size_t count,
+                 const char* format, va_list argptr) {
+  DCHECK(count == _TRUNCATE);
+  return _vsnprintf(buffer, sizeOfBuffer, format, argptr);
+}
+
+
+int strncpy_s(char* dest, size_t dest_size, const char* source, size_t count) {
+  CHECK(source != nullptr);
+  CHECK(dest != nullptr);
+  CHECK_GT(dest_size, 0);
+
+  if (count == _TRUNCATE) {
+    while (dest_size > 0 && *source != 0) {
+      *(dest++) = *(source++);
+      --dest_size;
+    }
+    if (dest_size == 0) {
+      *(dest - 1) = 0;
+      return STRUNCATE;
+    }
+  } else {
+    while (dest_size > 0 && count > 0 && *source != 0) {
+      *(dest++) = *(source++);
+      --dest_size;
+      --count;
+    }
+  }
+  CHECK_GT(dest_size, 0);
+  *dest = 0;
+  return 0;
+}
+
+#endif  // __MINGW32__
+
+namespace v8 {
+namespace base {
+
+namespace {
+
+bool g_hard_abort = false;
+
+}  // namespace
+
+class WindowsTimezoneCache : public TimezoneCache {
+ public:
+  WindowsTimezoneCache() : initialized_(false) {}
+
+  ~WindowsTimezoneCache() override {}
+
+  void Clear() override { initialized_ = false; }
+
+  const char* LocalTimezone(double time) override;
+
+  double LocalTimeOffset(double time, bool is_utc) override;
+
+  double DaylightSavingsOffset(double time) override;
+
+  // Initialize timezone information. The timezone information is obtained from
+  // windows. If we cannot get the timezone information we fall back to CET.
+  void InitializeIfNeeded() {
+    // Just return if timezone information has already been initialized.
+    if (initialized_) return;
+
+    // Initialize POSIX time zone data.
+    _tzset();
+    // Obtain timezone information from operating system.
+    memset(&tzinfo_, 0, sizeof(tzinfo_));
+    if (GetTimeZoneInformation(&tzinfo_) == TIME_ZONE_ID_INVALID) {
+      // If we cannot get timezone information we fall back to CET.
+      tzinfo_.Bias = -60;
+      tzinfo_.StandardDate.wMonth = 10;
+      tzinfo_.StandardDate.wDay = 5;
+      tzinfo_.StandardDate.wHour = 3;
+      tzinfo_.StandardBias = 0;
+      tzinfo_.DaylightDate.wMonth = 3;
+      tzinfo_.DaylightDate.wDay = 5;
+      tzinfo_.DaylightDate.wHour = 2;
+      tzinfo_.DaylightBias = -60;
+    }
+
+    // Make standard and DST timezone names.
+    WideCharToMultiByte(CP_UTF8, 0, tzinfo_.StandardName, -1, std_tz_name_,
+                        kTzNameSize, nullptr, nullptr);
+    std_tz_name_[kTzNameSize - 1] = '\0';
+    WideCharToMultiByte(CP_UTF8, 0, tzinfo_.DaylightName, -1, dst_tz_name_,
+                        kTzNameSize, nullptr, nullptr);
+    dst_tz_name_[kTzNameSize - 1] = '\0';
+
+    // If OS returned empty string or resource id (like "@tzres.dll,-211")
+    // simply guess the name from the UTC bias of the timezone.
+    // To properly resolve the resource identifier requires a library load,
+    // which is not possible in a sandbox.
+    if (std_tz_name_[0] == '\0' || std_tz_name_[0] == '@') {
+      OS::SNPrintF(std_tz_name_, kTzNameSize - 1,
+                   "%s Standard Time",
+                   GuessTimezoneNameFromBias(tzinfo_.Bias));
+    }
+    if (dst_tz_name_[0] == '\0' || dst_tz_name_[0] == '@') {
+      OS::SNPrintF(dst_tz_name_, kTzNameSize - 1,
+                   "%s Daylight Time",
+                   GuessTimezoneNameFromBias(tzinfo_.Bias));
+    }
+    // Timezone information initialized.
+    initialized_ = true;
+  }
+
+  // Guess the name of the timezone from the bias.
+  // The guess is very biased towards the northern hemisphere.
+  const char* GuessTimezoneNameFromBias(int bias) {
+    static const int kHour = 60;
+    switch (-bias) {
+      case -9*kHour: return "Alaska";
+      case -8*kHour: return "Pacific";
+      case -7*kHour: return "Mountain";
+      case -6*kHour: return "Central";
+      case -5*kHour: return "Eastern";
+      case -4*kHour: return "Atlantic";
+      case  0*kHour: return "GMT";
+      case +1*kHour: return "Central Europe";
+      case +2*kHour: return "Eastern Europe";
+      case +3*kHour: return "Russia";
+      case +5*kHour + 30: return "India";
+      case +8*kHour: return "China";
+      case +9*kHour: return "Japan";
+      case +12*kHour: return "New Zealand";
+      default: return "Local";
+    }
+  }
+
+
+ private:
+  static const int kTzNameSize = 128;
+  bool initialized_;
+  char std_tz_name_[kTzNameSize];
+  char dst_tz_name_[kTzNameSize];
+  TIME_ZONE_INFORMATION tzinfo_;
+  friend class Win32Time;
+};
+
+
+// ----------------------------------------------------------------------------
+// The Time class represents time on win32. A timestamp is represented as
+// a 64-bit integer in 100 nanoseconds since January 1, 1601 (UTC). JavaScript
+// timestamps are represented as a doubles in milliseconds since 00:00:00 UTC,
+// January 1, 1970.
+
+class Win32Time {
+ public:
+  // Constructors.
+  Win32Time();
+  explicit Win32Time(double jstime);
+  Win32Time(int year, int mon, int day, int hour, int min, int sec);
+
+  // Convert timestamp to JavaScript representation.
+  double ToJSTime();
+
+  // Set timestamp to current time.
+  void SetToCurrentTime();
+
+  // Returns the local timezone offset in milliseconds east of UTC. This is
+  // the number of milliseconds you must add to UTC to get local time, i.e.
+  // LocalOffset(CET) = 3600000 and LocalOffset(PST) = -28800000. This
+  // routine also takes into account whether daylight saving is effect
+  // at the time.
+  int64_t LocalOffset(WindowsTimezoneCache* cache);
+
+  // Returns the daylight savings time offset for the time in milliseconds.
+  int64_t DaylightSavingsOffset(WindowsTimezoneCache* cache);
+
+  // Returns a string identifying the current timezone for the
+  // timestamp taking into account daylight saving.
+  char* LocalTimezone(WindowsTimezoneCache* cache);
+
+ private:
+  // Constants for time conversion.
+  static const int64_t kTimeEpoc = 116444736000000000LL;
+  static const int64_t kTimeScaler = 10000;
+  static const int64_t kMsPerMinute = 60000;
+
+  // Constants for timezone information.
+  static const bool kShortTzNames = false;
+
+  // Return whether or not daylight savings time is in effect at this time.
+  bool InDST(WindowsTimezoneCache* cache);
+
+  // Accessor for FILETIME representation.
+  FILETIME& ft() { return time_.ft_; }
+
+  // Accessor for integer representation.
+  int64_t& t() { return time_.t_; }
+
+  // Although win32 uses 64-bit integers for representing timestamps,
+  // these are packed into a FILETIME structure. The FILETIME structure
+  // is just a struct representing a 64-bit integer. The TimeStamp union
+  // allows access to both a FILETIME and an integer representation of
+  // the timestamp.
+  union TimeStamp {
+    FILETIME ft_;
+    int64_t t_;
+  };
+
+  TimeStamp time_;
+};
+
+
+// Initialize timestamp to start of epoc.
+Win32Time::Win32Time() {
+  t() = 0;
+}
+
+
+// Initialize timestamp from a JavaScript timestamp.
+Win32Time::Win32Time(double jstime) {
+  t() = static_cast<int64_t>(jstime) * kTimeScaler + kTimeEpoc;
+}
+
+
+// Initialize timestamp from date/time components.
+Win32Time::Win32Time(int year, int mon, int day, int hour, int min, int sec) {
+  SYSTEMTIME st;
+  st.wYear = year;
+  st.wMonth = mon;
+  st.wDay = day;
+  st.wHour = hour;
+  st.wMinute = min;
+  st.wSecond = sec;
+  st.wMilliseconds = 0;
+  SystemTimeToFileTime(&st, &ft());
+}
+
+
+// Convert timestamp to JavaScript timestamp.
+double Win32Time::ToJSTime() {
+  return static_cast<double>((t() - kTimeEpoc) / kTimeScaler);
+}
+
+
+// Set timestamp to current time.
+void Win32Time::SetToCurrentTime() {
+  // The default GetSystemTimeAsFileTime has a ~15.5ms resolution.
+  // Because we're fast, we like fast timers which have at least a
+  // 1ms resolution.
+  //
+  // timeGetTime() provides 1ms granularity when combined with
+  // timeBeginPeriod().  If the host application for v8 wants fast
+  // timers, it can use timeBeginPeriod to increase the resolution.
+  //
+  // Using timeGetTime() has a drawback because it is a 32bit value
+  // and hence rolls-over every ~49days.
+  //
+  // To use the clock, we use GetSystemTimeAsFileTime as our base;
+  // and then use timeGetTime to extrapolate current time from the
+  // start time.  To deal with rollovers, we resync the clock
+  // any time when more than kMaxClockElapsedTime has passed or
+  // whenever timeGetTime creates a rollover.
+
+  static bool initialized = false;
+  static TimeStamp init_time;
+  static DWORD init_ticks;
+  static const int64_t kHundredNanosecondsPerSecond = 10000000;
+  static const int64_t kMaxClockElapsedTime =
+      60*kHundredNanosecondsPerSecond;  // 1 minute
+
+  // If we are uninitialized, we need to resync the clock.
+  bool needs_resync = !initialized;
+
+  // Get the current time.
+  TimeStamp time_now;
+  GetSystemTimeAsFileTime(&time_now.ft_);
+  DWORD ticks_now = timeGetTime();
+
+  // Check if we need to resync due to clock rollover.
+  needs_resync |= ticks_now < init_ticks;
+
+  // Check if we need to resync due to elapsed time.
+  needs_resync |= (time_now.t_ - init_time.t_) > kMaxClockElapsedTime;
+
+  // Check if we need to resync due to backwards time change.
+  needs_resync |= time_now.t_ < init_time.t_;
+
+  // Resync the clock if necessary.
+  if (needs_resync) {
+    GetSystemTimeAsFileTime(&init_time.ft_);
+    init_ticks = ticks_now = timeGetTime();
+    initialized = true;
+  }
+
+  // Finally, compute the actual time.  Why is this so hard.
+  DWORD elapsed = ticks_now - init_ticks;
+  this->time_.t_ = init_time.t_ + (static_cast<int64_t>(elapsed) * 10000);
+}
+
+
+// Return the local timezone offset in milliseconds east of UTC. This
+// takes into account whether daylight saving is in effect at the time.
+// Only times in the 32-bit Unix range may be passed to this function.
+// Also, adding the time-zone offset to the input must not overflow.
+// The function EquivalentTime() in date.js guarantees this.
+int64_t Win32Time::LocalOffset(WindowsTimezoneCache* cache) {
+  cache->InitializeIfNeeded();
+
+  Win32Time rounded_to_second(*this);
+  rounded_to_second.t() =
+      rounded_to_second.t() / 1000 / kTimeScaler * 1000 * kTimeScaler;
+  // Convert to local time using POSIX localtime function.
+  // Windows XP Service Pack 3 made SystemTimeToTzSpecificLocalTime()
+  // very slow.  Other browsers use localtime().
+
+  // Convert from JavaScript milliseconds past 1/1/1970 0:00:00 to
+  // POSIX seconds past 1/1/1970 0:00:00.
+  double unchecked_posix_time = rounded_to_second.ToJSTime() / 1000;
+  if (unchecked_posix_time > INT_MAX || unchecked_posix_time < 0) {
+    return 0;
+  }
+  // Because _USE_32BIT_TIME_T is defined, time_t is a 32-bit int.
+  time_t posix_time = static_cast<time_t>(unchecked_posix_time);
+
+  // Convert to local time, as struct with fields for day, hour, year, etc.
+  tm posix_local_time_struct;
+  if (localtime_s(&posix_local_time_struct, &posix_time)) return 0;
+
+  if (posix_local_time_struct.tm_isdst > 0) {
+    return (cache->tzinfo_.Bias + cache->tzinfo_.DaylightBias) * -kMsPerMinute;
+  } else if (posix_local_time_struct.tm_isdst == 0) {
+    return (cache->tzinfo_.Bias + cache->tzinfo_.StandardBias) * -kMsPerMinute;
+  } else {
+    return cache->tzinfo_.Bias * -kMsPerMinute;
+  }
+}
+
+
+// Return whether or not daylight savings time is in effect at this time.
+bool Win32Time::InDST(WindowsTimezoneCache* cache) {
+  cache->InitializeIfNeeded();
+
+  // Determine if DST is in effect at the specified time.
+  bool in_dst = false;
+  if (cache->tzinfo_.StandardDate.wMonth != 0 ||
+      cache->tzinfo_.DaylightDate.wMonth != 0) {
+    // Get the local timezone offset for the timestamp in milliseconds.
+    int64_t offset = LocalOffset(cache);
+
+    // Compute the offset for DST. The bias parameters in the timezone info
+    // are specified in minutes. These must be converted to milliseconds.
+    int64_t dstofs =
+        -(cache->tzinfo_.Bias + cache->tzinfo_.DaylightBias) * kMsPerMinute;
+
+    // If the local time offset equals the timezone bias plus the daylight
+    // bias then DST is in effect.
+    in_dst = offset == dstofs;
+  }
+
+  return in_dst;
+}
+
+
+// Return the daylight savings time offset for this time.
+int64_t Win32Time::DaylightSavingsOffset(WindowsTimezoneCache* cache) {
+  return InDST(cache) ? 60 * kMsPerMinute : 0;
+}
+
+
+// Returns a string identifying the current timezone for the
+// timestamp taking into account daylight saving.
+char* Win32Time::LocalTimezone(WindowsTimezoneCache* cache) {
+  // Return the standard or DST time zone name based on whether daylight
+  // saving is in effect at the given time.
+  return InDST(cache) ? cache->dst_tz_name_ : cache->std_tz_name_;
+}
+
+
+// Returns the accumulated user time for thread.
+int OS::GetUserTime(uint32_t* secs,  uint32_t* usecs) {
+  FILETIME dummy;
+  uint64_t usertime;
+
+  // Get the amount of time that the thread has executed in user mode.
+  if (!GetThreadTimes(GetCurrentThread(), &dummy, &dummy, &dummy,
+                      reinterpret_cast<FILETIME*>(&usertime))) return -1;
+
+  // Adjust the resolution to micro-seconds.
+  usertime /= 10;
+
+  // Convert to seconds and microseconds
+  *secs = static_cast<uint32_t>(usertime / 1000000);
+  *usecs = static_cast<uint32_t>(usertime % 1000000);
+  return 0;
+}
+
+
+// Returns current time as the number of milliseconds since
+// 00:00:00 UTC, January 1, 1970.
+double OS::TimeCurrentMillis() {
+  return Time::Now().ToJsTime();
+}
+
+// Returns a string identifying the current timezone taking into
+// account daylight saving.
+const char* WindowsTimezoneCache::LocalTimezone(double time) {
+  return Win32Time(time).LocalTimezone(this);
+}
+
+// Returns the local time offset in milliseconds east of UTC without
+// taking daylight savings time into account.
+double WindowsTimezoneCache::LocalTimeOffset(double time_ms, bool is_utc) {
+  // Ignore is_utc and time_ms for now. That way, the behavior wouldn't
+  // change with icu_timezone_data disabled.
+  // Use current time, rounded to the millisecond.
+  Win32Time t(OS::TimeCurrentMillis());
+  // Time::LocalOffset inlcudes any daylight savings offset, so subtract it.
+  return static_cast<double>(t.LocalOffset(this) -
+                             t.DaylightSavingsOffset(this));
+}
+
+// Returns the daylight savings offset in milliseconds for the given
+// time.
+double WindowsTimezoneCache::DaylightSavingsOffset(double time) {
+  int64_t offset = Win32Time(time).DaylightSavingsOffset(this);
+  return static_cast<double>(offset);
+}
+
+TimezoneCache* OS::CreateTimezoneCache() { return new WindowsTimezoneCache(); }
+
+int OS::GetLastError() {
+  return ::GetLastError();
+}
+
+
+int OS::GetCurrentProcessId() {
+  return static_cast<int>(::GetCurrentProcessId());
+}
+
+
+int OS::GetCurrentThreadId() {
+  return static_cast<int>(::GetCurrentThreadId());
+}
+
+void OS::ExitProcess(int exit_code) {
+  // Use TerminateProcess avoid races between isolate threads and
+  // static destructors.
+  fflush(stdout);
+  fflush(stderr);
+  TerminateProcess(GetCurrentProcess(), exit_code);
+}
+
+// ----------------------------------------------------------------------------
+// Win32 console output.
+//
+// If a Win32 application is linked as a console application it has a normal
+// standard output and standard error. In this case normal printf works fine
+// for output. However, if the application is linked as a GUI application,
+// the process doesn't have a console, and therefore (debugging) output is lost.
+// This is the case if we are embedded in a windows program (like a browser).
+// In order to be able to get debug output in this case the the debugging
+// facility using OutputDebugString. This output goes to the active debugger
+// for the process (if any). Else the output can be monitored using DBMON.EXE.
+
+enum OutputMode {
+  UNKNOWN,  // Output method has not yet been determined.
+  CONSOLE,  // Output is written to stdout.
+  ODS       // Output is written to debug facility.
+};
+
+static OutputMode output_mode = UNKNOWN;  // Current output mode.
+
+
+// Determine if the process has a console for output.
+static bool HasConsole() {
+  // Only check the first time. Eventual race conditions are not a problem,
+  // because all threads will eventually determine the same mode.
+  if (output_mode == UNKNOWN) {
+    // We cannot just check that the standard output is attached to a console
+    // because this would fail if output is redirected to a file. Therefore we
+    // say that a process does not have an output console if either the
+    // standard output handle is invalid or its file type is unknown.
+    if (GetStdHandle(STD_OUTPUT_HANDLE) != INVALID_HANDLE_VALUE &&
+        GetFileType(GetStdHandle(STD_OUTPUT_HANDLE)) != FILE_TYPE_UNKNOWN)
+      output_mode = CONSOLE;
+    else
+      output_mode = ODS;
+  }
+  return output_mode == CONSOLE;
+}
+
+
+static void VPrintHelper(FILE* stream, const char* format, va_list args) {
+  if ((stream == stdout || stream == stderr) && !HasConsole()) {
+    // It is important to use safe print here in order to avoid
+    // overflowing the buffer. We might truncate the output, but this
+    // does not crash.
+    char buffer[4096];
+    OS::VSNPrintF(buffer, sizeof(buffer), format, args);
+    OutputDebugStringA(buffer);
+  } else {
+    vfprintf(stream, format, args);
+  }
+}
+
+
+FILE* OS::FOpen(const char* path, const char* mode) {
+  FILE* result;
+  if (fopen_s(&result, path, mode) == 0) {
+    return result;
+  } else {
+    return nullptr;
+  }
+}
+
+
+bool OS::Remove(const char* path) {
+  return (DeleteFileA(path) != 0);
+}
+
+char OS::DirectorySeparator() { return '\\'; }
+
+bool OS::isDirectorySeparator(const char ch) {
+  return ch == '/' || ch == '\\';
+}
+
+
+FILE* OS::OpenTemporaryFile() {
+  // tmpfile_s tries to use the root dir, don't use it.
+  char tempPathBuffer[MAX_PATH];
+  DWORD path_result = 0;
+  path_result = GetTempPathA(MAX_PATH, tempPathBuffer);
+  if (path_result > MAX_PATH || path_result == 0) return nullptr;
+  UINT name_result = 0;
+  char tempNameBuffer[MAX_PATH];
+  name_result = GetTempFileNameA(tempPathBuffer, "", 0, tempNameBuffer);
+  if (name_result == 0) return nullptr;
+  FILE* result = FOpen(tempNameBuffer, "w+");  // Same mode as tmpfile uses.
+  if (result != nullptr) {
+    Remove(tempNameBuffer);  // Delete on close.
+  }
+  return result;
+}
+
+
+// Open log file in binary mode to avoid /n -> /r/n conversion.
+const char* const OS::LogFileOpenMode = "wb";
+
+
+// Print (debug) message to console.
+void OS::Print(const char* format, ...) {
+  va_list args;
+  va_start(args, format);
+  VPrint(format, args);
+  va_end(args);
+}
+
+
+void OS::VPrint(const char* format, va_list args) {
+  VPrintHelper(stdout, format, args);
+}
+
+
+void OS::FPrint(FILE* out, const char* format, ...) {
+  va_list args;
+  va_start(args, format);
+  VFPrint(out, format, args);
+  va_end(args);
+}
+
+
+void OS::VFPrint(FILE* out, const char* format, va_list args) {
+  VPrintHelper(out, format, args);
+}
+
+
+// Print error message to console.
+void OS::PrintError(const char* format, ...) {
+  va_list args;
+  va_start(args, format);
+  VPrintError(format, args);
+  va_end(args);
+}
+
+
+void OS::VPrintError(const char* format, va_list args) {
+  VPrintHelper(stderr, format, args);
+}
+
+
+int OS::SNPrintF(char* str, int length, const char* format, ...) {
+  va_list args;
+  va_start(args, format);
+  int result = VSNPrintF(str, length, format, args);
+  va_end(args);
+  return result;
+}
+
+
+int OS::VSNPrintF(char* str, int length, const char* format, va_list args) {
+  int n = _vsnprintf_s(str, length, _TRUNCATE, format, args);
+  // Make sure to zero-terminate the string if the output was
+  // truncated or if there was an error.
+  if (n < 0 || n >= length) {
+    if (length > 0)
+      str[length - 1] = '\0';
+    return -1;
+  } else {
+    return n;
+  }
+}
+
+
+char* OS::StrChr(char* str, int c) {
+  return const_cast<char*>(strchr(str, c));
+}
+
+
+void OS::StrNCpy(char* dest, int length, const char* src, size_t n) {
+  // Use _TRUNCATE or strncpy_s crashes (by design) if buffer is too small.
+  size_t buffer_size = static_cast<size_t>(length);
+  if (n + 1 > buffer_size)  // count for trailing '\0'
+    n = _TRUNCATE;
+  int result = strncpy_s(dest, length, src, n);
+  USE(result);
+  DCHECK(result == 0 || (n == _TRUNCATE && result == STRUNCATE));
+}
+
+
+#undef _TRUNCATE
+#undef STRUNCATE
+
+static LazyInstance<RandomNumberGenerator>::type
+    platform_random_number_generator = LAZY_INSTANCE_INITIALIZER;
+static LazyMutex rng_mutex = LAZY_MUTEX_INITIALIZER;
+
+void OS::Initialize(bool hard_abort, const char* const gc_fake_mmap) {
+  g_hard_abort = hard_abort;
+}
+
+// static
+size_t OS::AllocatePageSize() {
+  static size_t allocate_alignment = 0;
+  if (allocate_alignment == 0) {
+    SYSTEM_INFO info;
+    GetSystemInfo(&info);
+    allocate_alignment = info.dwAllocationGranularity;
+  }
+  return allocate_alignment;
+}
+
+// static
+size_t OS::CommitPageSize() {
+  static size_t page_size = 0;
+  if (page_size == 0) {
+    SYSTEM_INFO info;
+    GetSystemInfo(&info);
+    page_size = info.dwPageSize;
+    DCHECK_EQ(4096, page_size);
+  }
+  return page_size;
+}
+
+// static
+void OS::SetRandomMmapSeed(int64_t seed) {
+  if (seed) {
+    LockGuard<Mutex> guard(rng_mutex.Pointer());
+    platform_random_number_generator.Pointer()->SetSeed(seed);
+  }
+}
+
+// static
+void* OS::GetRandomMmapAddr() {
+// The address range used to randomize RWX allocations in OS::Allocate
+// Try not to map pages into the default range that windows loads DLLs
+// Use a multiple of 64k to prevent committing unused memory.
+// Note: This does not guarantee RWX regions will be within the
+// range kAllocationRandomAddressMin to kAllocationRandomAddressMax
+#ifdef V8_HOST_ARCH_64_BIT
+  static const uintptr_t kAllocationRandomAddressMin = 0x0000000080000000;
+  static const uintptr_t kAllocationRandomAddressMax = 0x000003FFFFFF0000;
+#else
+  static const uintptr_t kAllocationRandomAddressMin = 0x04000000;
+  static const uintptr_t kAllocationRandomAddressMax = 0x3FFF0000;
+#endif
+  uintptr_t address;
+  {
+    LockGuard<Mutex> guard(rng_mutex.Pointer());
+    platform_random_number_generator.Pointer()->NextBytes(&address,
+                                                          sizeof(address));
+  }
+  address <<= kPageSizeBits;
+  address += kAllocationRandomAddressMin;
+  address &= kAllocationRandomAddressMax;
+  return reinterpret_cast<void*>(address);
+}
+
+namespace {
+
+DWORD GetProtectionFromMemoryPermission(OS::MemoryPermission access) {
+  switch (access) {
+    case OS::MemoryPermission::kNoAccess:
+      return PAGE_NOACCESS;
+    case OS::MemoryPermission::kRead:
+      return PAGE_READONLY;
+    case OS::MemoryPermission::kReadWrite:
+      return PAGE_READWRITE;
+    case OS::MemoryPermission::kReadWriteExecute:
+      if (IsWindows10OrGreater())
+        return PAGE_EXECUTE_READWRITE | PAGE_TARGETS_INVALID;
+      return PAGE_EXECUTE_READWRITE;
+    case OS::MemoryPermission::kReadExecute:
+      if (IsWindows10OrGreater())
+        return PAGE_EXECUTE_READ | PAGE_TARGETS_INVALID;
+      return PAGE_EXECUTE_READ;
+  }
+  UNREACHABLE();
+}
+
+uint8_t* RandomizedVirtualAlloc(size_t size, DWORD flags, DWORD protect,
+                                void* hint) {
+  LPVOID base = nullptr;
+  static BOOL use_aslr = -1;
+#ifdef V8_HOST_ARCH_32_BIT
+  // Don't bother randomizing on 32-bit hosts, because they lack the room and
+  // don't have viable ASLR anyway.
+  if (use_aslr == -1 && !IsWow64Process(GetCurrentProcess(), &use_aslr))
+    use_aslr = FALSE;
+#else
+  use_aslr = TRUE;
+#endif
+
+  if (use_aslr && protect != PAGE_READWRITE) {
+    // For executable or reserved pages try to randomize the allocation address.
+    base = VirtualAlloc(hint, size, flags, protect);
+  }
+
+  // On failure, let the OS find an address to use.
+  if (base == nullptr) {
+    base = VirtualAlloc(nullptr, size, flags, protect);
+  }
+  return reinterpret_cast<uint8_t*>(base);
+}
+
+}  // namespace
+
+// static
+void* OS::Allocate(void* address, size_t size, size_t alignment,
+                   MemoryPermission access) {
+  size_t page_size = AllocatePageSize();
+  DCHECK_EQ(0, size % page_size);
+  DCHECK_EQ(0, alignment % page_size);
+  DCHECK_LE(page_size, alignment);
+  address = AlignedAddress(address, alignment);
+
+  DWORD flags = (access == OS::MemoryPermission::kNoAccess)
+                    ? MEM_RESERVE
+                    : MEM_RESERVE | MEM_COMMIT;
+  DWORD protect = GetProtectionFromMemoryPermission(access);
+
+  // First, try an exact size aligned allocation.
+  uint8_t* base = RandomizedVirtualAlloc(size, flags, protect, address);
+  if (base == nullptr) return nullptr;  // Can't allocate, we're OOM.
+
+  // If address is suitably aligned, we're done.
+  uint8_t* aligned_base = RoundUp(base, alignment);
+  if (base == aligned_base) return reinterpret_cast<void*>(base);
+
+  // Otherwise, free it and try a larger allocation.
+  CHECK(Free(base, size));
+
+  // Clear the hint. It's unlikely we can allocate at this address.
+  address = nullptr;
+
+  // Add the maximum misalignment so we are guaranteed an aligned base address
+  // in the allocated region.
+  size_t padded_size = size + (alignment - page_size);
+  const int kMaxAttempts = 3;
+  aligned_base = nullptr;
+  for (int i = 0; i < kMaxAttempts; ++i) {
+    base = RandomizedVirtualAlloc(padded_size, flags, protect, address);
+    if (base == nullptr) return nullptr;  // Can't allocate, we're OOM.
+
+    // Try to trim the allocation by freeing the padded allocation and then
+    // calling VirtualAlloc at the aligned base.
+    CHECK(Free(base, padded_size));
+    aligned_base = RoundUp(base, alignment);
+    base = reinterpret_cast<uint8_t*>(
+        VirtualAlloc(aligned_base, size, flags, protect));
+    // We might not get the reduced allocation due to a race. In that case,
+    // base will be nullptr.
+    if (base != nullptr) break;
+  }
+  DCHECK_IMPLIES(base, base == aligned_base);
+  return reinterpret_cast<void*>(base);
+}
+
+// static
+bool OS::Free(void* address, const size_t size) {
+  DCHECK_EQ(0, reinterpret_cast<uintptr_t>(address) % AllocatePageSize());
+  DCHECK_EQ(0, size % AllocatePageSize());
+  USE(size);
+  return VirtualFree(address, 0, MEM_RELEASE) != 0;
+}
+
+// static
+bool OS::Release(void* address, size_t size) {
+  DCHECK_EQ(0, reinterpret_cast<uintptr_t>(address) % CommitPageSize());
+  DCHECK_EQ(0, size % CommitPageSize());
+  return VirtualFree(address, size, MEM_DECOMMIT) != 0;
+}
+
+// static
+bool OS::SetPermissions(void* address, size_t size, MemoryPermission access) {
+  DCHECK_EQ(0, reinterpret_cast<uintptr_t>(address) % CommitPageSize());
+  DCHECK_EQ(0, size % CommitPageSize());
+  if (access == MemoryPermission::kNoAccess) {
+    return VirtualFree(address, size, MEM_DECOMMIT) != 0;
+  }
+  DWORD protect = GetProtectionFromMemoryPermission(access);
+  return VirtualAlloc(address, size, MEM_COMMIT, protect) != nullptr;
+}
+
+// static
+bool OS::HasLazyCommits() {
+  // TODO(alph): implement for the platform.
+  return false;
+}
+
+void OS::Sleep(TimeDelta interval) {
+  ::Sleep(static_cast<DWORD>(interval.InMilliseconds()));
+}
+
+
+void OS::Abort() {
+  // Before aborting, make sure to flush output buffers.
+  fflush(stdout);
+  fflush(stderr);
+
+  if (g_hard_abort) {
+    V8_IMMEDIATE_CRASH();
+  }
+  // Make the MSVCRT do a silent abort.
+  raise(SIGABRT);
+
+  // Make sure function doesn't return.
+  abort();
+}
+
+
+void OS::DebugBreak() {
+#if V8_CC_MSVC
+  // To avoid Visual Studio runtime support the following code can be used
+  // instead
+  // __asm { int 3 }
+  __debugbreak();
+#else
+  ::DebugBreak();
+#endif
+}
+
+
+class Win32MemoryMappedFile final : public OS::MemoryMappedFile {
+ public:
+  Win32MemoryMappedFile(HANDLE file, HANDLE file_mapping, void* memory,
+                        size_t size)
+      : file_(file),
+        file_mapping_(file_mapping),
+        memory_(memory),
+        size_(size) {}
+  ~Win32MemoryMappedFile() final;
+  void* memory() const final { return memory_; }
+  size_t size() const final { return size_; }
+
+ private:
+  HANDLE const file_;
+  HANDLE const file_mapping_;
+  void* const memory_;
+  size_t const size_;
+};
+
+
+// static
+OS::MemoryMappedFile* OS::MemoryMappedFile::open(const char* name) {
+  // Open a physical file
+  HANDLE file = CreateFileA(name, GENERIC_READ | GENERIC_WRITE,
+                            FILE_SHARE_READ | FILE_SHARE_WRITE, nullptr,
+                            OPEN_EXISTING, 0, nullptr);
+  if (file == INVALID_HANDLE_VALUE) return nullptr;
+
+  DWORD size = GetFileSize(file, nullptr);
+
+  // Create a file mapping for the physical file
+  HANDLE file_mapping =
+      CreateFileMapping(file, nullptr, PAGE_READWRITE, 0, size, nullptr);
+  if (file_mapping == nullptr) return nullptr;
+
+  // Map a view of the file into memory
+  void* memory = MapViewOfFile(file_mapping, FILE_MAP_ALL_ACCESS, 0, 0, size);
+  return new Win32MemoryMappedFile(file, file_mapping, memory, size);
+}
+
+
+// static
+OS::MemoryMappedFile* OS::MemoryMappedFile::create(const char* name,
+                                                   size_t size, void* initial) {
+  // Open a physical file
+  HANDLE file = CreateFileA(name, GENERIC_READ | GENERIC_WRITE,
+                            FILE_SHARE_READ | FILE_SHARE_WRITE, nullptr,
+                            OPEN_ALWAYS, 0, nullptr);
+  if (file == nullptr) return nullptr;
+  // Create a file mapping for the physical file
+  HANDLE file_mapping = CreateFileMapping(file, nullptr, PAGE_READWRITE, 0,
+                                          static_cast<DWORD>(size), nullptr);
+  if (file_mapping == nullptr) return nullptr;
+  // Map a view of the file into memory
+  void* memory = MapViewOfFile(file_mapping, FILE_MAP_ALL_ACCESS, 0, 0, size);
+  if (memory) memmove(memory, initial, size);
+  return new Win32MemoryMappedFile(file, file_mapping, memory, size);
+}
+
+
+Win32MemoryMappedFile::~Win32MemoryMappedFile() {
+  if (memory_) UnmapViewOfFile(memory_);
+  CloseHandle(file_mapping_);
+  CloseHandle(file_);
+}
+
+
+// The following code loads functions defined in DbhHelp.h and TlHelp32.h
+// dynamically. This is to avoid being depending on dbghelp.dll and
+// tlhelp32.dll when running (the functions in tlhelp32.dll have been moved to
+// kernel32.dll at some point so loading functions defines in TlHelp32.h
+// dynamically might not be necessary any more - for some versions of Windows?).
+
+// Function pointers to functions dynamically loaded from dbghelp.dll.
+#define DBGHELP_FUNCTION_LIST(V)  \
+  V(SymInitialize)                \
+  V(SymGetOptions)                \
+  V(SymSetOptions)                \
+  V(SymGetSearchPath)             \
+  V(SymLoadModule64)              \
+  V(StackWalk64)                  \
+  V(SymGetSymFromAddr64)          \
+  V(SymGetLineFromAddr64)         \
+  V(SymFunctionTableAccess64)     \
+  V(SymGetModuleBase64)
+
+// Function pointers to functions dynamically loaded from dbghelp.dll.
+#define TLHELP32_FUNCTION_LIST(V)  \
+  V(CreateToolhelp32Snapshot)      \
+  V(Module32FirstW)                \
+  V(Module32NextW)
+
+// Define the decoration to use for the type and variable name used for
+// dynamically loaded DLL function..
+#define DLL_FUNC_TYPE(name) _##name##_
+#define DLL_FUNC_VAR(name) _##name
+
+// Define the type for each dynamically loaded DLL function. The function
+// definitions are copied from DbgHelp.h and TlHelp32.h. The IN and VOID macros
+// from the Windows include files are redefined here to have the function
+// definitions to be as close to the ones in the original .h files as possible.
+#ifndef IN
+#define IN
+#endif
+#ifndef VOID
+#define VOID void
+#endif
+
+// DbgHelp isn't supported on MinGW yet
+#ifndef __MINGW32__
+// DbgHelp.h functions.
+typedef BOOL (__stdcall *DLL_FUNC_TYPE(SymInitialize))(IN HANDLE hProcess,
+                                                       IN PSTR UserSearchPath,
+                                                       IN BOOL fInvadeProcess);
+typedef DWORD (__stdcall *DLL_FUNC_TYPE(SymGetOptions))(VOID);
+typedef DWORD (__stdcall *DLL_FUNC_TYPE(SymSetOptions))(IN DWORD SymOptions);
+typedef BOOL (__stdcall *DLL_FUNC_TYPE(SymGetSearchPath))(
+    IN HANDLE hProcess,
+    OUT PSTR SearchPath,
+    IN DWORD SearchPathLength);
+typedef DWORD64 (__stdcall *DLL_FUNC_TYPE(SymLoadModule64))(
+    IN HANDLE hProcess,
+    IN HANDLE hFile,
+    IN PSTR ImageName,
+    IN PSTR ModuleName,
+    IN DWORD64 BaseOfDll,
+    IN DWORD SizeOfDll);
+typedef BOOL (__stdcall *DLL_FUNC_TYPE(StackWalk64))(
+    DWORD MachineType,
+    HANDLE hProcess,
+    HANDLE hThread,
+    LPSTACKFRAME64 StackFrame,
+    PVOID ContextRecord,
+    PREAD_PROCESS_MEMORY_ROUTINE64 ReadMemoryRoutine,
+    PFUNCTION_TABLE_ACCESS_ROUTINE64 FunctionTableAccessRoutine,
+    PGET_MODULE_BASE_ROUTINE64 GetModuleBaseRoutine,
+    PTRANSLATE_ADDRESS_ROUTINE64 TranslateAddress);
+typedef BOOL (__stdcall *DLL_FUNC_TYPE(SymGetSymFromAddr64))(
+    IN HANDLE hProcess,
+    IN DWORD64 qwAddr,
+    OUT PDWORD64 pdwDisplacement,
+    OUT PIMAGEHLP_SYMBOL64 Symbol);
+typedef BOOL (__stdcall *DLL_FUNC_TYPE(SymGetLineFromAddr64))(
+    IN HANDLE hProcess,
+    IN DWORD64 qwAddr,
+    OUT PDWORD pdwDisplacement,
+    OUT PIMAGEHLP_LINE64 Line64);
+// DbgHelp.h typedefs. Implementation found in dbghelp.dll.
+typedef PVOID (__stdcall *DLL_FUNC_TYPE(SymFunctionTableAccess64))(
+    HANDLE hProcess,
+    DWORD64 AddrBase);  // DbgHelp.h typedef PFUNCTION_TABLE_ACCESS_ROUTINE64
+typedef DWORD64 (__stdcall *DLL_FUNC_TYPE(SymGetModuleBase64))(
+    HANDLE hProcess,
+    DWORD64 AddrBase);  // DbgHelp.h typedef PGET_MODULE_BASE_ROUTINE64
+
+// TlHelp32.h functions.
+typedef HANDLE (__stdcall *DLL_FUNC_TYPE(CreateToolhelp32Snapshot))(
+    DWORD dwFlags,
+    DWORD th32ProcessID);
+typedef BOOL (__stdcall *DLL_FUNC_TYPE(Module32FirstW))(HANDLE hSnapshot,
+                                                        LPMODULEENTRY32W lpme);
+typedef BOOL (__stdcall *DLL_FUNC_TYPE(Module32NextW))(HANDLE hSnapshot,
+                                                       LPMODULEENTRY32W lpme);
+
+#undef IN
+#undef VOID
+
+// Declare a variable for each dynamically loaded DLL function.
+#define DEF_DLL_FUNCTION(name) DLL_FUNC_TYPE(name) DLL_FUNC_VAR(name) = nullptr;
+DBGHELP_FUNCTION_LIST(DEF_DLL_FUNCTION)
+TLHELP32_FUNCTION_LIST(DEF_DLL_FUNCTION)
+#undef DEF_DLL_FUNCTION
+
+// Load the functions. This function has a lot of "ugly" macros in order to
+// keep down code duplication.
+
+static bool LoadDbgHelpAndTlHelp32() {
+  static bool dbghelp_loaded = false;
+
+  if (dbghelp_loaded) return true;
+
+  HMODULE module;
+
+  // Load functions from the dbghelp.dll module.
+  module = LoadLibrary(TEXT("dbghelp.dll"));
+  if (module == nullptr) {
+    return false;
+  }
+
+#define LOAD_DLL_FUNC(name)                                                 \
+  DLL_FUNC_VAR(name) =                                                      \
+      reinterpret_cast<DLL_FUNC_TYPE(name)>(GetProcAddress(module, #name));
+
+DBGHELP_FUNCTION_LIST(LOAD_DLL_FUNC)
+
+#undef LOAD_DLL_FUNC
+
+  // Load functions from the kernel32.dll module (the TlHelp32.h function used
+  // to be in tlhelp32.dll but are now moved to kernel32.dll).
+  module = LoadLibrary(TEXT("kernel32.dll"));
+  if (module == nullptr) {
+    return false;
+  }
+
+#define LOAD_DLL_FUNC(name)                                                 \
+  DLL_FUNC_VAR(name) =                                                      \
+      reinterpret_cast<DLL_FUNC_TYPE(name)>(GetProcAddress(module, #name));
+
+TLHELP32_FUNCTION_LIST(LOAD_DLL_FUNC)
+
+#undef LOAD_DLL_FUNC
+
+  // Check that all functions where loaded.
+bool result =
+#define DLL_FUNC_LOADED(name) (DLL_FUNC_VAR(name) != nullptr)&&
+
+    DBGHELP_FUNCTION_LIST(DLL_FUNC_LOADED)
+        TLHELP32_FUNCTION_LIST(DLL_FUNC_LOADED)
+
+#undef DLL_FUNC_LOADED
+            true;
+
+  dbghelp_loaded = result;
+  return result;
+  // NOTE: The modules are never unloaded and will stay around until the
+  // application is closed.
+}
+
+#undef DBGHELP_FUNCTION_LIST
+#undef TLHELP32_FUNCTION_LIST
+#undef DLL_FUNC_VAR
+#undef DLL_FUNC_TYPE
+
+
+// Load the symbols for generating stack traces.
+static std::vector<OS::SharedLibraryAddress> LoadSymbols(
+    HANDLE process_handle) {
+  static std::vector<OS::SharedLibraryAddress> result;
+
+  static bool symbols_loaded = false;
+
+  if (symbols_loaded) return result;
+
+  BOOL ok;
+
+  // Initialize the symbol engine.
+  ok = _SymInitialize(process_handle,  // hProcess
+                      nullptr,         // UserSearchPath
+                      false);          // fInvadeProcess
+  if (!ok) return result;
+
+  DWORD options = _SymGetOptions();
+  options |= SYMOPT_LOAD_LINES;
+  options |= SYMOPT_FAIL_CRITICAL_ERRORS;
+  options = _SymSetOptions(options);
+
+  char buf[OS::kStackWalkMaxNameLen] = {0};
+  ok = _SymGetSearchPath(process_handle, buf, OS::kStackWalkMaxNameLen);
+  if (!ok) {
+    int err = GetLastError();
+    OS::Print("%d\n", err);
+    return result;
+  }
+
+  HANDLE snapshot = _CreateToolhelp32Snapshot(
+      TH32CS_SNAPMODULE,       // dwFlags
+      GetCurrentProcessId());  // th32ProcessId
+  if (snapshot == INVALID_HANDLE_VALUE) return result;
+  MODULEENTRY32W module_entry;
+  module_entry.dwSize = sizeof(module_entry);  // Set the size of the structure.
+  BOOL cont = _Module32FirstW(snapshot, &module_entry);
+  while (cont) {
+    DWORD64 base;
+    // NOTE the SymLoadModule64 function has the peculiarity of accepting a
+    // both unicode and ASCII strings even though the parameter is PSTR.
+    base = _SymLoadModule64(
+        process_handle,                                       // hProcess
+        0,                                                    // hFile
+        reinterpret_cast<PSTR>(module_entry.szExePath),       // ImageName
+        reinterpret_cast<PSTR>(module_entry.szModule),        // ModuleName
+        reinterpret_cast<DWORD64>(module_entry.modBaseAddr),  // BaseOfDll
+        module_entry.modBaseSize);                            // SizeOfDll
+    if (base == 0) {
+      int err = GetLastError();
+      if (err != ERROR_MOD_NOT_FOUND &&
+          err != ERROR_INVALID_HANDLE) {
+        result.clear();
+        return result;
+      }
+    }
+    int lib_name_length = WideCharToMultiByte(
+        CP_UTF8, 0, module_entry.szExePath, -1, nullptr, 0, nullptr, nullptr);
+    std::string lib_name(lib_name_length, 0);
+    WideCharToMultiByte(CP_UTF8, 0, module_entry.szExePath, -1, &lib_name[0],
+                        lib_name_length, nullptr, nullptr);
+    result.push_back(OS::SharedLibraryAddress(
+        lib_name, reinterpret_cast<uintptr_t>(module_entry.modBaseAddr),
+        reinterpret_cast<uintptr_t>(module_entry.modBaseAddr +
+                                    module_entry.modBaseSize)));
+    cont = _Module32NextW(snapshot, &module_entry);
+  }
+  CloseHandle(snapshot);
+
+  symbols_loaded = true;
+  return result;
+}
+
+
+std::vector<OS::SharedLibraryAddress> OS::GetSharedLibraryAddresses() {
+  // SharedLibraryEvents are logged when loading symbol information.
+  // Only the shared libraries loaded at the time of the call to
+  // GetSharedLibraryAddresses are logged.  DLLs loaded after
+  // initialization are not accounted for.
+  if (!LoadDbgHelpAndTlHelp32()) return std::vector<OS::SharedLibraryAddress>();
+  HANDLE process_handle = GetCurrentProcess();
+  return LoadSymbols(process_handle);
+}
+
+void OS::SignalCodeMovingGC() {}
+
+#else  // __MINGW32__
+std::vector<OS::SharedLibraryAddress> OS::GetSharedLibraryAddresses() {
+  return std::vector<OS::SharedLibraryAddress>();
+}
+
+void OS::SignalCodeMovingGC() {}
+#endif  // __MINGW32__
+
+
+int OS::ActivationFrameAlignment() {
+#ifdef _WIN64
+  return 16;  // Windows 64-bit ABI requires the stack to be 16-byte aligned.
+#elif defined(__MINGW32__)
+  // With gcc 4.4 the tree vectorization optimizer can generate code
+  // that requires 16 byte alignment such as movdqa on x86.
+  return 16;
+#else
+  return 8;  // Floating-point math runs faster with 8-byte alignment.
+#endif
+}
+
+#if (defined(_WIN32) || defined(_WIN64))
+void EnsureConsoleOutputWin32() {
+  UINT new_flags =
+      SEM_FAILCRITICALERRORS | SEM_NOGPFAULTERRORBOX | SEM_NOOPENFILEERRORBOX;
+  UINT existing_flags = SetErrorMode(new_flags);
+  SetErrorMode(existing_flags | new_flags);
+#if defined(_MSC_VER)
+  _CrtSetReportMode(_CRT_WARN, _CRTDBG_MODE_DEBUG | _CRTDBG_MODE_FILE);
+  _CrtSetReportFile(_CRT_WARN, _CRTDBG_FILE_STDERR);
+  _CrtSetReportMode(_CRT_ASSERT, _CRTDBG_MODE_DEBUG | _CRTDBG_MODE_FILE);
+  _CrtSetReportFile(_CRT_ASSERT, _CRTDBG_FILE_STDERR);
+  _CrtSetReportMode(_CRT_ERROR, _CRTDBG_MODE_DEBUG | _CRTDBG_MODE_FILE);
+  _CrtSetReportFile(_CRT_ERROR, _CRTDBG_FILE_STDERR);
+  _set_error_mode(_OUT_TO_STDERR);
+#endif  // defined(_MSC_VER)
+}
+#endif  // (defined(_WIN32) || defined(_WIN64))
+
+// ----------------------------------------------------------------------------
+// Win32 thread support.
+
+// Definition of invalid thread handle and id.
+static const HANDLE kNoThread = INVALID_HANDLE_VALUE;
+
+// Entry point for threads. The supplied argument is a pointer to the thread
+// object. The entry function dispatches to the run method in the thread
+// object. It is important that this function has __stdcall calling
+// convention.
+static unsigned int __stdcall ThreadEntry(void* arg) {
+  Thread* thread = reinterpret_cast<Thread*>(arg);
+  thread->NotifyStartedAndRun();
+  return 0;
+}
+
+
+class Thread::PlatformData {
+ public:
+  explicit PlatformData(HANDLE thread) : thread_(thread) {}
+  HANDLE thread_;
+  unsigned thread_id_;
+};
+
+
+// Initialize a Win32 thread object. The thread has an invalid thread
+// handle until it is started.
+
+Thread::Thread(const Options& options)
+    : stack_size_(options.stack_size()), start_semaphore_(nullptr) {
+  data_ = new PlatformData(kNoThread);
+  set_name(options.name());
+}
+
+
+void Thread::set_name(const char* name) {
+  OS::StrNCpy(name_, sizeof(name_), name, strlen(name));
+  name_[sizeof(name_) - 1] = '\0';
+}
+
+
+// Close our own handle for the thread.
+Thread::~Thread() {
+  if (data_->thread_ != kNoThread) CloseHandle(data_->thread_);
+  delete data_;
+}
+
+
+// Create a new thread. It is important to use _beginthreadex() instead of
+// the Win32 function CreateThread(), because the CreateThread() does not
+// initialize thread specific structures in the C runtime library.
+void Thread::Start() {
+  data_->thread_ = reinterpret_cast<HANDLE>(
+      _beginthreadex(nullptr, static_cast<unsigned>(stack_size_), ThreadEntry,
+                     this, 0, &data_->thread_id_));
+}
+
+
+// Wait for thread to terminate.
+void Thread::Join() {
+  if (data_->thread_id_ != GetCurrentThreadId()) {
+    WaitForSingleObject(data_->thread_, INFINITE);
+  }
+}
+
+
+Thread::LocalStorageKey Thread::CreateThreadLocalKey() {
+  DWORD result = TlsAlloc();
+  DCHECK(result != TLS_OUT_OF_INDEXES);
+  return static_cast<LocalStorageKey>(result);
+}
+
+
+void Thread::DeleteThreadLocalKey(LocalStorageKey key) {
+  BOOL result = TlsFree(static_cast<DWORD>(key));
+  USE(result);
+  DCHECK(result);
+}
+
+
+void* Thread::GetThreadLocal(LocalStorageKey key) {
+  return TlsGetValue(static_cast<DWORD>(key));
+}
+
+
+void Thread::SetThreadLocal(LocalStorageKey key, void* value) {
+  BOOL result = TlsSetValue(static_cast<DWORD>(key), value);
+  USE(result);
+  DCHECK(result);
+}
+
+}  // namespace base
+}  // namespace v8
diff -Nru orig/deps/v8/src/base/platform/time.cc patched/deps/v8/src/base/platform/time.cc
--- orig/deps/v8/src/base/platform/time.cc	2019-04-30 13:31:27.000000000 -0400
+++ patched/deps/v8/src/base/platform/time.cc	2021-03-10 05:44:54.329299737 -0500
@@ -784,13 +784,13 @@
 ThreadTicks ThreadTicks::Now() {
 #if V8_OS_MACOSX
   return ThreadTicks(ComputeThreadTicks());
+#elif V8_OS_WIN
+  return ThreadTicks::GetForThread(::GetCurrentThread());
 #elif(defined(_POSIX_THREAD_CPUTIME) && (_POSIX_THREAD_CPUTIME >= 0)) || \
   defined(V8_OS_ANDROID)
   return ThreadTicks(ClockNow(CLOCK_THREAD_CPUTIME_ID));
 #elif V8_OS_SOLARIS
   return ThreadTicks(gethrvtime() / Time::kNanosecondsPerMicrosecond);
-#elif V8_OS_WIN
-  return ThreadTicks::GetForThread(::GetCurrentThread());
 #else
   UNREACHABLE();
 #endif
@@ -829,6 +829,12 @@
     ::Sleep(10);
 }
 
+#ifdef __MINGW64_VERSION_MAJOR
+extern "C" {
+	extern unsigned __int64 __rdtsc(void);
+}
+#endif
+
 double ThreadTicks::TSCTicksPerSecond() {
   DCHECK(IsSupported());
 
diff -Nru orig/deps/v8/src/base/platform/time.cc.orig patched/deps/v8/src/base/platform/time.cc.orig
--- orig/deps/v8/src/base/platform/time.cc.orig	1969-12-31 19:00:00.000000000 -0500
+++ patched/deps/v8/src/base/platform/time.cc.orig	2021-03-10 05:44:54.329299737 -0500
@@ -0,0 +1,893 @@
+// Copyright 2013 the V8 project authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include "src/base/platform/time.h"
+
+#if V8_OS_POSIX
+#include <fcntl.h>  // for O_RDONLY
+#include <sys/time.h>
+#include <unistd.h>
+#endif
+#if V8_OS_MACOSX
+#include <mach/mach.h>
+#include <mach/mach_time.h>
+#include <pthread.h>
+#endif
+
+#include <cstring>
+#include <ostream>
+
+#if V8_OS_WIN
+#include "src/base/atomicops.h"
+#include "src/base/lazy-instance.h"
+#include "src/base/win32-headers.h"
+#endif
+#include "src/base/cpu.h"
+#include "src/base/logging.h"
+#include "src/base/platform/platform.h"
+
+namespace {
+
+#if V8_OS_MACOSX
+int64_t ComputeThreadTicks() {
+  mach_msg_type_number_t thread_info_count = THREAD_BASIC_INFO_COUNT;
+  thread_basic_info_data_t thread_info_data;
+  kern_return_t kr = thread_info(
+      pthread_mach_thread_np(pthread_self()),
+      THREAD_BASIC_INFO,
+      reinterpret_cast<thread_info_t>(&thread_info_data),
+      &thread_info_count);
+  CHECK_EQ(kr, KERN_SUCCESS);
+
+  v8::base::CheckedNumeric<int64_t> absolute_micros(
+      thread_info_data.user_time.seconds +
+      thread_info_data.system_time.seconds);
+  absolute_micros *= v8::base::Time::kMicrosecondsPerSecond;
+  absolute_micros += (thread_info_data.user_time.microseconds +
+                      thread_info_data.system_time.microseconds);
+  return absolute_micros.ValueOrDie();
+}
+#elif V8_OS_POSIX
+// Helper function to get results from clock_gettime() and convert to a
+// microsecond timebase. Minimum requirement is MONOTONIC_CLOCK to be supported
+// on the system. FreeBSD 6 has CLOCK_MONOTONIC but defines
+// _POSIX_MONOTONIC_CLOCK to -1.
+V8_INLINE int64_t ClockNow(clockid_t clk_id) {
+#if (defined(_POSIX_MONOTONIC_CLOCK) && _POSIX_MONOTONIC_CLOCK >= 0) || \
+  defined(V8_OS_BSD) || defined(V8_OS_ANDROID)
+// On AIX clock_gettime for CLOCK_THREAD_CPUTIME_ID outputs time with
+// resolution of 10ms. thread_cputime API provides the time in ns
+#if defined(V8_OS_AIX)
+  thread_cputime_t tc;
+  if (clk_id == CLOCK_THREAD_CPUTIME_ID) {
+    if (thread_cputime(-1, &tc) != 0) {
+      UNREACHABLE();
+    }
+  }
+#endif
+  struct timespec ts;
+  if (clock_gettime(clk_id, &ts) != 0) {
+    UNREACHABLE();
+  }
+  v8::base::internal::CheckedNumeric<int64_t> result(ts.tv_sec);
+  result *= v8::base::Time::kMicrosecondsPerSecond;
+#if defined(V8_OS_AIX)
+  if (clk_id == CLOCK_THREAD_CPUTIME_ID) {
+    result += (tc.stime / v8::base::Time::kNanosecondsPerMicrosecond);
+  } else {
+    result += (ts.tv_nsec / v8::base::Time::kNanosecondsPerMicrosecond);
+  }
+#else
+  result += (ts.tv_nsec / v8::base::Time::kNanosecondsPerMicrosecond);
+#endif
+  return result.ValueOrDie();
+#else  // Monotonic clock not supported.
+  return 0;
+#endif
+}
+
+V8_INLINE bool IsHighResolutionTimer(clockid_t clk_id) {
+  // Limit duration of timer resolution measurement to 100 ms. If we cannot
+  // measure timer resoltuion within this time, we assume a low resolution
+  // timer.
+  int64_t end =
+      ClockNow(clk_id) + 100 * v8::base::Time::kMicrosecondsPerMillisecond;
+  int64_t start, delta;
+  do {
+    start = ClockNow(clk_id);
+    // Loop until we can detect that the clock has changed. Non-HighRes timers
+    // will increment in chunks, i.e. 15ms. By spinning until we see a clock
+    // change, we detect the minimum time between measurements.
+    do {
+      delta = ClockNow(clk_id) - start;
+    } while (delta == 0);
+  } while (delta > 1 && start < end);
+  return delta <= 1;
+}
+
+#elif V8_OS_WIN
+V8_INLINE bool IsQPCReliable() {
+  v8::base::CPU cpu;
+  // On Athlon X2 CPUs (e.g. model 15) QueryPerformanceCounter is unreliable.
+  return strcmp(cpu.vendor(), "AuthenticAMD") == 0 && cpu.family() == 15;
+}
+
+// Returns the current value of the performance counter.
+V8_INLINE uint64_t QPCNowRaw() {
+  LARGE_INTEGER perf_counter_now = {};
+  // According to the MSDN documentation for QueryPerformanceCounter(), this
+  // will never fail on systems that run XP or later.
+  // https://msdn.microsoft.com/library/windows/desktop/ms644904.aspx
+  BOOL result = ::QueryPerformanceCounter(&perf_counter_now);
+  DCHECK(result);
+  USE(result);
+  return perf_counter_now.QuadPart;
+}
+#endif  // V8_OS_MACOSX
+
+
+}  // namespace
+
+namespace v8 {
+namespace base {
+
+TimeDelta TimeDelta::FromDays(int days) {
+  return TimeDelta(days * Time::kMicrosecondsPerDay);
+}
+
+
+TimeDelta TimeDelta::FromHours(int hours) {
+  return TimeDelta(hours * Time::kMicrosecondsPerHour);
+}
+
+
+TimeDelta TimeDelta::FromMinutes(int minutes) {
+  return TimeDelta(minutes * Time::kMicrosecondsPerMinute);
+}
+
+
+TimeDelta TimeDelta::FromSeconds(int64_t seconds) {
+  return TimeDelta(seconds * Time::kMicrosecondsPerSecond);
+}
+
+
+TimeDelta TimeDelta::FromMilliseconds(int64_t milliseconds) {
+  return TimeDelta(milliseconds * Time::kMicrosecondsPerMillisecond);
+}
+
+
+TimeDelta TimeDelta::FromNanoseconds(int64_t nanoseconds) {
+  return TimeDelta(nanoseconds / Time::kNanosecondsPerMicrosecond);
+}
+
+
+int TimeDelta::InDays() const {
+  if (IsMax()) {
+    // Preserve max to prevent overflow.
+    return std::numeric_limits<int>::max();
+  }
+  return static_cast<int>(delta_ / Time::kMicrosecondsPerDay);
+}
+
+int TimeDelta::InHours() const {
+  if (IsMax()) {
+    // Preserve max to prevent overflow.
+    return std::numeric_limits<int>::max();
+  }
+  return static_cast<int>(delta_ / Time::kMicrosecondsPerHour);
+}
+
+int TimeDelta::InMinutes() const {
+  if (IsMax()) {
+    // Preserve max to prevent overflow.
+    return std::numeric_limits<int>::max();
+  }
+  return static_cast<int>(delta_ / Time::kMicrosecondsPerMinute);
+}
+
+double TimeDelta::InSecondsF() const {
+  if (IsMax()) {
+    // Preserve max to prevent overflow.
+    return std::numeric_limits<double>::infinity();
+  }
+  return static_cast<double>(delta_) / Time::kMicrosecondsPerSecond;
+}
+
+int64_t TimeDelta::InSeconds() const {
+  if (IsMax()) {
+    // Preserve max to prevent overflow.
+    return std::numeric_limits<int64_t>::max();
+  }
+  return delta_ / Time::kMicrosecondsPerSecond;
+}
+
+double TimeDelta::InMillisecondsF() const {
+  if (IsMax()) {
+    // Preserve max to prevent overflow.
+    return std::numeric_limits<double>::infinity();
+  }
+  return static_cast<double>(delta_) / Time::kMicrosecondsPerMillisecond;
+}
+
+int64_t TimeDelta::InMilliseconds() const {
+  if (IsMax()) {
+    // Preserve max to prevent overflow.
+    return std::numeric_limits<int64_t>::max();
+  }
+  return delta_ / Time::kMicrosecondsPerMillisecond;
+}
+
+int64_t TimeDelta::InMillisecondsRoundedUp() const {
+  if (IsMax()) {
+    // Preserve max to prevent overflow.
+    return std::numeric_limits<int64_t>::max();
+  }
+  return (delta_ + Time::kMicrosecondsPerMillisecond - 1) /
+         Time::kMicrosecondsPerMillisecond;
+}
+
+int64_t TimeDelta::InMicroseconds() const {
+  if (IsMax()) {
+    // Preserve max to prevent overflow.
+    return std::numeric_limits<int64_t>::max();
+  }
+  return delta_;
+}
+
+int64_t TimeDelta::InNanoseconds() const {
+  if (IsMax()) {
+    // Preserve max to prevent overflow.
+    return std::numeric_limits<int64_t>::max();
+  }
+  return delta_ * Time::kNanosecondsPerMicrosecond;
+}
+
+
+#if V8_OS_MACOSX
+
+TimeDelta TimeDelta::FromMachTimespec(struct mach_timespec ts) {
+  DCHECK_GE(ts.tv_nsec, 0);
+  DCHECK_LT(ts.tv_nsec,
+            static_cast<long>(Time::kNanosecondsPerSecond));  // NOLINT
+  return TimeDelta(ts.tv_sec * Time::kMicrosecondsPerSecond +
+                   ts.tv_nsec / Time::kNanosecondsPerMicrosecond);
+}
+
+
+struct mach_timespec TimeDelta::ToMachTimespec() const {
+  struct mach_timespec ts;
+  DCHECK_GE(delta_, 0);
+  ts.tv_sec = static_cast<unsigned>(delta_ / Time::kMicrosecondsPerSecond);
+  ts.tv_nsec = (delta_ % Time::kMicrosecondsPerSecond) *
+      Time::kNanosecondsPerMicrosecond;
+  return ts;
+}
+
+#endif  // V8_OS_MACOSX
+
+
+#if V8_OS_POSIX
+
+TimeDelta TimeDelta::FromTimespec(struct timespec ts) {
+  DCHECK_GE(ts.tv_nsec, 0);
+  DCHECK_LT(ts.tv_nsec,
+            static_cast<long>(Time::kNanosecondsPerSecond));  // NOLINT
+  return TimeDelta(ts.tv_sec * Time::kMicrosecondsPerSecond +
+                   ts.tv_nsec / Time::kNanosecondsPerMicrosecond);
+}
+
+
+struct timespec TimeDelta::ToTimespec() const {
+  struct timespec ts;
+  ts.tv_sec = static_cast<time_t>(delta_ / Time::kMicrosecondsPerSecond);
+  ts.tv_nsec = (delta_ % Time::kMicrosecondsPerSecond) *
+      Time::kNanosecondsPerMicrosecond;
+  return ts;
+}
+
+#endif  // V8_OS_POSIX
+
+
+#if V8_OS_WIN
+
+// We implement time using the high-resolution timers so that we can get
+// timeouts which are smaller than 10-15ms. To avoid any drift, we
+// periodically resync the internal clock to the system clock.
+class Clock final {
+ public:
+  Clock() : initial_ticks_(GetSystemTicks()), initial_time_(GetSystemTime()) {}
+
+  Time Now() {
+    // Time between resampling the un-granular clock for this API (1 minute).
+    const TimeDelta kMaxElapsedTime = TimeDelta::FromMinutes(1);
+
+    LockGuard<Mutex> lock_guard(&mutex_);
+
+    // Determine current time and ticks.
+    TimeTicks ticks = GetSystemTicks();
+    Time time = GetSystemTime();
+
+    // Check if we need to synchronize with the system clock due to a backwards
+    // time change or the amount of time elapsed.
+    TimeDelta elapsed = ticks - initial_ticks_;
+    if (time < initial_time_ || elapsed > kMaxElapsedTime) {
+      initial_ticks_ = ticks;
+      initial_time_ = time;
+      return time;
+    }
+
+    return initial_time_ + elapsed;
+  }
+
+  Time NowFromSystemTime() {
+    LockGuard<Mutex> lock_guard(&mutex_);
+    initial_ticks_ = GetSystemTicks();
+    initial_time_ = GetSystemTime();
+    return initial_time_;
+  }
+
+ private:
+  static TimeTicks GetSystemTicks() {
+    return TimeTicks::Now();
+  }
+
+  static Time GetSystemTime() {
+    FILETIME ft;
+    ::GetSystemTimeAsFileTime(&ft);
+    return Time::FromFiletime(ft);
+  }
+
+  TimeTicks initial_ticks_;
+  Time initial_time_;
+  Mutex mutex_;
+};
+
+
+static LazyStaticInstance<Clock, DefaultConstructTrait<Clock>,
+                          ThreadSafeInitOnceTrait>::type clock =
+    LAZY_STATIC_INSTANCE_INITIALIZER;
+
+
+Time Time::Now() {
+  return clock.Pointer()->Now();
+}
+
+
+Time Time::NowFromSystemTime() {
+  return clock.Pointer()->NowFromSystemTime();
+}
+
+
+// Time between windows epoch and standard epoch.
+static const int64_t kTimeToEpochInMicroseconds = int64_t{11644473600000000};
+
+Time Time::FromFiletime(FILETIME ft) {
+  if (ft.dwLowDateTime == 0 && ft.dwHighDateTime == 0) {
+    return Time();
+  }
+  if (ft.dwLowDateTime == std::numeric_limits<DWORD>::max() &&
+      ft.dwHighDateTime == std::numeric_limits<DWORD>::max()) {
+    return Max();
+  }
+  int64_t us = (static_cast<uint64_t>(ft.dwLowDateTime) +
+                (static_cast<uint64_t>(ft.dwHighDateTime) << 32)) / 10;
+  return Time(us - kTimeToEpochInMicroseconds);
+}
+
+
+FILETIME Time::ToFiletime() const {
+  DCHECK_GE(us_, 0);
+  FILETIME ft;
+  if (IsNull()) {
+    ft.dwLowDateTime = 0;
+    ft.dwHighDateTime = 0;
+    return ft;
+  }
+  if (IsMax()) {
+    ft.dwLowDateTime = std::numeric_limits<DWORD>::max();
+    ft.dwHighDateTime = std::numeric_limits<DWORD>::max();
+    return ft;
+  }
+  uint64_t us = static_cast<uint64_t>(us_ + kTimeToEpochInMicroseconds) * 10;
+  ft.dwLowDateTime = static_cast<DWORD>(us);
+  ft.dwHighDateTime = static_cast<DWORD>(us >> 32);
+  return ft;
+}
+
+#elif V8_OS_POSIX
+
+Time Time::Now() {
+  struct timeval tv;
+  int result = gettimeofday(&tv, nullptr);
+  DCHECK_EQ(0, result);
+  USE(result);
+  return FromTimeval(tv);
+}
+
+
+Time Time::NowFromSystemTime() {
+  return Now();
+}
+
+
+Time Time::FromTimespec(struct timespec ts) {
+  DCHECK_GE(ts.tv_nsec, 0);
+  DCHECK_LT(ts.tv_nsec, kNanosecondsPerSecond);
+  if (ts.tv_nsec == 0 && ts.tv_sec == 0) {
+    return Time();
+  }
+  if (ts.tv_nsec == static_cast<long>(kNanosecondsPerSecond - 1) &&  // NOLINT
+      ts.tv_sec == std::numeric_limits<time_t>::max()) {
+    return Max();
+  }
+  return Time(ts.tv_sec * kMicrosecondsPerSecond +
+              ts.tv_nsec / kNanosecondsPerMicrosecond);
+}
+
+
+struct timespec Time::ToTimespec() const {
+  struct timespec ts;
+  if (IsNull()) {
+    ts.tv_sec = 0;
+    ts.tv_nsec = 0;
+    return ts;
+  }
+  if (IsMax()) {
+    ts.tv_sec = std::numeric_limits<time_t>::max();
+    ts.tv_nsec = static_cast<long>(kNanosecondsPerSecond - 1);  // NOLINT
+    return ts;
+  }
+  ts.tv_sec = static_cast<time_t>(us_ / kMicrosecondsPerSecond);
+  ts.tv_nsec = (us_ % kMicrosecondsPerSecond) * kNanosecondsPerMicrosecond;
+  return ts;
+}
+
+
+Time Time::FromTimeval(struct timeval tv) {
+  DCHECK_GE(tv.tv_usec, 0);
+  DCHECK(tv.tv_usec < static_cast<suseconds_t>(kMicrosecondsPerSecond));
+  if (tv.tv_usec == 0 && tv.tv_sec == 0) {
+    return Time();
+  }
+  if (tv.tv_usec == static_cast<suseconds_t>(kMicrosecondsPerSecond - 1) &&
+      tv.tv_sec == std::numeric_limits<time_t>::max()) {
+    return Max();
+  }
+  return Time(tv.tv_sec * kMicrosecondsPerSecond + tv.tv_usec);
+}
+
+
+struct timeval Time::ToTimeval() const {
+  struct timeval tv;
+  if (IsNull()) {
+    tv.tv_sec = 0;
+    tv.tv_usec = 0;
+    return tv;
+  }
+  if (IsMax()) {
+    tv.tv_sec = std::numeric_limits<time_t>::max();
+    tv.tv_usec = static_cast<suseconds_t>(kMicrosecondsPerSecond - 1);
+    return tv;
+  }
+  tv.tv_sec = static_cast<time_t>(us_ / kMicrosecondsPerSecond);
+  tv.tv_usec = us_ % kMicrosecondsPerSecond;
+  return tv;
+}
+
+#endif  // V8_OS_WIN
+
+// static
+TimeTicks TimeTicks::HighResolutionNow() {
+  // a DCHECK of TimeTicks::IsHighResolution() was removed from here
+  // as it turns out this path is used in the wild for logs and counters.
+  //
+  // TODO(hpayer) We may eventually want to split TimedHistograms based
+  // on low resolution clocks to avoid polluting metrics
+  return TimeTicks::Now();
+}
+
+Time Time::FromJsTime(double ms_since_epoch) {
+  // The epoch is a valid time, so this constructor doesn't interpret
+  // 0 as the null time.
+  if (ms_since_epoch == std::numeric_limits<double>::max()) {
+    return Max();
+  }
+  return Time(
+      static_cast<int64_t>(ms_since_epoch * kMicrosecondsPerMillisecond));
+}
+
+
+double Time::ToJsTime() const {
+  if (IsNull()) {
+    // Preserve 0 so the invalid result doesn't depend on the platform.
+    return 0;
+  }
+  if (IsMax()) {
+    // Preserve max without offset to prevent overflow.
+    return std::numeric_limits<double>::max();
+  }
+  return static_cast<double>(us_) / kMicrosecondsPerMillisecond;
+}
+
+
+std::ostream& operator<<(std::ostream& os, const Time& time) {
+  return os << time.ToJsTime();
+}
+
+
+#if V8_OS_WIN
+
+namespace {
+
+// We define a wrapper to adapt between the __stdcall and __cdecl call of the
+// mock function, and to avoid a static constructor.  Assigning an import to a
+// function pointer directly would require setup code to fetch from the IAT.
+DWORD timeGetTimeWrapper() { return timeGetTime(); }
+
+DWORD (*g_tick_function)(void) = &timeGetTimeWrapper;
+
+// A structure holding the most significant bits of "last seen" and a
+// "rollover" counter.
+union LastTimeAndRolloversState {
+  // The state as a single 32-bit opaque value.
+  base::Atomic32 as_opaque_32;
+
+  // The state as usable values.
+  struct {
+    // The top 8-bits of the "last" time. This is enough to check for rollovers
+    // and the small bit-size means fewer CompareAndSwap operations to store
+    // changes in state, which in turn makes for fewer retries.
+    uint8_t last_8;
+    // A count of the number of detected rollovers. Using this as bits 47-32
+    // of the upper half of a 64-bit value results in a 48-bit tick counter.
+    // This extends the total rollover period from about 49 days to about 8800
+    // years while still allowing it to be stored with last_8 in a single
+    // 32-bit value.
+    uint16_t rollovers;
+  } as_values;
+};
+base::Atomic32 g_last_time_and_rollovers = 0;
+static_assert(sizeof(LastTimeAndRolloversState) <=
+                  sizeof(g_last_time_and_rollovers),
+              "LastTimeAndRolloversState does not fit in a single atomic word");
+
+// We use timeGetTime() to implement TimeTicks::Now().  This can be problematic
+// because it returns the number of milliseconds since Windows has started,
+// which will roll over the 32-bit value every ~49 days.  We try to track
+// rollover ourselves, which works if TimeTicks::Now() is called at least every
+// 48.8 days (not 49 days because only changes in the top 8 bits get noticed).
+TimeTicks RolloverProtectedNow() {
+  LastTimeAndRolloversState state;
+  DWORD now;  // DWORD is always unsigned 32 bits.
+
+  while (true) {
+    // Fetch the "now" and "last" tick values, updating "last" with "now" and
+    // incrementing the "rollovers" counter if the tick-value has wrapped back
+    // around. Atomic operations ensure that both "last" and "rollovers" are
+    // always updated together.
+    int32_t original = base::Acquire_Load(&g_last_time_and_rollovers);
+    state.as_opaque_32 = original;
+    now = g_tick_function();
+    uint8_t now_8 = static_cast<uint8_t>(now >> 24);
+    if (now_8 < state.as_values.last_8) ++state.as_values.rollovers;
+    state.as_values.last_8 = now_8;
+
+    // If the state hasn't changed, exit the loop.
+    if (state.as_opaque_32 == original) break;
+
+    // Save the changed state. If the existing value is unchanged from the
+    // original, exit the loop.
+    int32_t check = base::Release_CompareAndSwap(&g_last_time_and_rollovers,
+                                                 original, state.as_opaque_32);
+    if (check == original) break;
+
+    // Another thread has done something in between so retry from the top.
+  }
+
+  return TimeTicks() +
+         TimeDelta::FromMilliseconds(
+             now + (static_cast<uint64_t>(state.as_values.rollovers) << 32));
+}
+
+// Discussion of tick counter options on Windows:
+//
+// (1) CPU cycle counter. (Retrieved via RDTSC)
+// The CPU counter provides the highest resolution time stamp and is the least
+// expensive to retrieve. However, on older CPUs, two issues can affect its
+// reliability: First it is maintained per processor and not synchronized
+// between processors. Also, the counters will change frequency due to thermal
+// and power changes, and stop in some states.
+//
+// (2) QueryPerformanceCounter (QPC). The QPC counter provides a high-
+// resolution (<1 microsecond) time stamp. On most hardware running today, it
+// auto-detects and uses the constant-rate RDTSC counter to provide extremely
+// efficient and reliable time stamps.
+//
+// On older CPUs where RDTSC is unreliable, it falls back to using more
+// expensive (20X to 40X more costly) alternate clocks, such as HPET or the ACPI
+// PM timer, and can involve system calls; and all this is up to the HAL (with
+// some help from ACPI). According to
+// http://blogs.msdn.com/oldnewthing/archive/2005/09/02/459952.aspx, in the
+// worst case, it gets the counter from the rollover interrupt on the
+// programmable interrupt timer. In best cases, the HAL may conclude that the
+// RDTSC counter runs at a constant frequency, then it uses that instead. On
+// multiprocessor machines, it will try to verify the values returned from
+// RDTSC on each processor are consistent with each other, and apply a handful
+// of workarounds for known buggy hardware. In other words, QPC is supposed to
+// give consistent results on a multiprocessor computer, but for older CPUs it
+// can be unreliable due bugs in BIOS or HAL.
+//
+// (3) System time. The system time provides a low-resolution (from ~1 to ~15.6
+// milliseconds) time stamp but is comparatively less expensive to retrieve and
+// more reliable. Time::EnableHighResolutionTimer() and
+// Time::ActivateHighResolutionTimer() can be called to alter the resolution of
+// this timer; and also other Windows applications can alter it, affecting this
+// one.
+
+TimeTicks InitialTimeTicksNowFunction();
+
+// See "threading notes" in InitializeNowFunctionPointer() for details on how
+// concurrent reads/writes to these globals has been made safe.
+using TimeTicksNowFunction = decltype(&TimeTicks::Now);
+TimeTicksNowFunction g_time_ticks_now_function = &InitialTimeTicksNowFunction;
+int64_t g_qpc_ticks_per_second = 0;
+
+// As of January 2015, use of <atomic> is forbidden in Chromium code. This is
+// what std::atomic_thread_fence does on Windows on all Intel architectures when
+// the memory_order argument is anything but std::memory_order_seq_cst:
+#define ATOMIC_THREAD_FENCE(memory_order) _ReadWriteBarrier();
+
+TimeDelta QPCValueToTimeDelta(LONGLONG qpc_value) {
+  // Ensure that the assignment to |g_qpc_ticks_per_second|, made in
+  // InitializeNowFunctionPointer(), has happened by this point.
+  ATOMIC_THREAD_FENCE(memory_order_acquire);
+
+  DCHECK_GT(g_qpc_ticks_per_second, 0);
+
+  // If the QPC Value is below the overflow threshold, we proceed with
+  // simple multiply and divide.
+  if (qpc_value < TimeTicks::kQPCOverflowThreshold) {
+    return TimeDelta::FromMicroseconds(
+        qpc_value * TimeTicks::kMicrosecondsPerSecond / g_qpc_ticks_per_second);
+  }
+  // Otherwise, calculate microseconds in a round about manner to avoid
+  // overflow and precision issues.
+  int64_t whole_seconds = qpc_value / g_qpc_ticks_per_second;
+  int64_t leftover_ticks = qpc_value - (whole_seconds * g_qpc_ticks_per_second);
+  return TimeDelta::FromMicroseconds(
+      (whole_seconds * TimeTicks::kMicrosecondsPerSecond) +
+      ((leftover_ticks * TimeTicks::kMicrosecondsPerSecond) /
+       g_qpc_ticks_per_second));
+}
+
+TimeTicks QPCNow() { return TimeTicks() + QPCValueToTimeDelta(QPCNowRaw()); }
+
+bool IsBuggyAthlon(const CPU& cpu) {
+  // On Athlon X2 CPUs (e.g. model 15) QueryPerformanceCounter is unreliable.
+  return strcmp(cpu.vendor(), "AuthenticAMD") == 0 && cpu.family() == 15;
+}
+
+void InitializeTimeTicksNowFunctionPointer() {
+  LARGE_INTEGER ticks_per_sec = {};
+  if (!QueryPerformanceFrequency(&ticks_per_sec)) ticks_per_sec.QuadPart = 0;
+
+  // If Windows cannot provide a QPC implementation, TimeTicks::Now() must use
+  // the low-resolution clock.
+  //
+  // If the QPC implementation is expensive and/or unreliable, TimeTicks::Now()
+  // will still use the low-resolution clock. A CPU lacking a non-stop time
+  // counter will cause Windows to provide an alternate QPC implementation that
+  // works, but is expensive to use. Certain Athlon CPUs are known to make the
+  // QPC implementation unreliable.
+  //
+  // Otherwise, Now uses the high-resolution QPC clock. As of 21 August 2015,
+  // ~72% of users fall within this category.
+  TimeTicksNowFunction now_function;
+  CPU cpu;
+  if (ticks_per_sec.QuadPart <= 0 || !cpu.has_non_stop_time_stamp_counter() ||
+      IsBuggyAthlon(cpu)) {
+    now_function = &RolloverProtectedNow;
+  } else {
+    now_function = &QPCNow;
+  }
+
+  // Threading note 1: In an unlikely race condition, it's possible for two or
+  // more threads to enter InitializeNowFunctionPointer() in parallel. This is
+  // not a problem since all threads should end up writing out the same values
+  // to the global variables.
+  //
+  // Threading note 2: A release fence is placed here to ensure, from the
+  // perspective of other threads using the function pointers, that the
+  // assignment to |g_qpc_ticks_per_second| happens before the function pointers
+  // are changed.
+  g_qpc_ticks_per_second = ticks_per_sec.QuadPart;
+  ATOMIC_THREAD_FENCE(memory_order_release);
+  g_time_ticks_now_function = now_function;
+}
+
+TimeTicks InitialTimeTicksNowFunction() {
+  InitializeTimeTicksNowFunctionPointer();
+  return g_time_ticks_now_function();
+}
+
+#undef ATOMIC_THREAD_FENCE
+
+}  // namespace
+
+// static
+TimeTicks TimeTicks::Now() {
+  // Make sure we never return 0 here.
+  TimeTicks ticks(g_time_ticks_now_function());
+  DCHECK(!ticks.IsNull());
+  return ticks;
+}
+
+// static
+bool TimeTicks::IsHighResolution() {
+  if (g_time_ticks_now_function == &InitialTimeTicksNowFunction)
+    InitializeTimeTicksNowFunctionPointer();
+  return g_time_ticks_now_function == &QPCNow;
+}
+
+#else  // V8_OS_WIN
+
+TimeTicks TimeTicks::Now() {
+  int64_t ticks;
+#if V8_OS_MACOSX
+  static struct mach_timebase_info info;
+  if (info.denom == 0) {
+    kern_return_t result = mach_timebase_info(&info);
+    DCHECK_EQ(KERN_SUCCESS, result);
+    USE(result);
+  }
+  ticks = (mach_absolute_time() / Time::kNanosecondsPerMicrosecond *
+           info.numer / info.denom);
+#elif V8_OS_SOLARIS
+  ticks = (gethrtime() / Time::kNanosecondsPerMicrosecond);
+#elif V8_OS_POSIX
+  ticks = ClockNow(CLOCK_MONOTONIC);
+#else
+#error platform does not implement TimeTicks::HighResolutionNow.
+#endif  // V8_OS_MACOSX
+  // Make sure we never return 0 here.
+  return TimeTicks(ticks + 1);
+}
+
+// static
+bool TimeTicks::IsHighResolution() {
+#if V8_OS_MACOSX
+  return true;
+#elif V8_OS_POSIX
+  static bool is_high_resolution = IsHighResolutionTimer(CLOCK_MONOTONIC);
+  return is_high_resolution;
+#else
+  return true;
+#endif
+}
+
+#endif  // V8_OS_WIN
+
+
+bool ThreadTicks::IsSupported() {
+#if (defined(_POSIX_THREAD_CPUTIME) && (_POSIX_THREAD_CPUTIME >= 0)) || \
+    defined(V8_OS_MACOSX) || defined(V8_OS_ANDROID) || defined(V8_OS_SOLARIS)
+  return true;
+#elif defined(V8_OS_WIN)
+  return IsSupportedWin();
+#else
+  return false;
+#endif
+}
+
+
+ThreadTicks ThreadTicks::Now() {
+#if V8_OS_MACOSX
+  return ThreadTicks(ComputeThreadTicks());
+#elif(defined(_POSIX_THREAD_CPUTIME) && (_POSIX_THREAD_CPUTIME >= 0)) || \
+  defined(V8_OS_ANDROID)
+  return ThreadTicks(ClockNow(CLOCK_THREAD_CPUTIME_ID));
+#elif V8_OS_SOLARIS
+  return ThreadTicks(gethrvtime() / Time::kNanosecondsPerMicrosecond);
+#elif V8_OS_WIN
+  return ThreadTicks::GetForThread(::GetCurrentThread());
+#else
+  UNREACHABLE();
+#endif
+}
+
+
+#if V8_OS_WIN
+ThreadTicks ThreadTicks::GetForThread(const HANDLE& thread_handle) {
+  DCHECK(IsSupported());
+
+  // Get the number of TSC ticks used by the current thread.
+  ULONG64 thread_cycle_time = 0;
+  ::QueryThreadCycleTime(thread_handle, &thread_cycle_time);
+
+  // Get the frequency of the TSC.
+  double tsc_ticks_per_second = TSCTicksPerSecond();
+  if (tsc_ticks_per_second == 0)
+    return ThreadTicks();
+
+  // Return the CPU time of the current thread.
+  double thread_time_seconds = thread_cycle_time / tsc_ticks_per_second;
+  return ThreadTicks(
+      static_cast<int64_t>(thread_time_seconds * Time::kMicrosecondsPerSecond));
+}
+
+// static
+bool ThreadTicks::IsSupportedWin() {
+  static bool is_supported = base::CPU().has_non_stop_time_stamp_counter() &&
+                             !IsQPCReliable();
+  return is_supported;
+}
+
+// static
+void ThreadTicks::WaitUntilInitializedWin() {
+  while (TSCTicksPerSecond() == 0)
+    ::Sleep(10);
+}
+
+double ThreadTicks::TSCTicksPerSecond() {
+  DCHECK(IsSupported());
+
+  // The value returned by QueryPerformanceFrequency() cannot be used as the TSC
+  // frequency, because there is no guarantee that the TSC frequency is equal to
+  // the performance counter frequency.
+
+  // The TSC frequency is cached in a static variable because it takes some time
+  // to compute it.
+  static double tsc_ticks_per_second = 0;
+  if (tsc_ticks_per_second != 0)
+    return tsc_ticks_per_second;
+
+  // Increase the thread priority to reduces the chances of having a context
+  // switch during a reading of the TSC and the performance counter.
+  int previous_priority = ::GetThreadPriority(::GetCurrentThread());
+  ::SetThreadPriority(::GetCurrentThread(), THREAD_PRIORITY_HIGHEST);
+
+  // The first time that this function is called, make an initial reading of the
+  // TSC and the performance counter.
+  static const uint64_t tsc_initial = __rdtsc();
+  static const uint64_t perf_counter_initial = QPCNowRaw();
+
+  // Make a another reading of the TSC and the performance counter every time
+  // that this function is called.
+  uint64_t tsc_now = __rdtsc();
+  uint64_t perf_counter_now = QPCNowRaw();
+
+  // Reset the thread priority.
+  ::SetThreadPriority(::GetCurrentThread(), previous_priority);
+
+  // Make sure that at least 50 ms elapsed between the 2 readings. The first
+  // time that this function is called, we don't expect this to be the case.
+  // Note: The longer the elapsed time between the 2 readings is, the more
+  //   accurate the computed TSC frequency will be. The 50 ms value was
+  //   chosen because local benchmarks show that it allows us to get a
+  //   stddev of less than 1 tick/us between multiple runs.
+  // Note: According to the MSDN documentation for QueryPerformanceFrequency(),
+  //   this will never fail on systems that run XP or later.
+  //   https://msdn.microsoft.com/library/windows/desktop/ms644905.aspx
+  LARGE_INTEGER perf_counter_frequency = {};
+  ::QueryPerformanceFrequency(&perf_counter_frequency);
+  DCHECK_GE(perf_counter_now, perf_counter_initial);
+  uint64_t perf_counter_ticks = perf_counter_now - perf_counter_initial;
+  double elapsed_time_seconds =
+      perf_counter_ticks / static_cast<double>(perf_counter_frequency.QuadPart);
+
+  const double kMinimumEvaluationPeriodSeconds = 0.05;
+  if (elapsed_time_seconds < kMinimumEvaluationPeriodSeconds)
+    return 0;
+
+  // Compute the frequency of the TSC.
+  DCHECK_GE(tsc_now, tsc_initial);
+  uint64_t tsc_ticks = tsc_now - tsc_initial;
+  tsc_ticks_per_second = tsc_ticks / elapsed_time_seconds;
+
+  return tsc_ticks_per_second;
+}
+#endif  // V8_OS_WIN
+
+}  // namespace base
+}  // namespace v8
diff -Nru orig/deps/v8/src/inspector/build/check_injected_script_source.py patched/deps/v8/src/inspector/build/check_injected_script_source.py
--- orig/deps/v8/src/inspector/build/check_injected_script_source.py	2019-04-30 13:31:28.000000000 -0400
+++ patched/deps/v8/src/inspector/build/check_injected_script_source.py	2021-03-10 05:44:54.329299737 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 # Copyright (c) 2014 Google Inc. All rights reserved.
 #
 # Redistribution and use in source and binary forms, with or without
diff -Nru orig/deps/v8/src/inspector/build/compile-scripts.py patched/deps/v8/src/inspector/build/compile-scripts.py
--- orig/deps/v8/src/inspector/build/compile-scripts.py	2019-04-30 13:31:28.000000000 -0400
+++ patched/deps/v8/src/inspector/build/compile-scripts.py	2021-03-10 05:44:54.329299737 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 #
 # Copyright 2016 the V8 project authors. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
diff -Nru orig/deps/v8/src/inspector/build/generate_protocol_externs.py patched/deps/v8/src/inspector/build/generate_protocol_externs.py
--- orig/deps/v8/src/inspector/build/generate_protocol_externs.py	2019-04-30 13:31:28.000000000 -0400
+++ patched/deps/v8/src/inspector/build/generate_protocol_externs.py	2021-03-10 05:44:54.329299737 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 # Copyright (c) 2011 Google Inc. All rights reserved.
 #
 # Redistribution and use in source and binary forms, with or without
diff -Nru orig/deps/v8/src/inspector/build/rjsmin.py patched/deps/v8/src/inspector/build/rjsmin.py
--- orig/deps/v8/src/inspector/build/rjsmin.py	2019-04-30 13:31:28.000000000 -0400
+++ patched/deps/v8/src/inspector/build/rjsmin.py	2021-03-10 05:44:54.329299737 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 #
 # Copyright 2011 - 2013
 # Andr\xe9 Malo or his licensors, as applicable
diff -Nru orig/deps/v8/src/inspector/PRESUBMIT.py patched/deps/v8/src/inspector/PRESUBMIT.py
--- orig/deps/v8/src/inspector/PRESUBMIT.py	2019-04-30 13:31:28.000000000 -0400
+++ patched/deps/v8/src/inspector/PRESUBMIT.py	2021-03-10 05:44:54.329299737 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 #
 # Copyright 2016 the V8 project authors. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
diff -Nru orig/deps/v8/third_party/binutils/detect_v8_host_arch.py patched/deps/v8/third_party/binutils/detect_v8_host_arch.py
--- orig/deps/v8/third_party/binutils/detect_v8_host_arch.py	2019-04-30 13:31:46.000000000 -0400
+++ patched/deps/v8/third_party/binutils/detect_v8_host_arch.py	2021-03-10 05:44:54.329299737 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 # Copyright 2014 the V8 project authors. All rights reserved.
 # Redistribution and use in source and binary forms, with or without
 # modification, are permitted provided that the following conditions are
diff -Nru orig/deps/v8/third_party/binutils/download.py patched/deps/v8/third_party/binutils/download.py
--- orig/deps/v8/third_party/binutils/download.py	2019-04-30 13:31:46.000000000 -0400
+++ patched/deps/v8/third_party/binutils/download.py	2021-03-10 05:44:54.329299737 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 # Copyright 2014 The Chromium Authors. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
diff -Nru orig/deps/v8/third_party/inspector_protocol/check_protocol_compatibility.py patched/deps/v8/third_party/inspector_protocol/check_protocol_compatibility.py
--- orig/deps/v8/third_party/inspector_protocol/check_protocol_compatibility.py	2019-04-30 13:31:46.000000000 -0400
+++ patched/deps/v8/third_party/inspector_protocol/check_protocol_compatibility.py	2021-03-10 05:44:54.329299737 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 # Copyright (c) 2011 Google Inc. All rights reserved.
 #
 # Redistribution and use in source and binary forms, with or without
diff -Nru orig/deps/v8/third_party/inspector_protocol/CheckProtocolCompatibility.py patched/deps/v8/third_party/inspector_protocol/CheckProtocolCompatibility.py
--- orig/deps/v8/third_party/inspector_protocol/CheckProtocolCompatibility.py	2019-04-30 13:31:46.000000000 -0400
+++ patched/deps/v8/third_party/inspector_protocol/CheckProtocolCompatibility.py	2021-03-10 05:44:54.329299737 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 # Copyright 2018 The Chromium Authors. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
diff -Nru orig/deps/v8/third_party/inspector_protocol/code_generator.py patched/deps/v8/third_party/inspector_protocol/code_generator.py
--- orig/deps/v8/third_party/inspector_protocol/code_generator.py	2019-04-30 13:31:46.000000000 -0400
+++ patched/deps/v8/third_party/inspector_protocol/code_generator.py	2021-03-10 05:44:54.329299737 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 # Copyright 2016 The Chromium Authors. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
diff -Nru orig/deps/v8/third_party/inspector_protocol/CodeGenerator.py patched/deps/v8/third_party/inspector_protocol/CodeGenerator.py
--- orig/deps/v8/third_party/inspector_protocol/CodeGenerator.py	2019-04-30 13:31:46.000000000 -0400
+++ patched/deps/v8/third_party/inspector_protocol/CodeGenerator.py	2021-03-10 05:44:54.329299737 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 # Copyright 2016 The Chromium Authors. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
diff -Nru orig/deps/v8/third_party/inspector_protocol/concatenate_protocols.py patched/deps/v8/third_party/inspector_protocol/concatenate_protocols.py
--- orig/deps/v8/third_party/inspector_protocol/concatenate_protocols.py	2019-04-30 13:31:46.000000000 -0400
+++ patched/deps/v8/third_party/inspector_protocol/concatenate_protocols.py	2021-03-10 05:44:54.329299737 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 # Copyright 2016 The Chromium Authors. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
diff -Nru orig/deps/v8/third_party/inspector_protocol/convert_protocol_to_json.py patched/deps/v8/third_party/inspector_protocol/convert_protocol_to_json.py
--- orig/deps/v8/third_party/inspector_protocol/convert_protocol_to_json.py	2019-04-30 13:31:46.000000000 -0400
+++ patched/deps/v8/third_party/inspector_protocol/convert_protocol_to_json.py	2021-03-10 05:44:54.329299737 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 # Copyright 2017 The Chromium Authors. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
diff -Nru orig/deps/v8/third_party/inspector_protocol/ConvertProtocolToJSON.py patched/deps/v8/third_party/inspector_protocol/ConvertProtocolToJSON.py
--- orig/deps/v8/third_party/inspector_protocol/ConvertProtocolToJSON.py	2019-04-30 13:31:46.000000000 -0400
+++ patched/deps/v8/third_party/inspector_protocol/ConvertProtocolToJSON.py	2021-03-10 05:44:54.329299737 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 # Copyright 2018 The Chromium Authors. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
diff -Nru orig/deps/v8/tools/adb-d8.py patched/deps/v8/tools/adb-d8.py
--- orig/deps/v8/tools/adb-d8.py	2019-04-30 13:31:46.000000000 -0400
+++ patched/deps/v8/tools/adb-d8.py	2021-03-10 05:44:54.329299737 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 
 # Copyright 2017 the V8 project authors. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
diff -Nru orig/deps/v8/tools/android-run.py patched/deps/v8/tools/android-run.py
--- orig/deps/v8/tools/android-run.py	2019-04-30 13:31:46.000000000 -0400
+++ patched/deps/v8/tools/android-run.py	2021-03-10 05:44:54.329299737 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 #
 # Copyright 2012 the V8 project authors. All rights reserved.
 # Redistribution and use in source and binary forms, with or without
diff -Nru orig/deps/v8/tools/bigint-tester.py patched/deps/v8/tools/bigint-tester.py
--- orig/deps/v8/tools/bigint-tester.py	2019-04-30 13:31:46.000000000 -0400
+++ patched/deps/v8/tools/bigint-tester.py	2021-03-10 05:44:54.329299737 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/python
+#!/usr/bin/python2
 # Copyright 2017 the V8 project authors. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
diff -Nru orig/deps/v8/tools/callstats.py patched/deps/v8/tools/callstats.py
--- orig/deps/v8/tools/callstats.py	2019-04-30 13:31:46.000000000 -0400
+++ patched/deps/v8/tools/callstats.py	2021-03-10 05:44:54.329299737 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 # Copyright 2016 the V8 project authors. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
diff -Nru orig/deps/v8/tools/clusterfuzz/v8_foozzie.py patched/deps/v8/tools/clusterfuzz/v8_foozzie.py
--- orig/deps/v8/tools/clusterfuzz/v8_foozzie.py	2019-04-30 13:31:46.000000000 -0400
+++ patched/deps/v8/tools/clusterfuzz/v8_foozzie.py	2021-03-10 05:44:54.333299729 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 # Copyright 2016 the V8 project authors. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
diff -Nru orig/deps/v8/tools/clusterfuzz/v8_foozzie_test.py patched/deps/v8/tools/clusterfuzz/v8_foozzie_test.py
--- orig/deps/v8/tools/clusterfuzz/v8_foozzie_test.py	2019-04-30 13:31:46.000000000 -0400
+++ patched/deps/v8/tools/clusterfuzz/v8_foozzie_test.py	2021-03-10 05:44:54.333299729 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 # Copyright 2016 the V8 project authors. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
diff -Nru orig/deps/v8/tools/concatenate-files.py patched/deps/v8/tools/concatenate-files.py
--- orig/deps/v8/tools/concatenate-files.py	2019-04-30 13:31:46.000000000 -0400
+++ patched/deps/v8/tools/concatenate-files.py	2021-03-10 05:44:54.333299729 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 #
 # Copyright 2014 the V8 project authors. All rights reserved.
 # Redistribution and use in source and binary forms, with or without
diff -Nru orig/deps/v8/tools/dev/gen-tags.py patched/deps/v8/tools/dev/gen-tags.py
--- orig/deps/v8/tools/dev/gen-tags.py	2019-04-30 13:31:46.000000000 -0400
+++ patched/deps/v8/tools/dev/gen-tags.py	2021-03-10 05:44:54.333299729 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 # Copyright 2017 the V8 project authors. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
diff -Nru orig/deps/v8/tools/dev/gm.py patched/deps/v8/tools/dev/gm.py
--- orig/deps/v8/tools/dev/gm.py	2019-04-30 13:31:46.000000000 -0400
+++ patched/deps/v8/tools/dev/gm.py	2021-03-10 05:44:54.333299729 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 # Copyright 2017 the V8 project authors. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
diff -Nru orig/deps/v8/tools/dev/v8gen.py patched/deps/v8/tools/dev/v8gen.py
--- orig/deps/v8/tools/dev/v8gen.py	2019-04-30 13:31:46.000000000 -0400
+++ patched/deps/v8/tools/dev/v8gen.py	2021-03-10 05:44:54.333299729 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 # Copyright 2016 the V8 project authors. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
diff -Nru orig/deps/v8/tools/disasm.py patched/deps/v8/tools/disasm.py
--- orig/deps/v8/tools/disasm.py	2019-04-30 13:31:46.000000000 -0400
+++ patched/deps/v8/tools/disasm.py	2021-03-10 05:44:54.333299729 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 #
 # Copyright 2011 the V8 project authors. All rights reserved.
 # Redistribution and use in source and binary forms, with or without
diff -Nru orig/deps/v8/tools/dump-cpp.py patched/deps/v8/tools/dump-cpp.py
--- orig/deps/v8/tools/dump-cpp.py	2019-04-30 13:31:46.000000000 -0400
+++ patched/deps/v8/tools/dump-cpp.py	2021-03-10 05:44:54.333299729 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 # Copyright 2016 the V8 project authors. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
diff -Nru orig/deps/v8/tools/eval_gc_nvp.py patched/deps/v8/tools/eval_gc_nvp.py
--- orig/deps/v8/tools/eval_gc_nvp.py	2019-04-30 13:31:46.000000000 -0400
+++ patched/deps/v8/tools/eval_gc_nvp.py	2021-03-10 05:44:54.333299729 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 #
 # Copyright 2015 the V8 project authors. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
diff -Nru orig/deps/v8/tools/find-commit-for-patch.py patched/deps/v8/tools/find-commit-for-patch.py
--- orig/deps/v8/tools/find-commit-for-patch.py	2019-04-30 13:31:46.000000000 -0400
+++ patched/deps/v8/tools/find-commit-for-patch.py	2021-03-10 05:44:54.333299729 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 # Copyright 2014 the V8 project authors. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
diff -Nru orig/deps/v8/tools/gcmole/parallel.py patched/deps/v8/tools/gcmole/parallel.py
--- orig/deps/v8/tools/gcmole/parallel.py	2019-04-30 13:31:46.000000000 -0400
+++ patched/deps/v8/tools/gcmole/parallel.py	2021-03-10 05:44:54.333299729 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 # Copyright 2015 the V8 project authors. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
diff -Nru orig/deps/v8/tools/gcmole/run-gcmole.py patched/deps/v8/tools/gcmole/run-gcmole.py
--- orig/deps/v8/tools/gcmole/run-gcmole.py	2019-04-30 13:31:46.000000000 -0400
+++ patched/deps/v8/tools/gcmole/run-gcmole.py	2021-03-10 05:44:54.333299729 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 # Copyright 2016 the V8 project authors. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
diff -Nru orig/deps/v8/tools/gc-nvp-to-csv.py patched/deps/v8/tools/gc-nvp-to-csv.py
--- orig/deps/v8/tools/gc-nvp-to-csv.py	2019-04-30 13:31:46.000000000 -0400
+++ patched/deps/v8/tools/gc-nvp-to-csv.py	2021-03-10 05:44:54.333299729 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 #
 # Copyright 2015 the V8 project authors. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
diff -Nru orig/deps/v8/tools/gc-nvp-trace-processor.py patched/deps/v8/tools/gc-nvp-trace-processor.py
--- orig/deps/v8/tools/gc-nvp-trace-processor.py	2019-04-30 13:31:46.000000000 -0400
+++ patched/deps/v8/tools/gc-nvp-trace-processor.py	2021-03-10 05:44:54.333299729 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 #
 # Copyright 2010 the V8 project authors. All rights reserved.
 # Redistribution and use in source and binary forms, with or without
diff -Nru orig/deps/v8/tools/generate-builtins-tests.py patched/deps/v8/tools/generate-builtins-tests.py
--- orig/deps/v8/tools/generate-builtins-tests.py	2019-04-30 13:31:46.000000000 -0400
+++ patched/deps/v8/tools/generate-builtins-tests.py	2021-03-10 05:44:54.333299729 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 # Copyright 2014 the V8 project authors. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
diff -Nru orig/deps/v8/tools/generate-header-include-checks.py patched/deps/v8/tools/generate-header-include-checks.py
--- orig/deps/v8/tools/generate-header-include-checks.py	2019-04-30 13:31:46.000000000 -0400
+++ patched/deps/v8/tools/generate-header-include-checks.py	2021-03-10 05:44:54.333299729 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 # vim:fenc=utf-8:shiftwidth=2
 
 # Copyright 2018 the V8 project authors. All rights reserved.
diff -Nru orig/deps/v8/tools/generate_shim_headers/generate_shim_headers.py patched/deps/v8/tools/generate_shim_headers/generate_shim_headers.py
--- orig/deps/v8/tools/generate_shim_headers/generate_shim_headers.py	2019-04-30 13:31:46.000000000 -0400
+++ patched/deps/v8/tools/generate_shim_headers/generate_shim_headers.py	2021-03-10 05:44:54.333299729 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 #
 # Copyright 2013 the V8 project authors. All rights reserved.
 # Redistribution and use in source and binary forms, with or without
diff -Nru orig/deps/v8/tools/gen-postmortem-metadata.py patched/deps/v8/tools/gen-postmortem-metadata.py
--- orig/deps/v8/tools/gen-postmortem-metadata.py	2019-04-30 13:31:46.000000000 -0400
+++ patched/deps/v8/tools/gen-postmortem-metadata.py	2021-03-10 05:44:54.333299729 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 
 #
 # Copyright 2012 the V8 project authors. All rights reserved.
diff -Nru orig/deps/v8/tools/get_landmines.py patched/deps/v8/tools/get_landmines.py
--- orig/deps/v8/tools/get_landmines.py	2019-04-30 13:31:46.000000000 -0400
+++ patched/deps/v8/tools/get_landmines.py	2021-03-10 05:44:54.333299729 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 # Copyright 2014 the V8 project authors. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
diff -Nru orig/deps/v8/tools/grokdump.py patched/deps/v8/tools/grokdump.py
--- orig/deps/v8/tools/grokdump.py	2019-04-30 13:31:46.000000000 -0400
+++ patched/deps/v8/tools/grokdump.py	2021-03-10 05:44:54.333299729 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 #
 # Copyright 2012 the V8 project authors. All rights reserved.
 # Redistribution and use in source and binary forms, with or without
diff -Nru orig/deps/v8/tools/js2c.py patched/deps/v8/tools/js2c.py
--- orig/deps/v8/tools/js2c.py	2019-04-30 13:31:46.000000000 -0400
+++ patched/deps/v8/tools/js2c.py	2021-03-10 05:44:54.333299729 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 #
 # Copyright 2012 the V8 project authors. All rights reserved.
 # Redistribution and use in source and binary forms, with or without
diff -Nru orig/deps/v8/tools/jsmin.py patched/deps/v8/tools/jsmin.py
--- orig/deps/v8/tools/jsmin.py	2019-04-30 13:31:46.000000000 -0400
+++ patched/deps/v8/tools/jsmin.py	2021-03-10 05:44:54.333299729 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/python2.4
+#!/usr/bin/python2
 
 # Copyright 2012 the V8 project authors. All rights reserved.
 # Redistribution and use in source and binary forms, with or without
diff -Nru orig/deps/v8/tools/ll_prof.py patched/deps/v8/tools/ll_prof.py
--- orig/deps/v8/tools/ll_prof.py	2019-04-30 13:31:46.000000000 -0400
+++ patched/deps/v8/tools/ll_prof.py	2021-03-10 05:44:54.333299729 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 #
 # Copyright 2012 the V8 project authors. All rights reserved.
 # Redistribution and use in source and binary forms, with or without
diff -Nru orig/deps/v8/tools/mb/mb.py patched/deps/v8/tools/mb/mb.py
--- orig/deps/v8/tools/mb/mb.py	2019-04-30 13:31:46.000000000 -0400
+++ patched/deps/v8/tools/mb/mb.py	2021-03-10 05:44:54.333299729 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 # Copyright 2016 the V8 project authors. All rights reserved.
 # Copyright 2015 The Chromium Authors. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
@@ -1092,7 +1092,7 @@
     print_env('LLVM_FORCE_HEAD_REVISION')
 
     if cmd[0] == self.executable:
-      cmd = ['python'] + cmd[1:]
+      cmd = ['python2'] + cmd[1:]
     self.Print(*[shell_quoter(arg) for arg in cmd])
 
   def PrintJSON(self, obj):
diff -Nru orig/deps/v8/tools/mb/mb_unittest.py patched/deps/v8/tools/mb/mb_unittest.py
--- orig/deps/v8/tools/mb/mb_unittest.py	2019-04-30 13:31:46.000000000 -0400
+++ patched/deps/v8/tools/mb/mb_unittest.py	2021-03-10 05:44:54.333299729 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/python
+#!/usr/bin/python2
 # Copyright 2016 the V8 project authors. All rights reserved.
 # Copyright 2015 The Chromium Authors. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
diff -Nru orig/deps/v8/tools/node/backport_node.py patched/deps/v8/tools/node/backport_node.py
--- orig/deps/v8/tools/node/backport_node.py	2019-04-30 13:31:46.000000000 -0400
+++ patched/deps/v8/tools/node/backport_node.py	2021-03-10 05:44:54.333299729 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 # Copyright 2017 the V8 project authors. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
diff -Nru orig/deps/v8/tools/node/build_gn.py patched/deps/v8/tools/node/build_gn.py
--- orig/deps/v8/tools/node/build_gn.py	2019-04-30 13:31:46.000000000 -0400
+++ patched/deps/v8/tools/node/build_gn.py	2021-03-10 05:44:54.333299729 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 # Copyright 2017 the V8 project authors. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
diff -Nru orig/deps/v8/tools/node/fetch_deps.py patched/deps/v8/tools/node/fetch_deps.py
--- orig/deps/v8/tools/node/fetch_deps.py	2019-04-30 13:31:46.000000000 -0400
+++ patched/deps/v8/tools/node/fetch_deps.py	2021-03-10 05:44:54.337299721 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 # Copyright 2017 the V8 project authors. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
diff -Nru orig/deps/v8/tools/node/node_common.py patched/deps/v8/tools/node/node_common.py
--- orig/deps/v8/tools/node/node_common.py	2019-04-30 13:31:46.000000000 -0400
+++ patched/deps/v8/tools/node/node_common.py	2021-03-10 05:44:54.337299721 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 # Copyright 2017 the V8 project authors. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
diff -Nru orig/deps/v8/tools/node/test_backport_node.py patched/deps/v8/tools/node/test_backport_node.py
--- orig/deps/v8/tools/node/test_backport_node.py	2019-04-30 13:31:46.000000000 -0400
+++ patched/deps/v8/tools/node/test_backport_node.py	2021-03-10 05:44:54.337299721 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 # Copyright 2017 the V8 project authors. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
diff -Nru orig/deps/v8/tools/node/test_update_node.py patched/deps/v8/tools/node/test_update_node.py
--- orig/deps/v8/tools/node/test_update_node.py	2019-04-30 13:31:46.000000000 -0400
+++ patched/deps/v8/tools/node/test_update_node.py	2021-03-10 05:44:54.337299721 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 # Copyright 2017 the V8 project authors. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
diff -Nru orig/deps/v8/tools/node/update_node.py patched/deps/v8/tools/node/update_node.py
--- orig/deps/v8/tools/node/update_node.py	2019-04-30 13:31:46.000000000 -0400
+++ patched/deps/v8/tools/node/update_node.py	2021-03-10 05:44:54.337299721 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 # Copyright 2017 the V8 project authors. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
diff -Nru orig/deps/v8/tools/objdump-v8 patched/deps/v8/tools/objdump-v8
--- orig/deps/v8/tools/objdump-v8	2019-04-30 13:31:46.000000000 -0400
+++ patched/deps/v8/tools/objdump-v8	2021-03-10 05:44:54.337299721 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 #
 # Copyright 2016 the V8 project authors. All rights reserved.
 # Redistribution and use in source and binary forms, with or without
diff -Nru orig/deps/v8/tools/perf-compare.py patched/deps/v8/tools/perf-compare.py
--- orig/deps/v8/tools/perf-compare.py	2019-04-30 13:31:46.000000000 -0400
+++ patched/deps/v8/tools/perf-compare.py	2021-03-10 05:44:54.337299721 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 # Copyright 2017 the V8 project authors. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
diff -Nru orig/deps/v8/tools/perf-to-html.py patched/deps/v8/tools/perf-to-html.py
--- orig/deps/v8/tools/perf-to-html.py	2019-04-30 13:31:46.000000000 -0400
+++ patched/deps/v8/tools/perf-to-html.py	2021-03-10 05:44:54.337299721 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 # Copyright 2015 the V8 project authors. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
diff -Nru orig/deps/v8/tools/predictable_wrapper.py patched/deps/v8/tools/predictable_wrapper.py
--- orig/deps/v8/tools/predictable_wrapper.py	2019-04-30 13:31:46.000000000 -0400
+++ patched/deps/v8/tools/predictable_wrapper.py	2021-03-10 05:44:54.337299721 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 # Copyright 2017 the V8 project authors. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
diff -Nru orig/deps/v8/tools/release/auto_push.py patched/deps/v8/tools/release/auto_push.py
--- orig/deps/v8/tools/release/auto_push.py	2019-04-30 13:31:46.000000000 -0400
+++ patched/deps/v8/tools/release/auto_push.py	2021-03-10 05:44:54.337299721 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 # Copyright 2013 the V8 project authors. All rights reserved.
 # Redistribution and use in source and binary forms, with or without
 # modification, are permitted provided that the following conditions are
diff -Nru orig/deps/v8/tools/release/auto_roll.py patched/deps/v8/tools/release/auto_roll.py
--- orig/deps/v8/tools/release/auto_roll.py	2019-04-30 13:31:46.000000000 -0400
+++ patched/deps/v8/tools/release/auto_roll.py	2021-03-10 05:44:54.337299721 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 # Copyright 2014 the V8 project authors. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
diff -Nru orig/deps/v8/tools/release/auto_tag.py patched/deps/v8/tools/release/auto_tag.py
--- orig/deps/v8/tools/release/auto_tag.py	2019-04-30 13:31:46.000000000 -0400
+++ patched/deps/v8/tools/release/auto_tag.py	2021-03-10 05:44:54.337299721 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 # Copyright 2014 the V8 project authors. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
diff -Nru orig/deps/v8/tools/release/check_clusterfuzz.py patched/deps/v8/tools/release/check_clusterfuzz.py
--- orig/deps/v8/tools/release/check_clusterfuzz.py	2019-04-30 13:31:46.000000000 -0400
+++ patched/deps/v8/tools/release/check_clusterfuzz.py	2021-03-10 05:44:54.337299721 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 # Copyright 2014 the V8 project authors. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
diff -Nru orig/deps/v8/tools/release/common_includes.py patched/deps/v8/tools/release/common_includes.py
--- orig/deps/v8/tools/release/common_includes.py	2019-04-30 13:31:46.000000000 -0400
+++ patched/deps/v8/tools/release/common_includes.py	2021-03-10 05:44:54.337299721 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 # Copyright 2013 the V8 project authors. All rights reserved.
 # Redistribution and use in source and binary forms, with or without
 # modification, are permitted provided that the following conditions are
diff -Nru orig/deps/v8/tools/release/create_release.py patched/deps/v8/tools/release/create_release.py
--- orig/deps/v8/tools/release/create_release.py	2019-04-30 13:31:46.000000000 -0400
+++ patched/deps/v8/tools/release/create_release.py	2021-03-10 05:44:54.337299721 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 # Copyright 2015 the V8 project authors. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
diff -Nru orig/deps/v8/tools/release/filter_build_files.py patched/deps/v8/tools/release/filter_build_files.py
--- orig/deps/v8/tools/release/filter_build_files.py	2019-04-30 13:31:46.000000000 -0400
+++ patched/deps/v8/tools/release/filter_build_files.py	2021-03-10 05:44:54.337299721 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 # Copyright 2017 the V8 project authors. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
diff -Nru orig/deps/v8/tools/release/git_recipes.py patched/deps/v8/tools/release/git_recipes.py
--- orig/deps/v8/tools/release/git_recipes.py	2019-04-30 13:31:46.000000000 -0400
+++ patched/deps/v8/tools/release/git_recipes.py	2021-03-10 05:44:54.337299721 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 # Copyright 2014 the V8 project authors. All rights reserved.
 # Redistribution and use in source and binary forms, with or without
 # modification, are permitted provided that the following conditions are
diff -Nru orig/deps/v8/tools/release/mergeinfo.py patched/deps/v8/tools/release/mergeinfo.py
--- orig/deps/v8/tools/release/mergeinfo.py	2019-04-30 13:31:46.000000000 -0400
+++ patched/deps/v8/tools/release/mergeinfo.py	2021-03-10 05:44:54.337299721 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 # Copyright 2015 the V8 project authors. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
diff -Nru orig/deps/v8/tools/release/merge_to_branch.py patched/deps/v8/tools/release/merge_to_branch.py
--- orig/deps/v8/tools/release/merge_to_branch.py	2019-04-30 13:31:46.000000000 -0400
+++ patched/deps/v8/tools/release/merge_to_branch.py	2021-03-10 05:44:54.337299721 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 # Copyright 2014 the V8 project authors. All rights reserved.
 # Redistribution and use in source and binary forms, with or without
 # modification, are permitted provided that the following conditions are
diff -Nru orig/deps/v8/tools/release/push_to_candidates.py patched/deps/v8/tools/release/push_to_candidates.py
--- orig/deps/v8/tools/release/push_to_candidates.py	2019-04-30 13:31:46.000000000 -0400
+++ patched/deps/v8/tools/release/push_to_candidates.py	2021-03-10 05:44:54.337299721 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 # Copyright 2013 the V8 project authors. All rights reserved.
 # Redistribution and use in source and binary forms, with or without
 # modification, are permitted provided that the following conditions are
diff -Nru orig/deps/v8/tools/release/roll_merge.py patched/deps/v8/tools/release/roll_merge.py
--- orig/deps/v8/tools/release/roll_merge.py	2019-04-30 13:31:46.000000000 -0400
+++ patched/deps/v8/tools/release/roll_merge.py	2021-03-10 05:44:54.337299721 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 # Copyright 2014 the V8 project authors. All rights reserved.
 # Redistribution and use in source and binary forms, with or without
 # modification, are permitted provided that the following conditions are
diff -Nru orig/deps/v8/tools/release/script_test.py patched/deps/v8/tools/release/script_test.py
--- orig/deps/v8/tools/release/script_test.py	2019-04-30 13:31:46.000000000 -0400
+++ patched/deps/v8/tools/release/script_test.py	2021-03-10 05:44:54.337299721 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 # Copyright 2014 the V8 project authors. All rights reserved.
 # Redistribution and use in source and binary forms, with or without
 # modification, are permitted provided that the following conditions are
diff -Nru orig/deps/v8/tools/release/search_related_commits.py patched/deps/v8/tools/release/search_related_commits.py
--- orig/deps/v8/tools/release/search_related_commits.py	2019-04-30 13:31:46.000000000 -0400
+++ patched/deps/v8/tools/release/search_related_commits.py	2021-03-10 05:44:54.337299721 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 # Copyright 2015 the V8 project authors. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
diff -Nru orig/deps/v8/tools/release/test_mergeinfo.py patched/deps/v8/tools/release/test_mergeinfo.py
--- orig/deps/v8/tools/release/test_mergeinfo.py	2019-04-30 13:31:46.000000000 -0400
+++ patched/deps/v8/tools/release/test_mergeinfo.py	2021-03-10 05:44:54.337299721 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 # Copyright 2015 the V8 project authors. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
diff -Nru orig/deps/v8/tools/release/test_scripts.py patched/deps/v8/tools/release/test_scripts.py
--- orig/deps/v8/tools/release/test_scripts.py	2019-04-30 13:31:46.000000000 -0400
+++ patched/deps/v8/tools/release/test_scripts.py	2021-03-10 05:44:54.337299721 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 # Copyright 2013 the V8 project authors. All rights reserved.
 # Redistribution and use in source and binary forms, with or without
 # modification, are permitted provided that the following conditions are
diff -Nru orig/deps/v8/tools/release/test_search_related_commits.py patched/deps/v8/tools/release/test_search_related_commits.py
--- orig/deps/v8/tools/release/test_search_related_commits.py	2019-04-30 13:31:46.000000000 -0400
+++ patched/deps/v8/tools/release/test_search_related_commits.py	2021-03-10 05:44:54.337299721 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 # Copyright 2015 the V8 project authors. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
diff -Nru orig/deps/v8/tools/run-num-fuzzer.py patched/deps/v8/tools/run-num-fuzzer.py
--- orig/deps/v8/tools/run-num-fuzzer.py	2019-04-30 13:31:46.000000000 -0400
+++ patched/deps/v8/tools/run-num-fuzzer.py	2021-03-10 05:44:54.337299721 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 #
 # Copyright 2018 the V8 project authors. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
diff -Nru orig/deps/v8/tools/run_perf.py patched/deps/v8/tools/run_perf.py
--- orig/deps/v8/tools/run_perf.py	2019-04-30 13:31:46.000000000 -0400
+++ patched/deps/v8/tools/run_perf.py	2021-03-10 05:44:54.337299721 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 # Copyright 2014 the V8 project authors. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
diff -Nru orig/deps/v8/tools/run.py patched/deps/v8/tools/run.py
--- orig/deps/v8/tools/run.py	2019-04-30 13:31:46.000000000 -0400
+++ patched/deps/v8/tools/run.py	2021-03-10 05:44:54.337299721 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 # Copyright 2014 the V8 project authors. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
diff -Nru orig/deps/v8/tools/sanitizers/sancov_formatter.py patched/deps/v8/tools/sanitizers/sancov_formatter.py
--- orig/deps/v8/tools/sanitizers/sancov_formatter.py	2019-04-30 13:31:46.000000000 -0400
+++ patched/deps/v8/tools/sanitizers/sancov_formatter.py	2021-03-10 05:44:54.337299721 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 # Copyright 2016 the V8 project authors. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
diff -Nru orig/deps/v8/tools/sanitizers/sancov_merger.py patched/deps/v8/tools/sanitizers/sancov_merger.py
--- orig/deps/v8/tools/sanitizers/sancov_merger.py	2019-04-30 13:31:46.000000000 -0400
+++ patched/deps/v8/tools/sanitizers/sancov_merger.py	2021-03-10 05:44:54.337299721 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 # Copyright 2016 the V8 project authors. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
diff -Nru orig/deps/v8/tools/sanitizers/sanitize_pcs.py patched/deps/v8/tools/sanitizers/sanitize_pcs.py
--- orig/deps/v8/tools/sanitizers/sanitize_pcs.py	2019-04-30 13:31:46.000000000 -0400
+++ patched/deps/v8/tools/sanitizers/sanitize_pcs.py	2021-03-10 05:44:54.341299713 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 # Copyright 2016 the V8 project authors. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
diff -Nru orig/deps/v8/tools/stats-viewer.py patched/deps/v8/tools/stats-viewer.py
--- orig/deps/v8/tools/stats-viewer.py	2019-04-30 13:31:46.000000000 -0400
+++ patched/deps/v8/tools/stats-viewer.py	2021-03-10 05:44:54.341299713 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 #
 # Copyright 2008 the V8 project authors. All rights reserved.
 # Redistribution and use in source and binary forms, with or without
diff -Nru orig/deps/v8/tools/testrunner/local/pool.py patched/deps/v8/tools/testrunner/local/pool.py
--- orig/deps/v8/tools/testrunner/local/pool.py	2019-04-30 13:31:46.000000000 -0400
+++ patched/deps/v8/tools/testrunner/local/pool.py	2021-03-10 05:44:54.341299713 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 # Copyright 2014 the V8 project authors. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
diff -Nru orig/deps/v8/tools/testrunner/local/pool_unittest.py patched/deps/v8/tools/testrunner/local/pool_unittest.py
--- orig/deps/v8/tools/testrunner/local/pool_unittest.py	2019-04-30 13:31:46.000000000 -0400
+++ patched/deps/v8/tools/testrunner/local/pool_unittest.py	2021-03-10 05:44:54.341299713 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 # Copyright 2014 the V8 project authors. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
diff -Nru orig/deps/v8/tools/testrunner/local/statusfile_unittest.py patched/deps/v8/tools/testrunner/local/statusfile_unittest.py
--- orig/deps/v8/tools/testrunner/local/statusfile_unittest.py	2019-04-30 13:31:46.000000000 -0400
+++ patched/deps/v8/tools/testrunner/local/statusfile_unittest.py	2021-03-10 05:44:54.341299713 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 # Copyright 2016 the V8 project authors. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
diff -Nru orig/deps/v8/tools/testrunner/local/testsuite_unittest.py patched/deps/v8/tools/testrunner/local/testsuite_unittest.py
--- orig/deps/v8/tools/testrunner/local/testsuite_unittest.py	2019-04-30 13:31:46.000000000 -0400
+++ patched/deps/v8/tools/testrunner/local/testsuite_unittest.py	2021-03-10 05:44:54.341299713 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 # Copyright 2016 the V8 project authors. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
diff -Nru orig/deps/v8/tools/testrunner/num_fuzzer.py patched/deps/v8/tools/testrunner/num_fuzzer.py
--- orig/deps/v8/tools/testrunner/num_fuzzer.py	2019-04-30 13:31:46.000000000 -0400
+++ patched/deps/v8/tools/testrunner/num_fuzzer.py	2021-03-10 05:44:54.341299713 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 #
 # Copyright 2017 the V8 project authors. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
diff -Nru orig/deps/v8/tools/testrunner/standard_runner.py patched/deps/v8/tools/testrunner/standard_runner.py
--- orig/deps/v8/tools/testrunner/standard_runner.py	2019-04-30 13:31:46.000000000 -0400
+++ patched/deps/v8/tools/testrunner/standard_runner.py	2021-03-10 05:44:54.341299713 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 #
 # Copyright 2017 the V8 project authors. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
diff -Nru orig/deps/v8/tools/torque/format-torque.py patched/deps/v8/tools/torque/format-torque.py
--- orig/deps/v8/tools/torque/format-torque.py	2019-04-30 13:31:46.000000000 -0400
+++ patched/deps/v8/tools/torque/format-torque.py	2021-03-10 05:44:54.341299713 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 # Copyright 2014 the V8 project authors. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
diff -Nru orig/deps/v8/tools/torque/make-torque-parser.py patched/deps/v8/tools/torque/make-torque-parser.py
--- orig/deps/v8/tools/torque/make-torque-parser.py	2019-04-30 13:31:46.000000000 -0400
+++ patched/deps/v8/tools/torque/make-torque-parser.py	2021-03-10 05:44:54.341299713 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 # Copyright 2014 the V8 project authors. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
diff -Nru orig/deps/v8/tools/trace-maps-processor.py patched/deps/v8/tools/trace-maps-processor.py
--- orig/deps/v8/tools/trace-maps-processor.py	2019-04-30 13:31:46.000000000 -0400
+++ patched/deps/v8/tools/trace-maps-processor.py	2021-03-10 05:44:54.341299713 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 # Copyright 2014 the V8 project authors. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
diff -Nru orig/deps/v8/tools/try_perf.py patched/deps/v8/tools/try_perf.py
--- orig/deps/v8/tools/try_perf.py	2019-04-30 13:31:46.000000000 -0400
+++ patched/deps/v8/tools/try_perf.py	2021-03-10 05:44:54.341299713 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 # Copyright 2014 the V8 project authors. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
diff -Nru orig/deps/v8/tools/unittests/predictable_wrapper_test.py patched/deps/v8/tools/unittests/predictable_wrapper_test.py
--- orig/deps/v8/tools/unittests/predictable_wrapper_test.py	2019-04-30 13:31:47.000000000 -0400
+++ patched/deps/v8/tools/unittests/predictable_wrapper_test.py	2021-03-10 05:44:54.341299713 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 # Copyright 2017 the V8 project authors. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
diff -Nru orig/deps/v8/tools/unittests/run_perf_test.py patched/deps/v8/tools/unittests/run_perf_test.py
--- orig/deps/v8/tools/unittests/run_perf_test.py	2019-04-30 13:31:47.000000000 -0400
+++ patched/deps/v8/tools/unittests/run_perf_test.py	2021-03-10 05:44:54.341299713 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 # Copyright 2014 the V8 project authors. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
diff -Nru orig/deps/v8/tools/unittests/run_tests_test.py patched/deps/v8/tools/unittests/run_tests_test.py
--- orig/deps/v8/tools/unittests/run_tests_test.py	2019-04-30 13:31:47.000000000 -0400
+++ patched/deps/v8/tools/unittests/run_tests_test.py	2021-03-10 05:44:54.341299713 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 # Copyright 2017 the V8 project authors. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
diff -Nru orig/deps/v8/tools/unittests/testdata/d8_mocked1.py patched/deps/v8/tools/unittests/testdata/d8_mocked1.py
--- orig/deps/v8/tools/unittests/testdata/d8_mocked1.py	2019-04-30 13:31:47.000000000 -0400
+++ patched/deps/v8/tools/unittests/testdata/d8_mocked1.py	2021-03-10 05:44:54.341299713 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 # Copyright 2017 the V8 project authors. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
diff -Nru orig/deps/v8/tools/unittests/testdata/d8_mocked2.py patched/deps/v8/tools/unittests/testdata/d8_mocked2.py
--- orig/deps/v8/tools/unittests/testdata/d8_mocked2.py	2019-04-30 13:31:47.000000000 -0400
+++ patched/deps/v8/tools/unittests/testdata/d8_mocked2.py	2021-03-10 05:44:54.341299713 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 # Copyright 2017 the V8 project authors. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
diff -Nru orig/deps/v8/tools/unittests/testdata/predictable_mocked.py patched/deps/v8/tools/unittests/testdata/predictable_mocked.py
--- orig/deps/v8/tools/unittests/testdata/predictable_mocked.py	2019-04-30 13:31:47.000000000 -0400
+++ patched/deps/v8/tools/unittests/testdata/predictable_mocked.py	2021-03-10 05:44:54.341299713 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 # Copyright 2017 the V8 project authors. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
diff -Nru orig/deps/v8/tools/unittests/testdata/results_processor.py patched/deps/v8/tools/unittests/testdata/results_processor.py
--- orig/deps/v8/tools/unittests/testdata/results_processor.py	2019-04-30 13:31:47.000000000 -0400
+++ patched/deps/v8/tools/unittests/testdata/results_processor.py	2021-03-10 05:44:54.341299713 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 # Copyright 2017 the V8 project authors. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
diff -Nru orig/deps/v8/tools/v8_presubmit.py patched/deps/v8/tools/v8_presubmit.py
--- orig/deps/v8/tools/v8_presubmit.py	2019-04-30 13:31:47.000000000 -0400
+++ patched/deps/v8/tools/v8_presubmit.py	2021-03-10 05:44:54.341299713 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 #
 # Copyright 2012 the V8 project authors. All rights reserved.
 # Redistribution and use in source and binary forms, with or without
diff -Nru orig/node.gyp patched/node.gyp
--- orig/node.gyp	2019-04-30 13:31:48.000000000 -0400
+++ patched/node.gyp	2021-03-10 05:44:54.341299713 -0500
@@ -339,9 +339,9 @@
           'conditions': [
             ['OS=="win"', {
               'libraries': [
-                'dbghelp.lib',
-                'PsApi.lib',
-                'Ws2_32.lib',
+                'dbghelp',
+                'psapi',
+                'ws2_32',
               ],
               'dll_files': [
                 'dbghelp.dll',
@@ -586,7 +586,7 @@
               ],
             }],
           ],
-          'libraries': [ '-lpsapi.lib' ]
+          'libraries': [ '-municode', '-lpsapi' ]
         }],
         [ 'node_use_etw=="true"', {
           'defines': [ 'HAVE_ETW=1' ],
@@ -682,9 +682,9 @@
           'conditions': [
             ['OS=="win"', {
               'libraries': [
-                'dbghelp.lib',
-                'PsApi.lib',
-                'Ws2_32.lib',
+                'dbghelp',
+                'psapi',
+                'ws2_32',
               ],
               'dll_files': [
                 'dbghelp.dll',
@@ -738,7 +738,7 @@
               'outputs': ['<(SHARED_INTERMEDIATE_DIR)/openssl.def'],
               'process_outputs_as_sources': 1,
               'action': [
-                'python',
+                'python2',
                 'tools/mkssldef.py',
                 '<@(mkssldef_flags)',
                 '-o',
@@ -773,7 +773,7 @@
             }]
           ],
           'action': [
-            'python', 'tools/js2c.py',
+            'python2', 'tools/js2c.py',
             '<@(_outputs)',
             '<@(_inputs)',
           ],
@@ -993,7 +993,8 @@
         '<(SHARED_INTERMEDIATE_DIR)', # for node_natives.h
       ],
 
-      'defines': [ 'NODE_WANT_INTERNALS=1' ],
+      'defines': [ 'NODE_WANT_INTERNALS=1', '_UNICODE=1', 'UNICODE' ],
+      'libraries': [ '-municode' ],
 
       'sources': [
         'test/cctest/node_test_fixture.cc',
@@ -1047,9 +1048,9 @@
           'conditions': [
             ['OS=="win"', {
               'libraries': [
-                'dbghelp.lib',
-                'PsApi.lib',
-                'Ws2_32.lib',
+                'dbghelp',
+                'psapi',
+                'ws2_32',
               ],
               'dll_files': [
                 'dbghelp.dll',
diff -Nru orig/node.gypi patched/node.gypi
--- orig/node.gypi	2019-04-30 13:31:48.000000000 -0400
+++ patched/node.gypi	2021-03-10 05:44:54.341299713 -0500
@@ -55,6 +55,7 @@
       'defines!': [
         'NODE_PLATFORM="win"',
       ],
+      'defines': [ '_WIN32_WINNT=0x0601' ],
       'defines': [
         'FD_SETSIZE=1024',
         # we need to use node's preferred "win32" rather than gyp's preferred "win"
@@ -64,6 +65,7 @@
         # but we still inherit it from uv.h.
         'NOMINMAX',
         '_UNICODE=1',
+        'UNICODE',
       ],
     }, { # POSIX
       'defines': [ '__POSIX__' ],
diff -Nru orig/node.gypi.orig patched/node.gypi.orig
--- orig/node.gypi.orig	1969-12-31 19:00:00.000000000 -0500
+++ patched/node.gypi.orig	2021-03-10 05:44:54.341299713 -0500
@@ -0,0 +1,375 @@
+{
+  # 'force_load' means to include the static libs into the shared lib or
+  # executable. Therefore, it is enabled when building:
+  # 1. The executable and it uses static lib (cctest and node)
+  # 2. The shared lib
+  # Linker optimizes out functions that are not used. When force_load=true,
+  # --whole-archive,force_load and /WHOLEARCHIVE are used to include
+  # all obj files in static libs into the executable or shared lib.
+  'variables': {
+    'variables': {
+      'variables': {
+        'force_load%': 'true',
+        'current_type%': '<(_type)',
+      },
+      'force_load%': '<(force_load)',
+      'conditions': [
+        ['current_type=="static_library"', {
+          'force_load': 'false',
+        }],
+        [ 'current_type=="executable" and node_target_type=="shared_library"', {
+          'force_load': 'false',
+        }]
+      ],
+    },
+    'force_load%': '<(force_load)',
+  },
+  # Putting these explicitly here so not to be dependant on common.gypi.
+  'cflags': [ '-Wall', '-Wextra', '-Wno-unused-parameter', ],
+  'xcode_settings': {
+    'WARNING_CFLAGS': [
+      '-Wall',
+      '-Wendif-labels',
+      '-W',
+      '-Wno-unused-parameter',
+      '-Werror=undefined-inline',
+    ],
+  },
+  'conditions': [
+    ['clang==1', {
+      'cflags': [ '-Werror=undefined-inline', ]
+    }],
+    [ 'node_shared=="false"', {
+      'msvs_settings': {
+        'VCManifestTool': {
+          'EmbedManifest': 'true',
+          'AdditionalManifestFiles': 'src/res/node.exe.extra.manifest'
+        }
+      },
+    }, {
+      'defines': [
+        'NODE_SHARED_MODE',
+      ],
+    }],
+    [ 'OS=="win"', {
+      'defines!': [
+        'NODE_PLATFORM="win"',
+      ],
+      'defines': [
+        'FD_SETSIZE=1024',
+        # we need to use node's preferred "win32" rather than gyp's preferred "win"
+        'NODE_PLATFORM="win32"',
+        # Stop <windows.h> from defining macros that conflict with
+        # std::min() and std::max().  We don't use <windows.h> (much)
+        # but we still inherit it from uv.h.
+        'NOMINMAX',
+        '_UNICODE=1',
+      ],
+    }, { # POSIX
+      'defines': [ '__POSIX__' ],
+    }],
+
+    [ 'node_enable_d8=="true"', {
+      'dependencies': [ 'deps/v8/gypfiles/d8.gyp:d8' ],
+    }],
+    [ 'node_use_bundled_v8=="true"', {
+      'conditions': [
+        [ 'build_v8_with_gn=="true"', {
+          'dependencies': ['deps/v8/gypfiles/v8-monolithic.gyp:v8_monolith'],
+        }, {
+          'dependencies': [
+            'deps/v8/gypfiles/v8.gyp:v8',
+            'deps/v8/gypfiles/v8.gyp:v8_libplatform',
+          ],
+        }],
+      ],
+    }],
+    [ 'node_use_v8_platform=="true"', {
+      'defines': [
+        'NODE_USE_V8_PLATFORM=1',
+      ],
+    }, {
+      'defines': [
+        'NODE_USE_V8_PLATFORM=0',
+      ],
+    }],
+    [ 'node_tag!=""', {
+      'defines': [ 'NODE_TAG="<(node_tag)"' ],
+    }],
+    [ 'node_v8_options!=""', {
+      'defines': [ 'NODE_V8_OPTIONS="<(node_v8_options)"'],
+    }],
+    [ 'node_release_urlbase!=""', {
+      'defines': [
+        'NODE_RELEASE_URLBASE="<(node_release_urlbase)"',
+      ]
+    }],
+    [ 'v8_enable_i18n_support==1', {
+      'defines': [ 'NODE_HAVE_I18N_SUPPORT=1' ],
+      'dependencies': [
+        '<(icu_gyp_path):icui18n',
+        '<(icu_gyp_path):icuuc',
+      ],
+      'conditions': [
+        [ 'icu_small=="true"', {
+          'defines': [ 'NODE_HAVE_SMALL_ICU=1' ],
+      }]],
+    }],
+    [ 'node_use_bundled_v8=="true" and \
+       node_enable_v8_vtunejit=="true" and (target_arch=="x64" or \
+       target_arch=="ia32" or target_arch=="x32")', {
+      'defines': [ 'NODE_ENABLE_VTUNE_PROFILING' ],
+      'dependencies': [
+        'deps/v8/gypfiles/v8vtune.gyp:v8_vtune'
+      ],
+    }],
+    [ 'node_no_browser_globals=="true"', {
+      'defines': [ 'NODE_NO_BROWSER_GLOBALS' ],
+    } ],
+    [ 'node_use_bundled_v8=="true" and v8_postmortem_support=="true" and force_load=="true"', {
+      'xcode_settings': {
+        'OTHER_LDFLAGS': [
+          '-Wl,-force_load,<(v8_base)',
+        ],
+      },
+    }],
+    [ 'node_shared_zlib=="false"', {
+      'dependencies': [ 'deps/zlib/zlib.gyp:zlib' ],
+      'conditions': [
+        [ 'force_load=="true"', {
+          'xcode_settings': {
+            'OTHER_LDFLAGS': [
+              '-Wl,-force_load,<(PRODUCT_DIR)/<(STATIC_LIB_PREFIX)'
+                  'zlib<(STATIC_LIB_SUFFIX)',
+            ],
+          },
+          'msvs_settings': {
+            'VCLinkerTool': {
+              'AdditionalOptions': [
+                '/WHOLEARCHIVE:zlib<(STATIC_LIB_SUFFIX)',
+              ],
+            },
+          },
+          'conditions': [
+            ['OS!="aix" and node_shared=="false"', {
+              'ldflags': [
+                '-Wl,--whole-archive,<(obj_dir)/deps/zlib/<(STATIC_LIB_PREFIX)'
+                    'zlib<(STATIC_LIB_SUFFIX)',
+                '-Wl,--no-whole-archive',
+              ],
+            }],
+          ],
+        }],
+      ],
+    }],
+
+    [ 'node_experimental_http_parser=="true"', {
+      'defines': [ 'NODE_EXPERIMENTAL_HTTP_DEFAULT' ],
+    } ],
+
+    [ 'node_shared_http_parser=="false"', {
+      'dependencies': [
+        'deps/http_parser/http_parser.gyp:http_parser',
+        'deps/llhttp/llhttp.gyp:llhttp'
+      ],
+    } ],
+
+    [ 'node_shared_cares=="false"', {
+      'dependencies': [ 'deps/cares/cares.gyp:cares' ],
+    }],
+
+    [ 'node_shared_libuv=="false"', {
+      'dependencies': [ 'deps/uv/uv.gyp:libuv' ],
+      'conditions': [
+        [ 'force_load=="true"', {
+          'xcode_settings': {
+            'OTHER_LDFLAGS': [
+              '-Wl,-force_load,<(PRODUCT_DIR)/<(STATIC_LIB_PREFIX)'
+                  'uv<(STATIC_LIB_SUFFIX)',
+            ],
+          },
+          'msvs_settings': {
+            'VCLinkerTool': {
+              'AdditionalOptions': [
+                '/WHOLEARCHIVE:libuv<(STATIC_LIB_SUFFIX)',
+              ],
+            },
+          },
+          'conditions': [
+            ['OS!="aix" and node_shared=="false"', {
+              'ldflags': [
+                '-Wl,--whole-archive,<(obj_dir)/deps/uv/<(STATIC_LIB_PREFIX)'
+                    'uv<(STATIC_LIB_SUFFIX)',
+                '-Wl,--no-whole-archive',
+              ],
+            }],
+          ],
+        }],
+      ],
+    }],
+
+    [ 'node_shared_nghttp2=="false"', {
+      'dependencies': [ 'deps/nghttp2/nghttp2.gyp:nghttp2' ],
+    }],
+
+    [ 'node_shared_brotli=="false"', {
+      'dependencies': [ 'deps/brotli/brotli.gyp:brotli' ],
+    }],
+
+    [ 'OS=="mac"', {
+      # linking Corefoundation is needed since certain OSX debugging tools
+      # like Instruments require it for some features
+      'libraries': [ '-framework CoreFoundation' ],
+      'defines!': [
+        'NODE_PLATFORM="mac"',
+      ],
+      'defines': [
+        # we need to use node's preferred "darwin" rather than gyp's preferred "mac"
+        'NODE_PLATFORM="darwin"',
+      ],
+    }],
+    [ 'OS=="freebsd"', {
+      'libraries': [
+        '-lutil',
+        '-lkvm',
+      ],
+    }],
+    [ 'OS=="aix"', {
+      'defines': [
+        '_LINUX_SOURCE_COMPAT',
+        '__STDC_FORMAT_MACROS'
+      ],
+      'conditions': [
+        [ 'force_load=="true"', {
+
+          'actions': [
+            {
+              'action_name': 'expfile',
+              'inputs': [
+                '<(obj_dir)'
+              ],
+              'outputs': [
+                '<(PRODUCT_DIR)/node.exp'
+              ],
+              'action': [
+                'sh', 'tools/create_expfile.sh',
+                      '<@(_inputs)', '<@(_outputs)'
+              ],
+            }
+          ],
+          'ldflags': ['-Wl,-bE:<(PRODUCT_DIR)/node.exp', '-Wl,-brtl'],
+        }],
+      ],
+    }],
+    [ 'OS=="solaris"', {
+      'libraries': [
+        '-lkstat',
+        '-lumem',
+      ],
+      'defines!': [
+        'NODE_PLATFORM="solaris"',
+      ],
+      'defines': [
+        # we need to use node's preferred "sunos"
+        # rather than gyp's preferred "solaris"
+        'NODE_PLATFORM="sunos"',
+      ],
+    }],
+    [ '(OS=="freebsd" or OS=="linux") and node_shared=="false"'
+        ' and force_load=="true"', {
+      'ldflags': [ '-Wl,-z,noexecstack',
+                   '-Wl,--whole-archive <(v8_base)',
+                   '-Wl,--no-whole-archive' ]
+    }],
+    [ 'coverage=="true" and node_shared=="false" and OS in "mac freebsd linux"', {
+      'cflags!': [ '-O3' ],
+      'ldflags': [ '--coverage',
+                   '-g',
+                   '-O0' ],
+      'cflags': [ '--coverage',
+                   '-g',
+                   '-O0' ],
+      'xcode_settings': {
+        'OTHER_CFLAGS': [
+          '--coverage',
+          '-g',
+          '-O0'
+        ],
+      },
+      'conditions': [
+        [ '_type=="executable"', {
+          'xcode_settings': {
+            'OTHER_LDFLAGS': [ '--coverage', ],
+          },
+        }],
+      ],
+    }],
+    [ 'OS=="sunos"', {
+      'ldflags': [ '-Wl,-M,/usr/lib/ld/map.noexstk' ],
+    }],
+    [ 'OS in "freebsd linux"', {
+      'ldflags': [ '-Wl,-z,relro',
+                   '-Wl,-z,now' ]
+    }],
+    [ 'OS=="linux" and target_arch=="x64" and node_use_large_pages=="true"', {
+      'ldflags': [
+        '-Wl,-T',
+        '<!(realpath src/large_pages/ld.implicit.script)',
+      ]
+    }],
+    [ 'node_use_openssl=="true"', {
+      'defines': [ 'HAVE_OPENSSL=1' ],
+      'conditions': [
+        ['openssl_fips != "" or openssl_is_fips=="true"', {
+          'defines': [ 'NODE_FIPS_MODE' ],
+        }],
+        [ 'node_shared_openssl=="false"', {
+          'dependencies': [
+            './deps/openssl/openssl.gyp:openssl',
+
+            # For tests
+            './deps/openssl/openssl.gyp:openssl-cli',
+          ],
+          'conditions': [
+            # -force_load or --whole-archive are not applicable for
+            # the static library
+            [ 'force_load=="true"', {
+              'xcode_settings': {
+                'OTHER_LDFLAGS': [
+                  '-Wl,-force_load,<(PRODUCT_DIR)/<(openssl_product)',
+                ],
+              },
+              'msvs_settings': {
+                'VCLinkerTool': {
+                  'AdditionalOptions': [
+                    '/WHOLEARCHIVE:<(openssl_product)',
+                  ],
+                },
+              },
+              'conditions': [
+                ['OS in "linux freebsd" and node_shared=="false"', {
+                  'ldflags': [
+                    '-Wl,--whole-archive,'
+                      '<(obj_dir)/deps/openssl/<(openssl_product)',
+                    '-Wl,--no-whole-archive',
+                  ],
+                }],
+                # openssl.def is based on zlib.def, zlib symbols
+                # are always exported.
+                ['use_openssl_def==1', {
+                  'sources': ['<(SHARED_INTERMEDIATE_DIR)/openssl.def'],
+                }],
+                ['OS=="win" and use_openssl_def==0', {
+                  'sources': ['deps/zlib/win32/zlib.def'],
+                }],
+              ],
+            }],
+          ],
+        }]]
+
+    }, {
+      'defines': [ 'HAVE_OPENSSL=0' ]
+    }],
+
+  ],
+}
diff -Nru orig/src/inspector/node_inspector.gypi patched/src/inspector/node_inspector.gypi
--- orig/src/inspector/node_inspector.gypi	2019-04-30 13:31:48.000000000 -0400
+++ patched/src/inspector/node_inspector.gypi	2021-03-10 05:44:54.341299713 -0500
@@ -76,7 +76,7 @@
         '<(SHARED_INTERMEDIATE_DIR)/src/node_protocol.json',
       ],
       'action': [
-        'python',
+        'python2',
         'tools/inspector_protocol/convert_protocol_to_json.py',
         '<@(_inputs)',
         '<@(_outputs)',
@@ -94,7 +94,7 @@
       ],
       'process_outputs_as_sources': 1,
       'action': [
-        'python',
+        'python2',
         'tools/inspector_protocol/code_generator.py',
         '--jinja_dir', '<@(protocol_tool_path)/..',
         '--output_base', '<(SHARED_INTERMEDIATE_DIR)/src/',
@@ -112,7 +112,7 @@
         '<(SHARED_INTERMEDIATE_DIR)/concatenated_protocol.json',
       ],
       'action': [
-        'python',
+        'python2',
         'tools/inspector_protocol/concatenate_protocols.py',
         '<@(_inputs)',
         '<@(_outputs)',
@@ -128,7 +128,7 @@
       ],
       'process_outputs_as_sources': 1,
       'action': [
-        'python',
+        'python2',
         'tools/compress_json.py',
         '<@(_inputs)',
         '<@(_outputs)',
diff -Nru orig/src/inspector_io.cc patched/src/inspector_io.cc
--- orig/src/inspector_io.cc	2019-04-30 13:31:48.000000000 -0400
+++ patched/src/inspector_io.cc	2021-03-10 05:44:54.341299713 -0500
@@ -23,6 +23,9 @@
 namespace {
 using v8_inspector::StringBuffer;
 using v8_inspector::StringView;
+using icu::UnicodeString;
+using icu::CheckedArrayByteSink;
+using icu::StringPiece;
 
 std::string ScriptPath(uv_loop_t* loop, const std::string& script_name) {
   std::string script_path;
diff -Nru orig/src/inspector_io.cc.orig patched/src/inspector_io.cc.orig
--- orig/src/inspector_io.cc.orig	1969-12-31 19:00:00.000000000 -0500
+++ patched/src/inspector_io.cc.orig	2021-03-10 05:44:54.341299713 -0500
@@ -0,0 +1,374 @@
+#include "inspector_io.h"
+
+#include "inspector_socket_server.h"
+#include "inspector/main_thread_interface.h"
+#include "inspector/node_string.h"
+#include "base_object-inl.h"
+#include "env-inl.h"
+#include "debug_utils.h"
+#include "node.h"
+#include "node_crypto.h"
+#include "node_internals.h"
+#include "node_mutex.h"
+#include "v8-inspector.h"
+#include "util.h"
+#include "zlib.h"
+
+#include <deque>
+#include <cstring>
+#include <vector>
+
+namespace node {
+namespace inspector {
+namespace {
+using v8_inspector::StringBuffer;
+using v8_inspector::StringView;
+
+std::string ScriptPath(uv_loop_t* loop, const std::string& script_name) {
+  std::string script_path;
+
+  if (!script_name.empty()) {
+    uv_fs_t req;
+    req.ptr = nullptr;
+    if (0 == uv_fs_realpath(loop, &req, script_name.c_str(), nullptr)) {
+      CHECK_NOT_NULL(req.ptr);
+      script_path = std::string(static_cast<char*>(req.ptr));
+    }
+    uv_fs_req_cleanup(&req);
+  }
+
+  return script_path;
+}
+
+// UUID RFC: https://www.ietf.org/rfc/rfc4122.txt
+// Used ver 4 - with numbers
+std::string GenerateID() {
+  uint16_t buffer[8];
+  CHECK(crypto::EntropySource(reinterpret_cast<unsigned char*>(buffer),
+                              sizeof(buffer)));
+
+  char uuid[256];
+  snprintf(uuid, sizeof(uuid), "%04x%04x-%04x-%04x-%04x-%04x%04x%04x",
+           buffer[0],  // time_low
+           buffer[1],  // time_mid
+           buffer[2],  // time_low
+           (buffer[3] & 0x0fff) | 0x4000,  // time_hi_and_version
+           (buffer[4] & 0x3fff) | 0x8000,  // clk_seq_hi clk_seq_low
+           buffer[5],  // node
+           buffer[6],
+           buffer[7]);
+  return uuid;
+}
+
+class RequestToServer {
+ public:
+  RequestToServer(TransportAction action,
+                  int session_id,
+                  std::unique_ptr<v8_inspector::StringBuffer> message)
+                  : action_(action),
+                    session_id_(session_id),
+                    message_(std::move(message)) {}
+
+  void Dispatch(InspectorSocketServer* server) const {
+    switch (action_) {
+      case TransportAction::kKill:
+        server->TerminateConnections();
+        // Fallthrough
+      case TransportAction::kStop:
+        server->Stop();
+        break;
+      case TransportAction::kSendMessage:
+        server->Send(
+            session_id_,
+            protocol::StringUtil::StringViewToUtf8(message_->string()));
+        break;
+    }
+  }
+
+ private:
+  TransportAction action_;
+  int session_id_;
+  std::unique_ptr<v8_inspector::StringBuffer> message_;
+};
+
+class RequestQueueData {
+ public:
+  using MessageQueue = std::deque<RequestToServer>;
+
+  explicit RequestQueueData(uv_loop_t* loop)
+                            : handle_(std::make_shared<RequestQueue>(this)) {
+    int err = uv_async_init(loop, &async_, [](uv_async_t* async) {
+      RequestQueueData* wrapper =
+          node::ContainerOf(&RequestQueueData::async_, async);
+      wrapper->DoDispatch();
+    });
+    CHECK_EQ(0, err);
+  }
+
+  static void CloseAndFree(RequestQueueData* queue);
+
+  void Post(int session_id,
+            TransportAction action,
+            std::unique_ptr<StringBuffer> message) {
+    Mutex::ScopedLock scoped_lock(state_lock_);
+    bool notify = messages_.empty();
+    messages_.emplace_back(action, session_id, std::move(message));
+    if (notify) {
+      CHECK_EQ(0, uv_async_send(&async_));
+      incoming_message_cond_.Broadcast(scoped_lock);
+    }
+  }
+
+  void Wait() {
+    Mutex::ScopedLock scoped_lock(state_lock_);
+    if (messages_.empty()) {
+      incoming_message_cond_.Wait(scoped_lock);
+    }
+  }
+
+  void SetServer(InspectorSocketServer* server) {
+    server_ = server;
+  }
+
+  std::shared_ptr<RequestQueue> handle() {
+    return handle_;
+  }
+
+ private:
+  ~RequestQueueData() = default;
+
+  MessageQueue GetMessages() {
+    Mutex::ScopedLock scoped_lock(state_lock_);
+    MessageQueue messages;
+    messages_.swap(messages);
+    return messages;
+  }
+
+  void DoDispatch() {
+    if (server_ == nullptr)
+      return;
+    for (const auto& request : GetMessages()) {
+      request.Dispatch(server_);
+    }
+  }
+
+  std::shared_ptr<RequestQueue> handle_;
+  uv_async_t async_;
+  InspectorSocketServer* server_ = nullptr;
+  MessageQueue messages_;
+  Mutex state_lock_;  // Locked before mutating the queue.
+  ConditionVariable incoming_message_cond_;
+};
+}  // namespace
+
+class RequestQueue {
+ public:
+  explicit RequestQueue(RequestQueueData* data) : data_(data) {}
+
+  void Reset() {
+    Mutex::ScopedLock scoped_lock(lock_);
+    data_ = nullptr;
+  }
+
+  void Post(int session_id,
+            TransportAction action,
+            std::unique_ptr<StringBuffer> message) {
+    Mutex::ScopedLock scoped_lock(lock_);
+    if (data_ != nullptr)
+      data_->Post(session_id, action, std::move(message));
+  }
+
+  void SetServer(InspectorSocketServer* server) {
+    Mutex::ScopedLock scoped_lock(lock_);
+    if (data_ != nullptr)
+      data_->SetServer(server);
+  }
+
+  bool Expired() {
+    Mutex::ScopedLock scoped_lock(lock_);
+    return data_ == nullptr;
+  }
+
+ private:
+  RequestQueueData* data_;
+  Mutex lock_;
+};
+
+class IoSessionDelegate : public InspectorSessionDelegate {
+ public:
+  explicit IoSessionDelegate(std::shared_ptr<RequestQueue> queue, int id)
+                             : request_queue_(queue), id_(id) { }
+  void SendMessageToFrontend(const v8_inspector::StringView& message) override {
+    request_queue_->Post(id_, TransportAction::kSendMessage,
+                         StringBuffer::create(message));
+  }
+
+ private:
+  std::shared_ptr<RequestQueue> request_queue_;
+  int id_;
+};
+
+// Passed to InspectorSocketServer to handle WS inspector protocol events,
+// mostly session start, message received, and session end.
+class InspectorIoDelegate: public node::inspector::SocketServerDelegate {
+ public:
+  InspectorIoDelegate(std::shared_ptr<RequestQueueData> queue,
+                      std::shared_ptr<MainThreadHandle> main_threade,
+                      const std::string& target_id,
+                      const std::string& script_path,
+                      const std::string& script_name);
+  ~InspectorIoDelegate() override {
+  }
+
+  void StartSession(int session_id, const std::string& target_id) override;
+  void MessageReceived(int session_id, const std::string& message) override;
+  void EndSession(int session_id) override;
+
+  std::vector<std::string> GetTargetIds() override;
+  std::string GetTargetTitle(const std::string& id) override;
+  std::string GetTargetUrl(const std::string& id) override;
+  void AssignServer(InspectorSocketServer* server) override {
+    request_queue_->SetServer(server);
+  }
+
+ private:
+  std::shared_ptr<RequestQueueData> request_queue_;
+  std::shared_ptr<MainThreadHandle> main_thread_;
+  std::unordered_map<int, std::unique_ptr<InspectorSession>> sessions_;
+  const std::string script_name_;
+  const std::string script_path_;
+  const std::string target_id_;
+};
+
+// static
+std::unique_ptr<InspectorIo> InspectorIo::Start(
+    std::shared_ptr<MainThreadHandle> main_thread,
+    const std::string& path,
+    std::shared_ptr<HostPort> host_port) {
+  auto io = std::unique_ptr<InspectorIo>(
+      new InspectorIo(main_thread, path, host_port));
+  if (io->request_queue_->Expired()) {  // Thread is not running
+    return nullptr;
+  }
+  return io;
+}
+
+InspectorIo::InspectorIo(std::shared_ptr<MainThreadHandle> main_thread,
+                         const std::string& path,
+                         std::shared_ptr<HostPort> host_port)
+    : main_thread_(main_thread),
+      host_port_(host_port),
+      thread_(),
+      script_name_(path),
+      id_(GenerateID()) {
+  Mutex::ScopedLock scoped_lock(thread_start_lock_);
+  CHECK_EQ(uv_thread_create(&thread_, InspectorIo::ThreadMain, this), 0);
+  thread_start_condition_.Wait(scoped_lock);
+}
+
+InspectorIo::~InspectorIo() {
+  request_queue_->Post(0, TransportAction::kKill, nullptr);
+  int err = uv_thread_join(&thread_);
+  CHECK_EQ(err, 0);
+}
+
+void InspectorIo::StopAcceptingNewConnections() {
+  request_queue_->Post(0, TransportAction::kStop, nullptr);
+}
+
+// static
+void InspectorIo::ThreadMain(void* io) {
+  static_cast<InspectorIo*>(io)->ThreadMain();
+}
+
+void InspectorIo::ThreadMain() {
+  uv_loop_t loop;
+  loop.data = nullptr;
+  int err = uv_loop_init(&loop);
+  CHECK_EQ(err, 0);
+  std::shared_ptr<RequestQueueData> queue(new RequestQueueData(&loop),
+                                          RequestQueueData::CloseAndFree);
+  std::string script_path = ScriptPath(&loop, script_name_);
+  std::unique_ptr<InspectorIoDelegate> delegate(
+      new InspectorIoDelegate(queue, main_thread_, id_,
+                              script_path, script_name_));
+  InspectorSocketServer server(std::move(delegate),
+                               &loop,
+                               host_port_->host(),
+                               host_port_->port());
+  request_queue_ = queue->handle();
+  // Its lifetime is now that of the server delegate
+  queue.reset();
+  {
+    Mutex::ScopedLock scoped_lock(thread_start_lock_);
+    if (server.Start()) {
+      host_port_->set_port(server.Port());
+    }
+    thread_start_condition_.Broadcast(scoped_lock);
+  }
+  uv_run(&loop, UV_RUN_DEFAULT);
+  CheckedUvLoopClose(&loop);
+}
+
+std::vector<std::string> InspectorIo::GetTargetIds() const {
+  return { id_ };
+}
+
+InspectorIoDelegate::InspectorIoDelegate(
+    std::shared_ptr<RequestQueueData> queue,
+    std::shared_ptr<MainThreadHandle> main_thread,
+    const std::string& target_id,
+    const std::string& script_path,
+    const std::string& script_name)
+    : request_queue_(queue), main_thread_(main_thread),
+      script_name_(script_name), script_path_(script_path),
+      target_id_(target_id) {}
+
+void InspectorIoDelegate::StartSession(int session_id,
+                                       const std::string& target_id) {
+  auto session = main_thread_->Connect(
+      std::unique_ptr<InspectorSessionDelegate>(
+          new IoSessionDelegate(request_queue_->handle(), session_id)), true);
+  if (session) {
+    sessions_[session_id] = std::move(session);
+    fprintf(stderr, "Debugger attached.\n");
+  }
+}
+
+void InspectorIoDelegate::MessageReceived(int session_id,
+                                          const std::string& message) {
+  auto session = sessions_.find(session_id);
+  if (session != sessions_.end())
+    session->second->Dispatch(Utf8ToStringView(message)->string());
+}
+
+void InspectorIoDelegate::EndSession(int session_id) {
+  sessions_.erase(session_id);
+}
+
+std::vector<std::string> InspectorIoDelegate::GetTargetIds() {
+  return { target_id_ };
+}
+
+std::string InspectorIoDelegate::GetTargetTitle(const std::string& id) {
+  return script_name_.empty() ? GetHumanReadableProcessName() : script_name_;
+}
+
+std::string InspectorIoDelegate::GetTargetUrl(const std::string& id) {
+  return "file://" + script_path_;
+}
+
+// static
+void RequestQueueData::CloseAndFree(RequestQueueData* queue) {
+  queue->handle_->Reset();
+  queue->handle_.reset();
+  uv_close(reinterpret_cast<uv_handle_t*>(&queue->async_),
+           [](uv_handle_t* handle) {
+    uv_async_t* async = reinterpret_cast<uv_async_t*>(handle);
+    RequestQueueData* wrapper =
+        node::ContainerOf(&RequestQueueData::async_, async);
+    delete wrapper;
+  });
+}
+}  // namespace inspector
+}  // namespace node
diff -Nru orig/src/node.cc patched/src/node.cc
--- orig/src/node.cc	2019-04-30 13:31:48.000000000 -0400
+++ patched/src/node.cc	2021-03-10 05:44:54.341299713 -0500
@@ -94,7 +94,7 @@
 #include <sanitizer/lsan_interface.h>
 #endif
 
-#if defined(_MSC_VER)
+#if defined(_WIN32)
 #include <direct.h>
 #include <io.h>
 #define STDIN_FILENO 0
diff -Nru orig/src/node_i18n.cc patched/src/node_i18n.cc
--- orig/src/node_i18n.cc	2019-04-30 13:31:49.000000000 -0400
+++ patched/src/node_i18n.cc	2021-03-10 05:44:54.341299713 -0500
@@ -98,6 +98,8 @@
 using v8::String;
 using v8::Value;
 
+using icu::TimeZone;
+
 namespace i18n {
 namespace {
 
diff -Nru orig/src/node_i18n.cc.orig patched/src/node_i18n.cc.orig
--- orig/src/node_i18n.cc.orig	1969-12-31 19:00:00.000000000 -0500
+++ patched/src/node_i18n.cc.orig	2021-03-10 05:44:54.341299713 -0500
@@ -0,0 +1,828 @@
+// Copyright Joyent, Inc. and other Node contributors.
+//
+// Permission is hereby granted, free of charge, to any person obtaining a
+// copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to permit
+// persons to whom the Software is furnished to do so, subject to the
+// following conditions:
+//
+// The above copyright notice and this permission notice shall be included
+// in all copies or substantial portions of the Software.
+//
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
+// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
+// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
+// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
+// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
+// USE OR OTHER DEALINGS IN THE SOFTWARE.
+
+/*
+ * notes: by srl295
+ *  - When in NODE_HAVE_SMALL_ICU mode, ICU is linked against "stub" (null) data
+ *     ( stubdata/libicudata.a ) containing nothing, no data, and it's also
+ *    linked against a "small" data file which the SMALL_ICUDATA_ENTRY_POINT
+ *    macro names. That's the "english+root" data.
+ *
+ *    If icu_data_path is non-null, the user has provided a path and we assume
+ *    it goes somewhere useful. We set that path in ICU, and exit.
+ *    If icu_data_path is null, they haven't set a path and we want the
+ *    "english+root" data.  We call
+ *       udata_setCommonData(SMALL_ICUDATA_ENTRY_POINT,...)
+ *    to load up the english+root data.
+ *
+ *  - when NOT in NODE_HAVE_SMALL_ICU mode, ICU is linked directly with its full
+ *    data. All of the variables and command line options for changing data at
+ *    runtime are disabled, as they wouldn't fully override the internal data.
+ *    See:  http://bugs.icu-project.org/trac/ticket/10924
+ */
+
+
+#include "node_i18n.h"
+
+#if defined(NODE_HAVE_I18N_SUPPORT)
+
+#include "base_object-inl.h"
+#include "env-inl.h"
+#include "node.h"
+#include "node_buffer.h"
+#include "node_errors.h"
+#include "node_internals.h"
+#include "util-inl.h"
+#include "v8.h"
+
+#include <unicode/utypes.h>
+#include <unicode/putil.h>
+#include <unicode/uchar.h>
+#include <unicode/uclean.h>
+#include <unicode/udata.h>
+#include <unicode/uidna.h>
+#include <unicode/ucnv.h>
+#include <unicode/utf8.h>
+#include <unicode/utf16.h>
+#include <unicode/timezone.h>
+#include <unicode/ulocdata.h>
+#include <unicode/uvernum.h>
+#include <unicode/uversion.h>
+#include <unicode/ustring.h>
+
+#ifdef NODE_HAVE_SMALL_ICU
+/* if this is defined, we have a 'secondary' entry point.
+   compare following to utypes.h defs for U_ICUDATA_ENTRY_POINT */
+#define SMALL_ICUDATA_ENTRY_POINT \
+  SMALL_DEF2(U_ICU_VERSION_MAJOR_NUM, U_LIB_SUFFIX_C_NAME)
+#define SMALL_DEF2(major, suff) SMALL_DEF(major, suff)
+#ifndef U_LIB_SUFFIX_C_NAME
+#define SMALL_DEF(major, suff) icusmdt##major##_dat
+#else
+#define SMALL_DEF(major, suff) icusmdt##suff##major##_dat
+#endif
+
+extern "C" const char U_DATA_API SMALL_ICUDATA_ENTRY_POINT[];
+#endif
+
+namespace node {
+
+using v8::Context;
+using v8::FunctionCallbackInfo;
+using v8::HandleScope;
+using v8::Int32;
+using v8::Isolate;
+using v8::Local;
+using v8::MaybeLocal;
+using v8::NewStringType;
+using v8::Object;
+using v8::ObjectTemplate;
+using v8::String;
+using v8::Value;
+
+namespace i18n {
+namespace {
+
+template <typename T>
+MaybeLocal<Object> ToBufferEndian(Environment* env, MaybeStackBuffer<T>* buf) {
+  MaybeLocal<Object> ret = Buffer::New(env, buf);
+  if (ret.IsEmpty())
+    return ret;
+
+  static_assert(sizeof(T) == 1 || sizeof(T) == 2,
+                "Currently only one- or two-byte buffers are supported");
+  if (sizeof(T) > 1 && IsBigEndian()) {
+    SPREAD_BUFFER_ARG(ret.ToLocalChecked(), retbuf);
+    SwapBytes16(retbuf_data, retbuf_length);
+  }
+
+  return ret;
+}
+
+struct Converter {
+  explicit Converter(const char* name, const char* sub = nullptr)
+      : conv(nullptr) {
+    UErrorCode status = U_ZERO_ERROR;
+    conv = ucnv_open(name, &status);
+    CHECK(U_SUCCESS(status));
+    if (sub != nullptr) {
+      ucnv_setSubstChars(conv, sub, strlen(sub), &status);
+    }
+  }
+
+  explicit Converter(UConverter* converter,
+                     const char* sub = nullptr) : conv(converter) {
+    CHECK_NOT_NULL(conv);
+    UErrorCode status = U_ZERO_ERROR;
+    if (sub != nullptr) {
+      ucnv_setSubstChars(conv, sub, strlen(sub), &status);
+    }
+  }
+
+  ~Converter() {
+    ucnv_close(conv);
+  }
+
+  UConverter* conv;
+};
+
+class ConverterObject : public BaseObject, Converter {
+ public:
+  enum ConverterFlags {
+    CONVERTER_FLAGS_FLUSH      = 0x1,
+    CONVERTER_FLAGS_FATAL      = 0x2,
+    CONVERTER_FLAGS_IGNORE_BOM = 0x4
+  };
+
+  ~ConverterObject() override {}
+
+  static void Has(const FunctionCallbackInfo<Value>& args) {
+    Environment* env = Environment::GetCurrent(args);
+    HandleScope scope(env->isolate());
+
+    CHECK_GE(args.Length(), 1);
+    Utf8Value label(env->isolate(), args[0]);
+
+    UErrorCode status = U_ZERO_ERROR;
+    UConverter* conv = ucnv_open(*label, &status);
+    args.GetReturnValue().Set(!!U_SUCCESS(status));
+    ucnv_close(conv);
+  }
+
+  static void Create(const FunctionCallbackInfo<Value>& args) {
+    Environment* env = Environment::GetCurrent(args);
+    HandleScope scope(env->isolate());
+
+    Local<ObjectTemplate> t = ObjectTemplate::New(env->isolate());
+    t->SetInternalFieldCount(1);
+    Local<Object> obj;
+    if (!t->NewInstance(env->context()).ToLocal(&obj)) return;
+
+    CHECK_GE(args.Length(), 2);
+    Utf8Value label(env->isolate(), args[0]);
+    int flags = args[1]->Uint32Value(env->context()).ToChecked();
+    bool fatal =
+        (flags & CONVERTER_FLAGS_FATAL) == CONVERTER_FLAGS_FATAL;
+    bool ignoreBOM =
+        (flags & CONVERTER_FLAGS_IGNORE_BOM) == CONVERTER_FLAGS_IGNORE_BOM;
+
+    UErrorCode status = U_ZERO_ERROR;
+    UConverter* conv = ucnv_open(*label, &status);
+    if (U_FAILURE(status))
+      return;
+
+    if (fatal) {
+      status = U_ZERO_ERROR;
+      ucnv_setToUCallBack(conv, UCNV_TO_U_CALLBACK_STOP,
+                          nullptr, nullptr, nullptr, &status);
+    }
+
+    new ConverterObject(env, obj, conv, ignoreBOM);
+    args.GetReturnValue().Set(obj);
+  }
+
+  static void Decode(const FunctionCallbackInfo<Value>& args) {
+    Environment* env = Environment::GetCurrent(args);
+
+    CHECK_GE(args.Length(), 3);  // Converter, Buffer, Flags
+
+    ConverterObject* converter;
+    ASSIGN_OR_RETURN_UNWRAP(&converter, args[0].As<Object>());
+    SPREAD_BUFFER_ARG(args[1], input_obj);
+    int flags = args[2]->Uint32Value(env->context()).ToChecked();
+
+    UErrorCode status = U_ZERO_ERROR;
+    MaybeStackBuffer<UChar> result;
+    MaybeLocal<Object> ret;
+    size_t limit = ucnv_getMinCharSize(converter->conv) *
+                   input_obj_length;
+    if (limit > 0)
+      result.AllocateSufficientStorage(limit);
+
+    UBool flush = (flags & CONVERTER_FLAGS_FLUSH) == CONVERTER_FLAGS_FLUSH;
+    OnScopeLeave cleanup([&]() {
+      if (flush) {
+        // Reset the converter state.
+        converter->bomSeen_ = false;
+        ucnv_reset(converter->conv);
+      }
+    });
+
+    const char* source = input_obj_data;
+    size_t source_length = input_obj_length;
+
+    if (converter->unicode_ && !converter->ignoreBOM_ && !converter->bomSeen_) {
+      int32_t bomOffset = 0;
+      ucnv_detectUnicodeSignature(source, source_length, &bomOffset, &status);
+      source += bomOffset;
+      source_length -= bomOffset;
+      converter->bomSeen_ = true;
+    }
+
+    UChar* target = *result;
+    ucnv_toUnicode(converter->conv,
+                   &target, target + (limit * sizeof(UChar)),
+                   &source, source + source_length,
+                   nullptr, flush, &status);
+
+    if (U_SUCCESS(status)) {
+      if (limit > 0)
+        result.SetLength(target - &result[0]);
+      ret = ToBufferEndian(env, &result);
+      args.GetReturnValue().Set(ret.ToLocalChecked());
+      return;
+    }
+
+    args.GetReturnValue().Set(status);
+  }
+
+  SET_NO_MEMORY_INFO()
+  SET_MEMORY_INFO_NAME(ConverterObject)
+  SET_SELF_SIZE(ConverterObject)
+
+ protected:
+  ConverterObject(Environment* env,
+                  Local<Object> wrap,
+                  UConverter* converter,
+                  bool ignoreBOM,
+                  const char* sub = nullptr) :
+                  BaseObject(env, wrap),
+                  Converter(converter, sub),
+                  ignoreBOM_(ignoreBOM) {
+    MakeWeak();
+
+    switch (ucnv_getType(converter)) {
+      case UCNV_UTF8:
+      case UCNV_UTF16_BigEndian:
+      case UCNV_UTF16_LittleEndian:
+        unicode_ = true;
+        break;
+      default:
+        unicode_ = false;
+    }
+  }
+
+ private:
+  bool unicode_ = false;     // True if this is a Unicode converter
+  bool ignoreBOM_ = false;   // True if the BOM should be ignored on Unicode
+  bool bomSeen_ = false;     // True if the BOM has been seen
+};
+
+// One-Shot Converters
+
+void CopySourceBuffer(MaybeStackBuffer<UChar>* dest,
+                      const char* data,
+                      const size_t length,
+                      const size_t length_in_chars) {
+  dest->AllocateSufficientStorage(length_in_chars);
+  char* dst = reinterpret_cast<char*>(**dest);
+  memcpy(dst, data, length);
+  if (IsBigEndian()) {
+    SwapBytes16(dst, length);
+  }
+}
+
+typedef MaybeLocal<Object> (*TranscodeFunc)(Environment* env,
+                                            const char* fromEncoding,
+                                            const char* toEncoding,
+                                            const char* source,
+                                            const size_t source_length,
+                                            UErrorCode* status);
+
+MaybeLocal<Object> Transcode(Environment* env,
+                             const char* fromEncoding,
+                             const char* toEncoding,
+                             const char* source,
+                             const size_t source_length,
+                             UErrorCode* status) {
+  *status = U_ZERO_ERROR;
+  MaybeLocal<Object> ret;
+  MaybeStackBuffer<char> result;
+  Converter to(toEncoding, "?");
+  Converter from(fromEncoding);
+  const uint32_t limit = source_length * ucnv_getMaxCharSize(to.conv);
+  result.AllocateSufficientStorage(limit);
+  char* target = *result;
+  ucnv_convertEx(to.conv, from.conv, &target, target + limit,
+                 &source, source + source_length, nullptr, nullptr,
+                 nullptr, nullptr, true, true, status);
+  if (U_SUCCESS(*status)) {
+    result.SetLength(target - &result[0]);
+    ret = ToBufferEndian(env, &result);
+  }
+  return ret;
+}
+
+MaybeLocal<Object> TranscodeToUcs2(Environment* env,
+                                   const char* fromEncoding,
+                                   const char* toEncoding,
+                                   const char* source,
+                                   const size_t source_length,
+                                   UErrorCode* status) {
+  *status = U_ZERO_ERROR;
+  MaybeLocal<Object> ret;
+  MaybeStackBuffer<UChar> destbuf(source_length);
+  Converter from(fromEncoding);
+  const size_t length_in_chars = source_length * sizeof(UChar);
+  ucnv_toUChars(from.conv, *destbuf, length_in_chars,
+                source, source_length, status);
+  if (U_SUCCESS(*status))
+    ret = ToBufferEndian(env, &destbuf);
+  return ret;
+}
+
+MaybeLocal<Object> TranscodeFromUcs2(Environment* env,
+                                     const char* fromEncoding,
+                                     const char* toEncoding,
+                                     const char* source,
+                                     const size_t source_length,
+                                     UErrorCode* status) {
+  *status = U_ZERO_ERROR;
+  MaybeStackBuffer<UChar> sourcebuf;
+  MaybeLocal<Object> ret;
+  Converter to(toEncoding, "?");
+  const size_t length_in_chars = source_length / sizeof(UChar);
+  CopySourceBuffer(&sourcebuf, source, source_length, length_in_chars);
+  MaybeStackBuffer<char> destbuf(length_in_chars);
+  const uint32_t len = ucnv_fromUChars(to.conv, *destbuf, length_in_chars,
+                                       *sourcebuf, length_in_chars, status);
+  if (U_SUCCESS(*status)) {
+    destbuf.SetLength(len);
+    ret = ToBufferEndian(env, &destbuf);
+  }
+  return ret;
+}
+
+MaybeLocal<Object> TranscodeUcs2FromUtf8(Environment* env,
+                                         const char* fromEncoding,
+                                         const char* toEncoding,
+                                         const char* source,
+                                         const size_t source_length,
+                                         UErrorCode* status) {
+  *status = U_ZERO_ERROR;
+  MaybeStackBuffer<UChar> destbuf;
+  int32_t result_length;
+  u_strFromUTF8(*destbuf, destbuf.capacity(), &result_length,
+                source, source_length, status);
+  MaybeLocal<Object> ret;
+  if (U_SUCCESS(*status)) {
+    destbuf.SetLength(result_length);
+    ret = ToBufferEndian(env, &destbuf);
+  } else if (*status == U_BUFFER_OVERFLOW_ERROR) {
+    *status = U_ZERO_ERROR;
+    destbuf.AllocateSufficientStorage(result_length);
+    u_strFromUTF8(*destbuf, result_length, &result_length,
+                  source, source_length, status);
+    if (U_SUCCESS(*status)) {
+      destbuf.SetLength(result_length);
+      ret = ToBufferEndian(env, &destbuf);
+    }
+  }
+  return ret;
+}
+
+MaybeLocal<Object> TranscodeUtf8FromUcs2(Environment* env,
+                                         const char* fromEncoding,
+                                         const char* toEncoding,
+                                         const char* source,
+                                         const size_t source_length,
+                                         UErrorCode* status) {
+  *status = U_ZERO_ERROR;
+  MaybeLocal<Object> ret;
+  const size_t length_in_chars = source_length / sizeof(UChar);
+  int32_t result_length;
+  MaybeStackBuffer<UChar> sourcebuf;
+  MaybeStackBuffer<char> destbuf;
+  CopySourceBuffer(&sourcebuf, source, source_length, length_in_chars);
+  u_strToUTF8(*destbuf, destbuf.capacity(), &result_length,
+              *sourcebuf, length_in_chars, status);
+  if (U_SUCCESS(*status)) {
+    destbuf.SetLength(result_length);
+    ret = ToBufferEndian(env, &destbuf);
+  } else if (*status == U_BUFFER_OVERFLOW_ERROR) {
+    *status = U_ZERO_ERROR;
+    destbuf.AllocateSufficientStorage(result_length);
+    u_strToUTF8(*destbuf, result_length, &result_length, *sourcebuf,
+                length_in_chars, status);
+    if (U_SUCCESS(*status)) {
+      destbuf.SetLength(result_length);
+      ret = ToBufferEndian(env, &destbuf);
+    }
+  }
+  return ret;
+}
+
+const char* EncodingName(const enum encoding encoding) {
+  switch (encoding) {
+    case ASCII: return "us-ascii";
+    case LATIN1: return "iso8859-1";
+    case UCS2: return "utf16le";
+    case UTF8: return "utf-8";
+    default: return nullptr;
+  }
+}
+
+bool SupportedEncoding(const enum encoding encoding) {
+  switch (encoding) {
+    case ASCII:
+    case LATIN1:
+    case UCS2:
+    case UTF8: return true;
+    default: return false;
+  }
+}
+
+void Transcode(const FunctionCallbackInfo<Value>&args) {
+  Environment* env = Environment::GetCurrent(args);
+  Isolate* isolate = env->isolate();
+  UErrorCode status = U_ZERO_ERROR;
+  MaybeLocal<Object> result;
+
+  CHECK(Buffer::HasInstance(args[0]));
+  SPREAD_BUFFER_ARG(args[0], ts_obj);
+  const enum encoding fromEncoding = ParseEncoding(isolate, args[1], BUFFER);
+  const enum encoding toEncoding = ParseEncoding(isolate, args[2], BUFFER);
+
+  if (SupportedEncoding(fromEncoding) && SupportedEncoding(toEncoding)) {
+    TranscodeFunc tfn = &Transcode;
+    switch (fromEncoding) {
+      case ASCII:
+      case LATIN1:
+        if (toEncoding == UCS2)
+          tfn = &TranscodeToUcs2;
+        break;
+      case UTF8:
+        if (toEncoding == UCS2)
+          tfn = &TranscodeUcs2FromUtf8;
+        break;
+      case UCS2:
+        switch (toEncoding) {
+          case UCS2:
+            tfn = &Transcode;
+            break;
+          case UTF8:
+            tfn = &TranscodeUtf8FromUcs2;
+            break;
+          default:
+            tfn = &TranscodeFromUcs2;
+        }
+        break;
+      default:
+        // This should not happen because of the SupportedEncoding checks
+        ABORT();
+    }
+
+    result = tfn(env, EncodingName(fromEncoding), EncodingName(toEncoding),
+                 ts_obj_data, ts_obj_length, &status);
+  } else {
+    status = U_ILLEGAL_ARGUMENT_ERROR;
+  }
+
+  if (result.IsEmpty())
+    return args.GetReturnValue().Set(status);
+
+  return args.GetReturnValue().Set(result.ToLocalChecked());
+}
+
+void ICUErrorName(const FunctionCallbackInfo<Value>& args) {
+  Environment* env = Environment::GetCurrent(args);
+  CHECK(args[0]->IsInt32());
+  UErrorCode status = static_cast<UErrorCode>(args[0].As<Int32>()->Value());
+  args.GetReturnValue().Set(
+      String::NewFromUtf8(env->isolate(),
+                          u_errorName(status),
+                          NewStringType::kNormal).ToLocalChecked());
+}
+
+}  // anonymous namespace
+
+bool InitializeICUDirectory(const std::string& path) {
+  UErrorCode status = U_ZERO_ERROR;
+  if (path.empty()) {
+#ifdef NODE_HAVE_SMALL_ICU
+    // install the 'small' data.
+    udata_setCommonData(&SMALL_ICUDATA_ENTRY_POINT, &status);
+#else  // !NODE_HAVE_SMALL_ICU
+    // no small data, so nothing to do.
+#endif  // !NODE_HAVE_SMALL_ICU
+  } else {
+    u_setDataDirectory(path.c_str());
+    u_init(&status);
+  }
+  return status == U_ZERO_ERROR;
+}
+
+int32_t ToUnicode(MaybeStackBuffer<char>* buf,
+                  const char* input,
+                  size_t length) {
+  UErrorCode status = U_ZERO_ERROR;
+  uint32_t options = UIDNA_NONTRANSITIONAL_TO_UNICODE;
+  UIDNA* uidna = uidna_openUTS46(options, &status);
+  if (U_FAILURE(status))
+    return -1;
+  UIDNAInfo info = UIDNA_INFO_INITIALIZER;
+
+  int32_t len = uidna_nameToUnicodeUTF8(uidna,
+                                        input, length,
+                                        **buf, buf->capacity(),
+                                        &info,
+                                        &status);
+
+  // Do not check info.errors like we do with ToASCII since ToUnicode always
+  // returns a string, despite any possible errors that may have occurred.
+
+  if (status == U_BUFFER_OVERFLOW_ERROR) {
+    status = U_ZERO_ERROR;
+    buf->AllocateSufficientStorage(len);
+    len = uidna_nameToUnicodeUTF8(uidna,
+                                  input, length,
+                                  **buf, buf->capacity(),
+                                  &info,
+                                  &status);
+  }
+
+  // info.errors is ignored as UTS #46 ToUnicode always produces a Unicode
+  // string, regardless of whether an error occurred.
+
+  if (U_FAILURE(status)) {
+    len = -1;
+    buf->SetLength(0);
+  } else {
+    buf->SetLength(len);
+  }
+
+  uidna_close(uidna);
+  return len;
+}
+
+int32_t ToASCII(MaybeStackBuffer<char>* buf,
+                const char* input,
+                size_t length,
+                enum idna_mode mode) {
+  UErrorCode status = U_ZERO_ERROR;
+  uint32_t options =                  // CheckHyphens = false; handled later
+    UIDNA_CHECK_BIDI |                // CheckBidi = true
+    UIDNA_CHECK_CONTEXTJ |            // CheckJoiners = true
+    UIDNA_NONTRANSITIONAL_TO_ASCII;   // Nontransitional_Processing
+  if (mode == IDNA_STRICT) {
+    options |= UIDNA_USE_STD3_RULES;  // UseSTD3ASCIIRules = beStrict
+                                      // VerifyDnsLength = beStrict;
+                                      //   handled later
+  }
+
+  UIDNA* uidna = uidna_openUTS46(options, &status);
+  if (U_FAILURE(status))
+    return -1;
+  UIDNAInfo info = UIDNA_INFO_INITIALIZER;
+
+  int32_t len = uidna_nameToASCII_UTF8(uidna,
+                                       input, length,
+                                       **buf, buf->capacity(),
+                                       &info,
+                                       &status);
+
+  if (status == U_BUFFER_OVERFLOW_ERROR) {
+    status = U_ZERO_ERROR;
+    buf->AllocateSufficientStorage(len);
+    len = uidna_nameToASCII_UTF8(uidna,
+                                 input, length,
+                                 **buf, buf->capacity(),
+                                 &info,
+                                 &status);
+  }
+
+  // In UTS #46 which specifies ToASCII, certain error conditions are
+  // configurable through options, and the WHATWG URL Standard promptly elects
+  // to disable some of them to accommodate for real-world use cases.
+  // Unfortunately, ICU4C's IDNA module does not support disabling some of
+  // these options through `options` above, and thus continues throwing
+  // unnecessary errors. To counter this situation, we just filter out the
+  // errors that may have happened afterwards, before deciding whether to
+  // return an error from this function.
+
+  // CheckHyphens = false
+  // (Specified in the current UTS #46 draft rev. 18.)
+  // Refs:
+  // - https://github.com/whatwg/url/issues/53
+  // - https://github.com/whatwg/url/pull/309
+  // - http://www.unicode.org/review/pri317/
+  // - http://www.unicode.org/reports/tr46/tr46-18.html
+  // - https://www.icann.org/news/announcement-2000-01-07-en
+  info.errors &= ~UIDNA_ERROR_HYPHEN_3_4;
+  info.errors &= ~UIDNA_ERROR_LEADING_HYPHEN;
+  info.errors &= ~UIDNA_ERROR_TRAILING_HYPHEN;
+
+  if (mode != IDNA_STRICT) {
+    // VerifyDnsLength = beStrict
+    info.errors &= ~UIDNA_ERROR_EMPTY_LABEL;
+    info.errors &= ~UIDNA_ERROR_LABEL_TOO_LONG;
+    info.errors &= ~UIDNA_ERROR_DOMAIN_NAME_TOO_LONG;
+  }
+
+  if (U_FAILURE(status) || (mode != IDNA_LENIENT && info.errors != 0)) {
+    len = -1;
+    buf->SetLength(0);
+  } else {
+    buf->SetLength(len);
+  }
+
+  uidna_close(uidna);
+  return len;
+}
+
+static void ToUnicode(const FunctionCallbackInfo<Value>& args) {
+  Environment* env = Environment::GetCurrent(args);
+  CHECK_GE(args.Length(), 1);
+  CHECK(args[0]->IsString());
+  Utf8Value val(env->isolate(), args[0]);
+
+  MaybeStackBuffer<char> buf;
+  int32_t len = ToUnicode(&buf, *val, val.length());
+
+  if (len < 0) {
+    return env->ThrowError("Cannot convert name to Unicode");
+  }
+
+  args.GetReturnValue().Set(
+      String::NewFromUtf8(env->isolate(),
+                          *buf,
+                          NewStringType::kNormal,
+                          len).ToLocalChecked());
+}
+
+static void ToASCII(const FunctionCallbackInfo<Value>& args) {
+  Environment* env = Environment::GetCurrent(args);
+  CHECK_GE(args.Length(), 1);
+  CHECK(args[0]->IsString());
+  Utf8Value val(env->isolate(), args[0]);
+  // optional arg
+  bool lenient = args[1]->BooleanValue(env->context()).FromJust();
+  enum idna_mode mode = lenient ? IDNA_LENIENT : IDNA_DEFAULT;
+
+  MaybeStackBuffer<char> buf;
+  int32_t len = ToASCII(&buf, *val, val.length(), mode);
+
+  if (len < 0) {
+    return env->ThrowError("Cannot convert name to ASCII");
+  }
+
+  args.GetReturnValue().Set(
+      String::NewFromUtf8(env->isolate(),
+                          *buf,
+                          NewStringType::kNormal,
+                          len).ToLocalChecked());
+}
+
+// This is similar to wcwidth except that it takes the current unicode
+// character properties database into consideration, allowing it to
+// correctly calculate the column widths of things like emoji's and
+// newer wide characters. wcwidth, on the other hand, uses a fixed
+// algorithm that does not take things like emoji into proper
+// consideration.
+//
+// TODO(TimothyGu): Investigate Cc (C0/C1 control codes). Both VTE (used by
+// GNOME Terminal) and Konsole don't consider them to be zero-width (see refs
+// below), and when printed in VTE it is Narrow. However GNOME Terminal doesn't
+// allow it to be input. Linux's PTY terminal prints control characters as
+// Narrow rhombi.
+//
+// TODO(TimothyGu): Investigate Hangul jamo characters. Medial vowels and final
+// consonants are 0-width when combined with initial consonants; otherwise they
+// are technically Wide. But many terminals (including Konsole and
+// VTE/GLib-based) implement all medials and finals as 0-width.
+//
+// Refs: https://eev.ee/blog/2015/09/12/dark-corners-of-unicode/#combining-characters-and-character-width
+// Refs: https://github.com/GNOME/glib/blob/79e4d4c6be/glib/guniprop.c#L388-L420
+// Refs: https://github.com/KDE/konsole/blob/8c6a5d13c0/src/konsole_wcwidth.cpp#L101-L223
+static int GetColumnWidth(UChar32 codepoint,
+                          bool ambiguous_as_full_width = false) {
+  const auto zero_width_mask = U_GC_CC_MASK |  // C0/C1 control code
+                               U_GC_CF_MASK |  // Format control character
+                               U_GC_ME_MASK |  // Enclosing mark
+                               U_GC_MN_MASK;   // Nonspacing mark
+  if (codepoint != 0x00AD &&  // SOFT HYPHEN is Cf but not zero-width
+      ((U_MASK(u_charType(codepoint)) & zero_width_mask) ||
+       u_hasBinaryProperty(codepoint, UCHAR_EMOJI_MODIFIER))) {
+    return 0;
+  }
+
+  // UCHAR_EAST_ASIAN_WIDTH is the Unicode property that identifies a
+  // codepoint as being full width, wide, ambiguous, neutral, narrow,
+  // or halfwidth.
+  const int eaw = u_getIntPropertyValue(codepoint, UCHAR_EAST_ASIAN_WIDTH);
+  switch (eaw) {
+    case U_EA_FULLWIDTH:
+    case U_EA_WIDE:
+      return 2;
+    case U_EA_AMBIGUOUS:
+      // See: http://www.unicode.org/reports/tr11/#Ambiguous for details
+      if (ambiguous_as_full_width) {
+        return 2;
+      }
+      // If ambiguous_as_full_width is false:
+      // Fall through
+    case U_EA_NEUTRAL:
+      if (u_hasBinaryProperty(codepoint, UCHAR_EMOJI_PRESENTATION)) {
+        return 2;
+      }
+      // Fall through
+    case U_EA_HALFWIDTH:
+    case U_EA_NARROW:
+    default:
+      return 1;
+  }
+}
+
+// Returns the column width for the given String.
+static void GetStringWidth(const FunctionCallbackInfo<Value>& args) {
+  Environment* env = Environment::GetCurrent(args);
+  if (args.Length() < 1)
+    return;
+
+  bool ambiguous_as_full_width = args[1]->IsTrue();
+  bool expand_emoji_sequence = args[2]->IsTrue();
+
+  if (args[0]->IsNumber()) {
+    uint32_t val;
+    if (!args[0]->Uint32Value(env->context()).To(&val)) return;
+    args.GetReturnValue().Set(GetColumnWidth(val, ambiguous_as_full_width));
+    return;
+  }
+
+  TwoByteValue value(env->isolate(), args[0]);
+  // reinterpret_cast is required by windows to compile
+  UChar* str = reinterpret_cast<UChar*>(*value);
+  static_assert(sizeof(*str) == sizeof(**value),
+                "sizeof(*str) == sizeof(**value)");
+  UChar32 c = 0;
+  UChar32 p;
+  size_t n = 0;
+  uint32_t width = 0;
+
+  while (n < value.length()) {
+    p = c;
+    U16_NEXT(str, n, value.length(), c);
+    // Don't count individual emoji codepoints that occur within an
+    // emoji sequence. This is not necessarily foolproof. Some
+    // environments display emoji sequences in the appropriate
+    // condensed form (as a single emoji glyph), other environments
+    // may not understand an emoji sequence and will display each
+    // individual emoji separately. When this happens, the width
+    // calculated will be off, and there's no reliable way of knowing
+    // in advance if a particular sequence is going to be supported.
+    // The expand_emoji_sequence option allows the caller to skip this
+    // check and count each code within an emoji sequence separately.
+    if (!expand_emoji_sequence &&
+        n > 0 && p == 0x200d &&  // 0x200d == ZWJ (zero width joiner)
+        (u_hasBinaryProperty(c, UCHAR_EMOJI_PRESENTATION) ||
+         u_hasBinaryProperty(c, UCHAR_EMOJI_MODIFIER))) {
+      continue;
+    }
+    width += GetColumnWidth(c, ambiguous_as_full_width);
+  }
+  args.GetReturnValue().Set(width);
+}
+
+void Initialize(Local<Object> target,
+                Local<Value> unused,
+                Local<Context> context,
+                void* priv) {
+  Environment* env = Environment::GetCurrent(context);
+  env->SetMethod(target, "toUnicode", ToUnicode);
+  env->SetMethod(target, "toASCII", ToASCII);
+  env->SetMethod(target, "getStringWidth", GetStringWidth);
+
+  // One-shot converters
+  env->SetMethod(target, "icuErrName", ICUErrorName);
+  env->SetMethod(target, "transcode", Transcode);
+
+  // ConverterObject
+  env->SetMethod(target, "getConverter", ConverterObject::Create);
+  env->SetMethod(target, "decode", ConverterObject::Decode);
+  env->SetMethod(target, "hasConverter", ConverterObject::Has);
+}
+
+}  // namespace i18n
+}  // namespace node
+
+NODE_MODULE_CONTEXT_AWARE_INTERNAL(icu, node::i18n::Initialize)
+
+#endif  // NODE_HAVE_I18N_SUPPORT
diff -Nru orig/src/node_main.cc patched/src/node_main.cc
--- orig/src/node_main.cc	2019-04-30 13:31:49.000000000 -0400
+++ patched/src/node_main.cc	2021-03-10 05:44:54.345299705 -0500
@@ -27,6 +27,10 @@
 #include <VersionHelpers.h>
 #include <WinError.h>
 
+#if defined(__MINGW_VERSION_MAJOR)
+#extern "C" {
+#endif
+
 int wmain(int argc, wchar_t* wargv[]) {
   if (!IsWindows7OrGreater()) {
     fprintf(stderr, "This application is only supported on Windows 7, "
@@ -71,6 +75,11 @@
   // Now that conversion is done, we can finally start.
   return node::Start(argc, argv);
 }
+
+#if defined(__MINGW_VERSION_MAJOR)
+}
+#endif
+
 #else
 // UNIX
 #ifdef __linux__
diff -Nru orig/test/parallel/test-child-process-set-blocking.js patched/test/parallel/test-child-process-set-blocking.js
--- orig/test/parallel/test-child-process-set-blocking.js	2019-04-30 13:31:52.000000000 -0400
+++ patched/test/parallel/test-child-process-set-blocking.js	2021-03-10 05:44:54.345299705 -0500
@@ -26,7 +26,7 @@
 
 const SIZE = 100000;
 
-const cp = ch.spawn('python', ['-c', `print ${SIZE} * "C"`], {
+const cp = ch.spawn('python2', ['-c', `print ${SIZE} * "C"`], {
   stdio: 'inherit'
 });
 
diff -Nru orig/test/parallel/test-debugger-pid.js patched/test/parallel/test-debugger-pid.js
--- orig/test/parallel/test-debugger-pid.js	2019-04-30 13:31:52.000000000 -0400
+++ patched/test/parallel/test-debugger-pid.js	2021-03-10 05:44:54.345299705 -0500
@@ -11,8 +11,9 @@
 
 interfacer.stdout.setEncoding('utf-8');
 interfacer.stderr.setEncoding('utf-8');
+const newline = common.isMinGW ? '\r\n' : '\n';
 const onData = (data) => {
-  data = (buffer + data).split('\n');
+  data = (buffer + data).split(newline);
   buffer = data.pop();
   data.forEach(function(line) {
     interfacer.emit('line', line);
diff -Nru orig/test/parallel/test-https-foafssl.js patched/test/parallel/test-https-foafssl.js
--- orig/test/parallel/test-https-foafssl.js	2019-04-30 13:31:53.000000000 -0400
+++ patched/test/parallel/test-https-foafssl.js	2021-03-10 05:44:54.345299705 -0500
@@ -81,7 +81,11 @@
     server.close();
   });
 
-  client.stdin.write('GET /\n\n');
+  if (common.isMinGW) {
+    client.stdin.write('GET /\r\n\r\n');
+  } else {
+    client.stdin.write('GET /\n\n');
+  }
 
   client.on('error', function(error) {
     throw error;
diff -Nru orig/test/parallel/test-npm-install.js patched/test/parallel/test-npm-install.js
--- orig/test/parallel/test-npm-install.js	2019-04-30 13:31:53.000000000 -0400
+++ patched/test/parallel/test-npm-install.js	2021-03-10 05:44:54.345299705 -0500
@@ -9,6 +9,11 @@
 const fs = require('fs');
 const fixtures = require('../common/fixtures');
 
+if(common.isMinGW) {
+  common.skip('npm is split into its own package');
+  return;
+}
+
 const tmpdir = require('../common/tmpdir');
 tmpdir.refresh();
 const npmSandbox = path.join(tmpdir.path, 'npm-sandbox');
diff -Nru orig/test/parallel/test-stdio-closed.js patched/test/parallel/test-stdio-closed.js
--- orig/test/parallel/test-stdio-closed.js	2019-04-30 13:31:53.000000000 -0400
+++ patched/test/parallel/test-stdio-closed.js	2021-03-10 05:44:54.345299705 -0500
@@ -12,7 +12,7 @@
     process.stderr;
     return;
   }
-  const python = process.env.PYTHON || 'python';
+  const python2 = process.env.PYTHON || 'python2';
   const script = fixtures.path('spawn_closed_stdio.py');
   const proc = spawn(python, [script, process.execPath, __filename, 'child']);
   proc.on('exit', common.mustCall(function(exitCode) {
diff -Nru orig/test/pseudo-tty/no_dropped_stdio.js patched/test/pseudo-tty/no_dropped_stdio.js
--- orig/test/pseudo-tty/no_dropped_stdio.js	2019-04-30 13:31:53.000000000 -0400
+++ patched/test/pseudo-tty/no_dropped_stdio.js	2021-03-10 05:44:54.345299705 -0500
@@ -11,7 +11,7 @@
 // This results in 1025 bytes, just enough to overflow the 1kb OS X TTY buffer.
 out += `${'o'.repeat(24)}O`;
 
-// In AIX, the child exits even before the python parent
+// In AIX, the child exits even before the python2 parent
 // can setup the readloop. Provide a reasonable delay.
 setTimeout(function() {
   process.stdout.write(out);
diff -Nru orig/test/pseudo-tty/no_interleaved_stdio.js patched/test/pseudo-tty/no_interleaved_stdio.js
--- orig/test/pseudo-tty/no_interleaved_stdio.js	2019-04-30 13:31:53.000000000 -0400
+++ patched/test/pseudo-tty/no_interleaved_stdio.js	2021-03-10 05:44:54.345299705 -0500
@@ -13,7 +13,7 @@
 
 const err = '__This is some stderr__';
 
-// In AIX, the child exits even before the python parent
+// In AIX, the child exits even before the python2 parent
 // can setup the readloop. Provide a reasonable delay.
 setTimeout(function() {
   process.stdout.write(out);
diff -Nru orig/test/pseudo-tty/test-stderr-stdout-handle-sigwinch.js patched/test/pseudo-tty/test-stderr-stdout-handle-sigwinch.js
--- orig/test/pseudo-tty/test-stderr-stdout-handle-sigwinch.js	2019-04-30 13:31:53.000000000 -0400
+++ patched/test/pseudo-tty/test-stderr-stdout-handle-sigwinch.js	2021-03-10 05:44:54.345299705 -0500
@@ -27,7 +27,7 @@
                                    process.stdout,
                                    'calling stdout._refreshSize');
 
-// In AIX, the child exits even before the python parent
+// In AIX, the child exits even before the python2 parent
 // can setup the readloop. Provide a reasonable delay.
 setTimeout(function() {
   process.emit('SIGWINCH');
diff -Nru orig/test/pummel/test-child-process-spawn-loop.js patched/test/pummel/test-child-process-spawn-loop.js
--- orig/test/pummel/test-child-process-spawn-loop.js	2019-04-30 13:31:53.000000000 -0400
+++ patched/test/pummel/test-child-process-spawn-loop.js	2021-03-10 05:44:54.345299705 -0500
@@ -30,7 +30,7 @@
 let finished = false;
 
 function doSpawn(i) {
-  const child = spawn('python', ['-c', `print ${SIZE} * "C"`]);
+  const child = spawn('python2', ['-c', `print ${SIZE} * "C"`]);
   let count = 0;
 
   child.stdout.setEncoding('ascii');
diff -Nru orig/tools/check-imports.py patched/tools/check-imports.py
--- orig/tools/check-imports.py	2019-04-30 13:31:53.000000000 -0400
+++ patched/tools/check-imports.py	2021-03-10 05:44:54.345299705 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 
 from __future__ import print_function
 import glob
diff -Nru orig/tools/compress_json.py patched/tools/compress_json.py
--- orig/tools/compress_json.py	2019-04-30 13:31:53.000000000 -0400
+++ patched/tools/compress_json.py	2021-03-10 05:44:54.345299705 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 
 import json
 import struct
diff -Nru orig/tools/configure.d/nodedownload.py patched/tools/configure.d/nodedownload.py
--- orig/tools/configure.d/nodedownload.py	2019-04-30 13:31:53.000000000 -0400
+++ patched/tools/configure.d/nodedownload.py	2021-03-10 05:44:54.345299705 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 # Moved some utilities here from ../../configure
 
 from __future__ import print_function
diff -Nru orig/tools/genv8constants.py patched/tools/genv8constants.py
--- orig/tools/genv8constants.py	2019-04-30 13:31:53.000000000 -0400
+++ patched/tools/genv8constants.py	2021-03-10 05:44:54.345299705 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 
 #
 # genv8constants.py output_file libv8_base.a
diff -Nru orig/tools/gyp/buildbot/buildbot_run.py patched/tools/gyp/buildbot/buildbot_run.py
--- orig/tools/gyp/buildbot/buildbot_run.py	2019-04-30 13:31:53.000000000 -0400
+++ patched/tools/gyp/buildbot/buildbot_run.py	2021-03-10 05:44:54.345299705 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 # Copyright (c) 2012 Google Inc. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
diff -Nru orig/tools/gyp/gyp patched/tools/gyp/gyp
--- orig/tools/gyp/gyp	2019-04-30 13:31:53.000000000 -0400
+++ patched/tools/gyp/gyp	2021-03-10 05:44:54.345299705 -0500
@@ -5,4 +5,4 @@
 
 set -e
 base=$(dirname "$0")
-exec python "${base}/gyp_main.py" "$@"
+exec python2 "${base}/gyp_main.py" "$@"
diff -Nru orig/tools/gyp/gyp.bat.orig patched/tools/gyp/gyp.bat.orig
--- orig/tools/gyp/gyp.bat.orig	1969-12-31 19:00:00.000000000 -0500
+++ patched/tools/gyp/gyp.bat.orig	2021-03-10 05:44:54.345299705 -0500
@@ -0,0 +1,5 @@
+@rem Copyright (c) 2009 Google Inc. All rights reserved.
+@rem Use of this source code is governed by a BSD-style license that can be
+@rem found in the LICENSE file.
+
+@python "%~dp0gyp_main.py" %*
diff -Nru orig/tools/gyp/gyp_main.py patched/tools/gyp/gyp_main.py
--- orig/tools/gyp/gyp_main.py	2019-04-30 13:31:53.000000000 -0400
+++ patched/tools/gyp/gyp_main.py	2021-03-10 05:44:54.345299705 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 
 # Copyright (c) 2009 Google Inc. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
diff -Nru orig/tools/gyp/gyptest.py patched/tools/gyp/gyptest.py
--- orig/tools/gyp/gyptest.py	2019-04-30 13:31:53.000000000 -0400
+++ patched/tools/gyp/gyptest.py	2021-03-10 05:44:54.345299705 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 # Copyright (c) 2012 Google Inc. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
diff -Nru orig/tools/gyp/pylib/gyp/common_test.py patched/tools/gyp/pylib/gyp/common_test.py
--- orig/tools/gyp/pylib/gyp/common_test.py	2019-04-30 13:31:53.000000000 -0400
+++ patched/tools/gyp/pylib/gyp/common_test.py	2021-03-10 05:44:54.345299705 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 
 # Copyright (c) 2012 Google Inc. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
diff -Nru orig/tools/gyp/pylib/gyp/easy_xml_test.py patched/tools/gyp/pylib/gyp/easy_xml_test.py
--- orig/tools/gyp/pylib/gyp/easy_xml_test.py	2019-04-30 13:31:53.000000000 -0400
+++ patched/tools/gyp/pylib/gyp/easy_xml_test.py	2021-03-10 05:44:54.345299705 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 
 # Copyright (c) 2011 Google Inc. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
diff -Nru orig/tools/gyp/pylib/gyp/flock_tool.py patched/tools/gyp/pylib/gyp/flock_tool.py
--- orig/tools/gyp/pylib/gyp/flock_tool.py	2019-04-30 13:31:53.000000000 -0400
+++ patched/tools/gyp/pylib/gyp/flock_tool.py	2021-03-10 05:44:54.345299705 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 # Copyright (c) 2011 Google Inc. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
diff -Nru orig/tools/gyp/pylib/gyp/generator/make.py patched/tools/gyp/pylib/gyp/generator/make.py
--- orig/tools/gyp/pylib/gyp/generator/make.py	2019-04-30 13:31:53.000000000 -0400
+++ patched/tools/gyp/pylib/gyp/generator/make.py	2021-03-10 05:44:54.345299705 -0500
@@ -94,6 +94,8 @@
     default_variables.setdefault('OS', operating_system)
     if flavor == 'aix':
       default_variables.setdefault('SHARED_LIB_SUFFIX', '.a')
+    elif flavor == 'win':
+      default_variables.setdefault('SHARED_LIB_SUFFIX', '.dll')
     else:
       default_variables.setdefault('SHARED_LIB_SUFFIX', '.so')
     default_variables.setdefault('SHARED_LIB_DIR','$(builddir)/lib.$(TOOLSET)')
@@ -172,6 +174,26 @@
 cmd_solink_module = $(LINK.$(TOOLSET)) -o $@ -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -Wl,--start-group $(filter-out FORCE_DO_CMD, $^) -Wl,--end-group $(LIBS)
 """
 
+LINK_COMMANDS_WINMINGW = """\
+quiet_cmd_alink = AR($(TOOLSET)) $@
+cmd_alink = rm -f $@ && echo $(filter %.o,$^) >> $(@).rsp && $(AR.$(TOOLSET)) crs $@ @$(@).rsp
+
+quiet_cmd_alink_thin = AR($(TOOLSET)) $@
+cmd_alink_thin = rm -f $@ && echo $(filter %.o,$^) >> $(@).rsp && $(AR.$(TOOLSET)) crsT $@ $(filter %.o,$^) @$(@).rsp
+
+# Due to circular dependencies between libraries :(, we wrap the
+# special "figure out circular dependencies" flags around the entire
+# input list during linking.
+quiet_cmd_link = LINK($(TOOLSET)) $@
+cmd_link = $(LINK.$(TOOLSET)) -o $@ $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,--start-group $(LD_INPUTS) $(LIBS) -Wl,--end-group
+
+quiet_cmd_solink = SOLINK($(TOOLSET)) $@
+cmd_solink = $(LINK.$(TOOLSET)) -o $@ -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,--out-implib,$(@F).a -Wl,--whole-archive $(LD_INPUTS) -Wl,--no-whole-archive $(LIBS)
+
+quiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@
+cmd_solink_module = $(LINK.$(TOOLSET)) -o $@ -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,--out-implib,$(@F).a -Wl,--start-group $(filter-out FORCE_DO_CMD, $^) -Wl,--end-group $(LIBS)
+"""
+
 LINK_COMMANDS_MAC = """\
 quiet_cmd_alink = LIBTOOL-STATIC $@
 cmd_alink = rm -f $@ && ./gyp-mac-tool filter-libtool libtool $(GYP_LIBTOOLFLAGS) -static -o $@ $(filter %.o,$^)
@@ -1354,6 +1376,8 @@
       target_prefix = 'lib'
       if self.flavor == 'aix':
         target_ext = '.a'
+      elif  self.flavor == 'win':
+        target_ext = '.dll'
       else:
         target_ext = '.so'
     elif self.type == 'none':
@@ -2060,6 +2084,11 @@
     header_params.update({
         'copy_archive_args': copy_archive_arguments,
     })
+  elif flavor == 'win':
+    copy_archive_arguments = '-pPRf'
+    header_params.update({
+        'link_commands': LINK_COMMANDS_WINMINGW,
+    })
   elif flavor == 'aix':
     copy_archive_arguments = '-pPRf'
     header_params.update({
diff -Nru orig/tools/gyp/pylib/gyp/generator/msvs_test.py patched/tools/gyp/pylib/gyp/generator/msvs_test.py
--- orig/tools/gyp/pylib/gyp/generator/msvs_test.py	2019-04-30 13:31:53.000000000 -0400
+++ patched/tools/gyp/pylib/gyp/generator/msvs_test.py	2021-03-10 05:44:54.345299705 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 # Copyright (c) 2012 Google Inc. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
diff -Nru orig/tools/gyp/pylib/gyp/generator/ninja.py patched/tools/gyp/pylib/gyp/generator/ninja.py
--- orig/tools/gyp/pylib/gyp/generator/ninja.py	2019-04-30 13:31:53.000000000 -0400
+++ patched/tools/gyp/pylib/gyp/generator/ninja.py	2021-03-10 05:44:54.345299705 -0500
@@ -1812,7 +1812,7 @@
     return '%(python)s gyp-win-tool link-with-manifests $arch %(embed)s ' \
            '%(out)s "%(ldcmd)s" %(resname)s $mt $rc "$intermediatemanifest" ' \
            '$manifests' % {
-               'python': sys.executable,
+               'python2': sys.executable,
                'out': out,
                'ldcmd': ldcmd,
                'resname': resource_name,
diff -Nru orig/tools/gyp/pylib/gyp/generator/ninja_test.py patched/tools/gyp/pylib/gyp/generator/ninja_test.py
--- orig/tools/gyp/pylib/gyp/generator/ninja_test.py	2019-04-30 13:31:53.000000000 -0400
+++ patched/tools/gyp/pylib/gyp/generator/ninja_test.py	2021-03-10 05:44:54.345299705 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 
 # Copyright (c) 2012 Google Inc. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
diff -Nru orig/tools/gyp/pylib/gyp/generator/xcode.py patched/tools/gyp/pylib/gyp/generator/xcode.py
--- orig/tools/gyp/pylib/gyp/generator/xcode.py	2019-04-30 13:31:53.000000000 -0400
+++ patched/tools/gyp/pylib/gyp/generator/xcode.py	2021-03-10 05:44:54.345299705 -0500
@@ -284,7 +284,7 @@
         command_prefix = ''
         if serialize_all_tests:
           command_prefix = \
-"""python -c "import fcntl, subprocess, sys
+"""python2 -c "import fcntl, subprocess, sys
 file = open('$TMPDIR/GYP_serialize_test_runs', 'a')
 fcntl.flock(file.fileno(), fcntl.LOCK_EX)
 sys.exit(subprocess.call(sys.argv[1:]))" """
diff -Nru orig/tools/gyp/pylib/gyp/generator/xcode_test.py patched/tools/gyp/pylib/gyp/generator/xcode_test.py
--- orig/tools/gyp/pylib/gyp/generator/xcode_test.py	2019-04-30 13:31:53.000000000 -0400
+++ patched/tools/gyp/pylib/gyp/generator/xcode_test.py	2021-03-10 05:44:54.345299705 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 
 # Copyright (c) 2013 Google Inc. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
diff -Nru orig/tools/gyp/pylib/gyp/__init__.py patched/tools/gyp/pylib/gyp/__init__.py
--- orig/tools/gyp/pylib/gyp/__init__.py	2019-04-30 13:31:53.000000000 -0400
+++ patched/tools/gyp/pylib/gyp/__init__.py	2021-03-10 05:44:54.345299705 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 
 # Copyright (c) 2012 Google Inc. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
diff -Nru orig/tools/gyp/pylib/gyp/input_test.py patched/tools/gyp/pylib/gyp/input_test.py
--- orig/tools/gyp/pylib/gyp/input_test.py	2019-04-30 13:31:53.000000000 -0400
+++ patched/tools/gyp/pylib/gyp/input_test.py	2021-03-10 05:44:54.345299705 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 
 # Copyright 2013 Google Inc. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
diff -Nru orig/tools/gyp/pylib/gyp/mac_tool.py patched/tools/gyp/pylib/gyp/mac_tool.py
--- orig/tools/gyp/pylib/gyp/mac_tool.py	2019-04-30 13:31:53.000000000 -0400
+++ patched/tools/gyp/pylib/gyp/mac_tool.py	2021-03-10 05:44:54.349299697 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 # Copyright (c) 2012 Google Inc. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
diff -Nru orig/tools/gyp/pylib/gyp/MSVSSettings_test.py patched/tools/gyp/pylib/gyp/MSVSSettings_test.py
--- orig/tools/gyp/pylib/gyp/MSVSSettings_test.py	2019-04-30 13:31:53.000000000 -0400
+++ patched/tools/gyp/pylib/gyp/MSVSSettings_test.py	2021-03-10 05:44:54.349299697 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 
 # Copyright (c) 2012 Google Inc. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
diff -Nru orig/tools/gyp/pylib/gyp/win_tool.py patched/tools/gyp/pylib/gyp/win_tool.py
--- orig/tools/gyp/pylib/gyp/win_tool.py	2019-04-30 13:31:53.000000000 -0400
+++ patched/tools/gyp/pylib/gyp/win_tool.py	2021-03-10 05:44:54.349299697 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 
 # Copyright (c) 2012 Google Inc. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
@@ -152,7 +152,7 @@
     # first and only link. We still tell link to generate a manifest, but we
     # only use that to assert that our simpler process did not miss anything.
     variables = {
-      'python': sys.executable,
+      'python2': sys.executable,
       'arch': arch,
       'out': out,
       'ldcmd': ldcmd,
diff -Nru orig/tools/gyp/samples/samples patched/tools/gyp/samples/samples
--- orig/tools/gyp/samples/samples	2019-04-30 13:31:53.000000000 -0400
+++ patched/tools/gyp/samples/samples	2021-03-10 05:44:54.349299697 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/python
+#!/usr/bin/python2
 
 # Copyright (c) 2009 Google Inc. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
diff -Nru orig/tools/gyp/samples/samples.bat.orig patched/tools/gyp/samples/samples.bat.orig
--- orig/tools/gyp/samples/samples.bat.orig	1969-12-31 19:00:00.000000000 -0500
+++ patched/tools/gyp/samples/samples.bat.orig	2021-03-10 05:44:54.349299697 -0500
@@ -0,0 +1,5 @@
+@rem Copyright (c) 2009 Google Inc. All rights reserved.
+@rem Use of this source code is governed by a BSD-style license that can be
+@rem found in the LICENSE file.
+
+@python %~dp0/samples %*
diff -Nru orig/tools/gyp/setup.py patched/tools/gyp/setup.py
--- orig/tools/gyp/setup.py	2019-04-30 13:31:53.000000000 -0400
+++ patched/tools/gyp/setup.py	2021-03-10 05:44:54.349299697 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 
 # Copyright (c) 2009 Google Inc. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
diff -Nru orig/tools/gyp/tools/emacs/testdata/media.gyp patched/tools/gyp/tools/emacs/testdata/media.gyp
--- orig/tools/gyp/tools/emacs/testdata/media.gyp	2019-04-30 13:31:53.000000000 -0400
+++ patched/tools/gyp/tools/emacs/testdata/media.gyp	2021-03-10 05:44:54.349299697 -0500
@@ -987,7 +987,7 @@
                 '<(SHARED_INTERMEDIATE_DIR)/media/jni/media_player_listener_jni.h',
               ],
               'action': [
-                'python',
+                'python2',
                 '<(DEPTH)/base/android/jni_generator/jni_generator.py',
                 '-o',
                 '<@(_inputs)',
diff -Nru orig/tools/gyp/tools/emacs/testdata/media.gyp.fontified patched/tools/gyp/tools/emacs/testdata/media.gyp.fontified
--- orig/tools/gyp/tools/emacs/testdata/media.gyp.fontified	2019-04-30 13:31:53.000000000 -0400
+++ patched/tools/gyp/tools/emacs/testdata/media.gyp.fontified	2021-03-10 05:44:54.349299697 -0500
@@ -988,7 +988,7 @@
                 '<(SHARED_INTERMEDIATE_DIR)/media/jni/media_player_listener_jni.h',
               ],
               'action': [
-                'python',
+                'python2',
                 '<(DEPTH)/base/android/jni_generator/jni_generator.py',
                 '-o',
                 '<@(_inputs)',
diff -Nru orig/tools/gyp/tools/graphviz.py patched/tools/gyp/tools/graphviz.py
--- orig/tools/gyp/tools/graphviz.py	2019-04-30 13:31:53.000000000 -0400
+++ patched/tools/gyp/tools/graphviz.py	2021-03-10 05:44:54.349299697 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 
 # Copyright (c) 2011 Google Inc. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
diff -Nru orig/tools/gyp/tools/pretty_gyp.py patched/tools/gyp/tools/pretty_gyp.py
--- orig/tools/gyp/tools/pretty_gyp.py	2019-04-30 13:31:53.000000000 -0400
+++ patched/tools/gyp/tools/pretty_gyp.py	2021-03-10 05:44:54.349299697 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 
 # Copyright (c) 2012 Google Inc. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
diff -Nru orig/tools/gyp/tools/pretty_sln.py patched/tools/gyp/tools/pretty_sln.py
--- orig/tools/gyp/tools/pretty_sln.py	2019-04-30 13:31:53.000000000 -0400
+++ patched/tools/gyp/tools/pretty_sln.py	2021-03-10 05:44:54.349299697 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 
 # Copyright (c) 2012 Google Inc. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
diff -Nru orig/tools/gyp/tools/pretty_vcproj.py patched/tools/gyp/tools/pretty_vcproj.py
--- orig/tools/gyp/tools/pretty_vcproj.py	2019-04-30 13:31:53.000000000 -0400
+++ patched/tools/gyp/tools/pretty_vcproj.py	2021-03-10 05:44:54.349299697 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 
 # Copyright (c) 2012 Google Inc. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
diff -Nru orig/tools/gyp_node.py patched/tools/gyp_node.py
--- orig/tools/gyp_node.py	2019-04-30 13:31:53.000000000 -0400
+++ patched/tools/gyp_node.py	2021-03-10 05:44:54.349299697 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 from __future__ import print_function
 import os
 import sys
diff -Nru orig/tools/icu/icu-generic.gyp patched/tools/icu/icu-generic.gyp
--- orig/tools/icu/icu-generic.gyp	2019-04-30 13:31:53.000000000 -0400
+++ patched/tools/icu/icu-generic.gyp	2021-03-10 05:44:54.349299697 -0500
@@ -240,7 +240,7 @@
                   'msvs_quote_cmd': 0,
                   'inputs': [ '<(icu_data_in)', 'icu_small.json' ],
                   'outputs': [ '<(SHARED_INTERMEDIATE_DIR)/icutmp/icudt<(icu_ver_major)<(icu_endianness).dat' ],
-                  'action': [ 'python',
+                  'action': [ 'python2',
                               'icutrim.py',
                               '-P', '<(PRODUCT_DIR)/.', # '.' suffix is a workaround against GYP assumptions :(
                               '-D', '<(icu_data_in)',
@@ -322,7 +322,7 @@
                   'action_name': 'icutrim',
                   'inputs': [ '<(icu_data_in)', 'icu_small.json' ],
                   'outputs': [ '<(SHARED_INTERMEDIATE_DIR)/icutmp/icudt<(icu_ver_major)<(icu_endianness).dat' ],
-                  'action': [ 'python',
+                  'action': [ 'python2',
                               'icutrim.py',
                               '-P', '<(PRODUCT_DIR)',
                               '-D', '<(icu_data_in)',
diff -Nru orig/tools/icu/icutrim.py patched/tools/icu/icutrim.py
--- orig/tools/icu/icutrim.py	2019-04-30 13:31:53.000000000 -0400
+++ patched/tools/icu/icutrim.py	2021-03-10 05:44:54.349299697 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/python
+#!/usr/bin/python2
 #
 # Copyright (C) 2014 IBM Corporation and Others. All Rights Reserved.
 #
diff -Nru orig/tools/icu/shrink-icu-src.py patched/tools/icu/shrink-icu-src.py
--- orig/tools/icu/shrink-icu-src.py	2019-04-30 13:31:53.000000000 -0400
+++ patched/tools/icu/shrink-icu-src.py	2021-03-10 05:44:54.349299697 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 from __future__ import print_function
 import optparse
 import os
diff -Nru orig/tools/inspector_protocol/check_protocol_compatibility.py patched/tools/inspector_protocol/check_protocol_compatibility.py
--- orig/tools/inspector_protocol/check_protocol_compatibility.py	2019-04-30 13:31:53.000000000 -0400
+++ patched/tools/inspector_protocol/check_protocol_compatibility.py	2021-03-10 05:44:54.349299697 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 # Copyright (c) 2011 Google Inc. All rights reserved.
 #
 # Redistribution and use in source and binary forms, with or without
diff -Nru orig/tools/inspector_protocol/code_generator.py patched/tools/inspector_protocol/code_generator.py
--- orig/tools/inspector_protocol/code_generator.py	2019-04-30 13:31:53.000000000 -0400
+++ patched/tools/inspector_protocol/code_generator.py	2021-03-10 05:44:54.349299697 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 # Copyright 2016 The Chromium Authors. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
diff -Nru orig/tools/inspector_protocol/concatenate_protocols.py patched/tools/inspector_protocol/concatenate_protocols.py
--- orig/tools/inspector_protocol/concatenate_protocols.py	2019-04-30 13:31:53.000000000 -0400
+++ patched/tools/inspector_protocol/concatenate_protocols.py	2021-03-10 05:44:54.349299697 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 # Copyright 2016 The Chromium Authors. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
diff -Nru orig/tools/inspector_protocol/convert_protocol_to_json.py patched/tools/inspector_protocol/convert_protocol_to_json.py
--- orig/tools/inspector_protocol/convert_protocol_to_json.py	2019-04-30 13:31:53.000000000 -0400
+++ patched/tools/inspector_protocol/convert_protocol_to_json.py	2021-03-10 05:44:54.349299697 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 # Copyright 2017 The Chromium Authors. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
diff -Nru orig/tools/install.py patched/tools/install.py
--- orig/tools/install.py	2019-04-30 13:31:53.000000000 -0400
+++ patched/tools/install.py	2021-03-10 05:44:54.349299697 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 
 from __future__ import print_function
 import ast
@@ -99,7 +99,17 @@
   if action == uninstall:
     action([link_path], 'bin/npm')
   elif action == install:
-    try_symlink('../lib/node_modules/npm/bin/npm-cli.js', link_path)
+  # Use MSYS2 shell script wrapper.
+    if ((os.name == 'nt' and 'GCC' in sys.version) or
+        (os.name == 'posix' and 'NT' in platform.system())):
+      # Copy the wrapper shell script
+      try_copy('deps/npm/bin/npm', link_path)
+      # deps/npm/bin/npm is a shell script so the shebang must run sh, not node
+      s = open(link_path, 'r').read()
+      s = re.sub(r'#!.*\n', '#!' + '/usr/bin/env sh' + '\n', s)
+      open(link_path, 'w').write(s)
+    else:
+      try_symlink('../lib/node_modules/npm/bin/npm-cli.js', link_path)
   else:
     assert(0) # unhandled action type
 
@@ -108,7 +118,17 @@
   if action == uninstall:
     action([link_path], 'bin/npx')
   elif action == install:
-    try_symlink('../lib/node_modules/npm/bin/npx-cli.js', link_path)
+  # Use MSYS2 shell script wrapper.
+    if ((os.name == 'nt' and 'GCC' in sys.version) or
+        (os.name == 'posix' and 'NT' in platform.system())):
+      # Copy the wrapper shell script
+      try_copy('deps/npm/bin/npx', link_path)
+      # deps/npm/bin/npm is a shell script so the shebang must run sh, not node
+      s = open(link_path, 'r').read()
+      s = re.sub(r'#!.*\n', '#!' + '/usr/bin/env sh' + '\n', s)
+      open(link_path, 'w').write(s)
+    else:
+      try_symlink('../lib/node_modules/npm/bin/npx-cli.js', link_path)
   else:
     assert(0) # unhandled action type
 
diff -Nru orig/tools/js2c.py patched/tools/js2c.py
--- orig/tools/js2c.py	2019-04-30 13:31:53.000000000 -0400
+++ patched/tools/js2c.py	2021-03-10 05:44:54.349299697 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 #
 # Copyright 2006-2008 the V8 project authors. All rights reserved.
 # Redistribution and use in source and binary forms, with or without
diff -Nru orig/tools/mkssldef.py patched/tools/mkssldef.py
--- orig/tools/mkssldef.py	2019-04-30 13:31:53.000000000 -0400
+++ patched/tools/mkssldef.py	2021-03-10 05:44:54.349299697 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 
 from __future__ import print_function
 import re
diff -Nru orig/tools/run-valgrind.py patched/tools/run-valgrind.py
--- orig/tools/run-valgrind.py	2019-04-30 13:31:55.000000000 -0400
+++ patched/tools/run-valgrind.py	2021-03-10 05:44:54.349299697 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 #
 # Copyright 2009 the V8 project authors. All rights reserved.
 # Redistribution and use in source and binary forms, with or without
diff -Nru orig/tools/specialize_node_d.py patched/tools/specialize_node_d.py
--- orig/tools/specialize_node_d.py	2019-04-30 13:31:55.000000000 -0400
+++ patched/tools/specialize_node_d.py	2021-03-10 05:44:54.349299697 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 
 #
 # specialize_node_d.py output_file src/node.d flavor arch
diff -Nru orig/tools/test.py patched/tools/test.py
--- orig/tools/test.py	2019-04-30 13:31:55.000000000 -0400
+++ patched/tools/test.py	2021-03-10 05:44:54.349299697 -0500
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 #
 # Copyright 2008 the V8 project authors. All rights reserved.
 # Redistribution and use in source and binary forms, with or without
