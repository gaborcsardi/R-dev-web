\documentclass[12pt]{article}
\title{Parsing Rd files}
\author{Duncan Murdoch}

\usepackage{Sweave}

\SweaveOpts{concordance=true}

\newcommand{\parseRd}{\texttt{parse\_Rd()} }
\newcommand{\Rdtag}{\texttt{Rd\_tag} }
\newcommand{\Rdoption}{\texttt{Rd\_option} }

\begin{document}

\maketitle

\abstract{
R-devel (to become R 2.9.x) will soon have a parser for Rd
format help files.  This will allow easier processing, 
easier syntax checking, and eventually, easier conversion to other formats.

To write this parser, it has been necessary to make some small changes
to the specification of the format as described in Writing R Extensions, and to
make some choices when that description was ambiguous.  Some existing Rd files do
not meet the stricter format requirements (and some were incorrectly formatted
under the old requirements, but the errors were missed by the older checks).

This document describes the new format, necessary changes to existing Rd files,
and the structure returned from the new \parseRd function.
}

\section{Introduction}

The R documentation (Rd) file format has not had a formal
description.  It has grown over time, with pieces added, and R and Perl
code written to recognize it.  

This document describes a formal parser (written in Bison) for the format,
and the R structure that it outputs.  The intention is to make it easier for the
format to evolve, or to be replaced with a completely new one.

The next section describes the syntax; section \ref{sec:changes}
describes changes from what is described in Writing R Extensions for R
2.8.0.  Finally, the last section describes the \parseRd
function and its output.  This document does not describe the
interpretation of any of the markup in Rd files.

\section{Rd Syntax Specification}

Rd files are text files with an associated encoding, readable as text
connections in R.  The syntax only depends on a few ASCII characters, so
at the level of this specification the encoding is not important, however
higher level interpretation will depend on the text connection having
read the proper encoding of the file.

There are three distinct types of text within an Rd file:  LaTeX-like,  
R-like, and verbatim.  The first two contain markup, text and comments;
verbatim text contains only text and comments.

\subsection{Encodings}

The parser works on connections, which have an associated encoding.
It is the caller's responsibility to declare the connection encoding properly
when it is opened.  

Not all encodings may be supported, because the libraries R uses
cannot always perform conversions.  In particular, Asian double byte
encodings are likely to cause trouble when that is not the native
encoding.  Plain ASCII, UTF-8 and Latin1 should be supported on all
systems.

\subsection{Lexical structure}

The characters \verb!\!, \verb!%!, \verb!{!, and \verb!}! have special meaning
in almost all parts of an Rd file; details are given below.

End of line (newline) characters mark the end of pieces of text.  The end
of a file does the same.  These are not returned by the parser.

The brackets \verb![! and \verb!]! have special meaning in certain contexts; 
see section \ref{sec:options}.

Whitespace (blanks, tabs and empty lines) is ignored at the start of text in LaTeX-like
sections, and at the top level.


\subsubsection{The backslash}

The backslash \verb!\! is used as an escape character:  \verb!\\!, \verb!\%!,
\verb!\{! and \verb!\}! remove the special meaning of the second character.  
The parser will drop the initial backslash, and return the other character as
part of the text.

The backslash is also used as an initial character for markup macros.  In an
R-like or LaTeX-like context, a backslash followed by an 
alphabetic character starts a macro; the macro name continues until
the first non-alphanumeric character.  If the name is not recognized 
a syntax error is signalled.

All other uses of backslashes are allowed, and are passed through by the
parser as text.

\subsubsection{The percent symbol}

An unescaped percent symbol \verb!%! marks the beginning of an Rd comment, which
runs to the end of the current line.  The parser returns these marked as
comments.

\subsubsection{Braces}

The braces \verb!{! and \verb!}! are used to mark the arguments to markup macros,
and may also appear within R-like or verbatim text, provided they balance.  The parser keeps
a count of brace depth, and the return to zero depth signals the end of an argument.
Opening and closing braces on arguments are not returned by the parser, but
balanced braces within text are.

The one exception to special handling of braces is within quoted strings in R-like code,
where braces need not be escaped.  For example, \verb!\code{ "{" }! is legal.

\subsection{Markup}

Markup includes macros starting with a backslash \verb!\! with the
second character alphabetic.  Some
macros (e.g. \verb!\R!) take no arguments, some (e.g. \verb!\code{}!)
take one argument surrounded by braces, and some (e.g.
\verb!\section{}{}!) take two arguments surrounded by braces.

There are also three special classes of macros.  The \verb!\link{}! macro \label{sec:options}
may take one argument or two, with the first marked as an option in square brackets,
e.g. \verb!\link[option]{arg}!.  The \verb!\eqn{}! and \verb!deqn{}! macros
may take one or two arguments in braces, e.g. \verb!\eqn{}! or \verb!\eqn{}{}!. 

The last special class of macros consists of \verb!#ifdef ... #endif! and
\verb!#ifndef ... #endif!. The \verb!#! symbols must appear as the first character on
a line starting with \verb!#ifdef!, \verb!#ifndef!, or \verb!#endif!, 
or it is not considered special.

These look like C preprocessor directives, but are processed
by the parser as two argument macros, with the first argument being the token on the 
line of the first directive, and the second one being the text between the first 
directive and the \verb!#endif!.  For example, 
\begin{verbatim}
#ifdef unix
Some text
#endif
\end{verbatim}
is processed with first argument \verb!unix! and second argument \verb!Some text!.

Markup macros are subdivided into those that start sections of the Rd file, and
those that may be used within a section.  The sectioning macros may only be 
used at the top level, while the others must be nested within the arguments of 
other macros.  

Markup macros are also subdivided into those that contain list-like content, and those that
don't.  The \verb!\item! macro may only be used within the argument of a list-like
macro.  Within \verb!\enumerate{}! or \verb!\itemize{}! it takes no arguments,
within \verb!\arguments{}!, \verb!\value{}! and \verb!\describe{}! it takes two arguments.

Finally, the text within the argument of each macro is classified into one
of the three types of text mentioned above.  For example, the text within \verb!\code{}!
macros is R-like, and that within \verb!\samp{}! macros is verbatim.

The complete list of Rd file macros is shown in Tables \ref{tab:sectioning} to \ref{tab:other}.
\begin{table}
\caption{Table of sectioning macros. \label{tab:sectioning}}
\begin{center}\begin{tabular}{lcccc}
\hline
Macro & Arguments & Section? & List? & Text type \\
\hline 
\verb!\arguments! & 1 & yes & \verb!\item{}{}! & Latex-like \\

\verb!\author!  & 1 &   yes     & no    & Latex-like \\
\verb!\concept! & 1 &   yes     & no    & Latex-like \\
\verb!\description!& 1 &   yes     & no    & Latex-like \\
\verb!\details! & 1 &   yes     & no    & Latex-like \\
\verb!\docType! & 1 &   yes     & no    & Latex-like \\

\verb!\encoding!& 1 &   yes     & no    & Latex-like \\
\verb!\format!  & 1 &   yes     & no    & Latex-like \\
\verb!\keyword! & 1 &   yes     & no    & Latex-like \\
\verb!\name! & 1 &   yes     & no    & Latex-like \\
\verb!\note!    & 1 &   yes     & no    & Latex-like \\

\verb!\references! & 1 &   yes     & no    & Latex-like \\
\verb!\section! & 2 &   yes     & no    & Latex-like \\
\verb!\seealso! & 1 &   yes     & no    & Latex-like \\
\verb!\source!  & 1 &   yes     & no    & Latex-like \\
\verb!\title!   & 1 &   yes     & no    & Latex-like \\

\verb!\value! & 1 & yes & \verb!\item{}{}! & Latex-like \\

                &   &           &       & \\
    
\verb!\examples!& 1 &   yes     & no    & R-like \\
\verb!\usage!   & 1 &   yes     & no    & R-like \\
                &   &           &       & \\
                
\verb!\alias!   & 1 &   yes     & no    & Verbatim \\
\verb!\synopsis!   & 1 &   yes     & no    & Verbatim \\

                &   &           &       & \\

\verb!\arguments!& 1 &   yes     & \verb!\item{}{}!    & Latex-like \\
\verb!\value!   & 1 &   yes     & \verb!\item{}{}!    & Latex-like \\
    
\hline
\end{tabular}\end{center}
\end{table}

\begin{table}
\caption{Table of markup macros within sections taking LaTeX-like text. \label{tab:latex}}
\begin{center}\begin{tabular}{lcccc}
\hline
Macro & Arguments & Section? & List? & Text type \\
\hline 
                
\verb!\acronym! & 1 & no   & no    & Latex-like \\
\verb!\bold!    & 1 &   no     & no    & Latex-like \\
\verb!\dfn!      & 1 &   no     & no    & Latex-like \\
\verb!\dQuote!  & 1 &   no     & no    & Latex-like \\
\verb!\email!   & 1 &   no     & no    & Latex-like \\

\verb!\emph!    & 1 &   no     & no    & Latex-like \\
\verb!\file!    & 1 &   no     & no    & Latex-like \\

\verb!\item!    & special &   no     & no    & Latex-like \\

\verb!\linkS4class! & 1 &   no     & no    & Latex-like \\
\verb!\pkg!     & 1 &   no     & no    & Latex-like \\
\verb!\sQuote!  & 1 &   no     & no    & Latex-like \\

\verb!\strong!  & 1 &   no     & no    & Latex-like \\
\verb!\var!     & 1 &   no     & no    & Latex-like \\

                &   &           &       & \\

\verb!\describe!& 1 &   no     & \verb!\item{}{}!    & Latex-like \\
\verb!\enumerate!& 1 &   no     & \verb!\item!    & Latex-like \\
\verb!\itemize! & 1 &   no     & \verb!\item!    & Latex-like \\

                &   &           &       & \\
    
\verb!\enc!     & 2 &   no     & no    & Latex-like \\
\verb!\method!  & 2 &   no     & no    & Latex-like \\
\verb!\S3method!& 2 & no    & no    & Latex-like \\
\verb!\S4method!& 2 &   no     & no    & Latex-like \\
\verb!\tabular! & 2 &   no     & no    & Latex-like \\
    

                &   &           &       & \\
       
\verb!\link!  & option plus 1 &   no     & no  & Latex-like \\  


\hline
\end{tabular}\end{center}
\end{table}

\begin{table}
\caption{Table of markup macros within sections taking no text, R-like text,
or verbatim text. \label{tab:other}}
\begin{center}\begin{tabular}{lcccc}
\hline
Macro & Arguments & Section? & List? & Text type \\
\hline 
\verb!\cr!      & 0 &   no     & no    &  \\
\verb!\dots!    & 0 &   no     & no    &  \\
\verb!\ldots!   & 0 &   no     & no    &  \\
\verb!\R!       & 0 &   no     & no    &  \\
\verb!\tab!     & 0 &   no     & no    &  \\

                &   &           &       & \\ 
       
\verb!\code!    & 1 &   no     & no    & R-like \\
\verb!\dontrun! & 1 &   no     & no    & R-like \\
\verb!\dontshow!& 1 &   no     & no    & R-like \\
\verb!\donttest!& 1 &   no     & no    & R-like \\
\verb!\testonly!& 1 &   no     & no    & R-like \\
                &   &           &       & \\  
    
\verb!\command! & 1 & no & no   & Verbatim \\
\verb!\env!     & 1 &   no     & no    & Verbatim \\
\verb!\kbd!      & 1 &  no      & no    & Verbatim \\
\verb!\option!  & 1 &   no     & no    & Verbatim \\
\verb!\preformatted! & 1 &   no     & no    & Verbatim \\

\verb!\samp!    & 1 &   no     & no    & Verbatim \\
\verb!\special! & 1 &   no     & no    & Verbatim \\
\verb!\url!     & 1 &   no     & no    & Verbatim \\
    
\verb!\deqn!    & 1 or 2 &   no     & no    & Verbatim \\
\verb!\eqn!     & 1 or 2 &   no     & no    & Verbatim \\
\hline

\end{tabular}\end{center}
\end{table}


\subsection{LaTeX-like text}

LaTeX-like text in an Rd file is a stream of markup, text, and comments.  

Text in LaTeX-like mode consists of all characters other than markup and comments.  The
white space within text is not considered relevant; currently the parser 
removes leading whitespace but may keep following whitespace.  This is subject to change.

Braces within LaTeX-like text must be escaped as \verb!\{! and \verb!\}! except when
used to delimit arguments to markup macros.

Brackets \verb![! and \verb!]! within LaTeX-like text only have
syntactic relevance after the \verb!\link! macro, where they are used
to delimit the optional argument.

Quotes \verb!"!, \verb!'! and \verb!`! have no syntactic relevance within LaTeX-like 
text.


\subsection{R-like text}

R-like text in an Rd file is a stream of markup, R code, and comments.  The underlying
mental model is that the markup could be replaced by suitable text and the R code would be
parseable by \verb!parse()!, but \parseRd does not enforce this.

There are two types of comments in R-like mode.  As elsewhere in Rd files, Rd comments 
start with \verb!%!, and run to the end of the line.

R-like comments start with \verb!#! and run to either the end of the line, or a brace
that closes the block containing the R-like text.  Unlike Rd comments, the
Rd parser will return R comments as part of the text of the code; the Rd
comment will be returned marked as a comment.

Quoted strings (using \verb!"!, \verb!'! or \verb!`!)
within R-like text follow R rules:  the string 
delimiters must match and markup and comments within them are taken
to be part of the strings and are not interpreted by the Rd parser.  This includes
braces and R-like comments, but there are two exceptions:
\begin{enumerate}
\item \verb!%! characters must be escaped 
even within strings, or they will be taken as Rd comments.
\item The sequence \verb!\l! in a string will be taken to 
start a markup macro.  This is intended to allow \verb!\link! to be 
used in a string (e.g. the common idiom \verb!\code{"\link{someclass}"}!). 
\label{link}
\end{enumerate}


Braces within R-like text outside of quoted strings must balance, or be escaped.  

Outside of a quoted string, in R-like text the escape character \verb!\! indicates
the start of a markup macro.  No markup macros are recognized within quoted strings
except as noted in \ref{link} above.

\subsection{Verbatim text}

Verbatim text within an Rd file is a pure stream of text, uninterpreted by
the parser, with the exceptions that braces must balance or be escaped,
and \verb!%! comments are recognized.

No markup macros are recognized within verbatim text.

\section{Changes from R 2.8.x Rd format} \label{sec:changes}

The following list describes syntax that was accepted in R 2.8.x but which
is not accepted by the \parseRd parser.

\begin{enumerate}
\item  Within LaTeX-like text, balanced braces that are not attached to a macro 
were ignored; now they are not allowed.
\item  The \verb!\R! macro was sometimes used with a single empty argument; now
it must be used with no argument.
\item  The \verb!\code{}! macro was used for general verbatim text, similar to
\verb!\samp{}!; now the latter (or \verb!\preformatted!) 
must be used when the text is not R-like.
This mainly affects descriptions of escape sequences (e.g. \verb!\code{\a}! should
now be written as \verb!\samp{\a}!, as otherwise \verb!\a! would be taken
to be a markup macro), and descriptions of languages other than R (e.g.
examples of regular expressions are often not syntactically valid R).
\item Treating \verb!#ifdef ... #endif! and \verb!#ifndef ... #endif! as markup
macros means that they must be wholly nested within other macros.  For example, 
the construction
\begin{verbatim}
\title{
#ifdef unix
Unix title}
#endif
#ifdef windows
Windows title}
#endif
\end{verbatim}
needs to be rewritten as
\begin{verbatim}
\title{
#ifdef unix
Unix title
#endif
#ifdef windows
Windows title
#endif
}
\end{verbatim}

\item R strings must be completely nested within markup macros.  For example,
\verb!\code{"my string}"! will now be taken to be an unterminated \verb!\code!
macro, since the closing brace is within the string.

\item Macros need to be followed by a non-alphanumeric character, not just a numeric
one.  For example, \verb!1\dots10! now should be coded as \verb!1\dots 10!.

\end{enumerate}

\section{The parsing function}

The \parseRd function takes a text connection and produces a parsed version of
it.  The general structure of the result is a list of section markup, with one entry 
per Rd section.  Each section consists of a list of text and markup macros, with the
text stored as one-element character vectors and the markup macros as lists.

Single argument macros store the elements of the argument directly, with each element
tagged as described below.  Double argument
macros are stored as two element lists; the first element is the first argument, the 
second element is the second argument.  Neither one is tagged. 

The attributes of each element give information about the type of element.  
The following attributes are used:
\begin{description}
\item[class] The object returned by \parseRd is of class ``Rd".
\item[\Rdtag] Each object in the list generated from markup macros has a tag
corresponding to its type.  If the item is a markup macro, the tag is the macro
(e.g. \verb!\code! or \verb!#ifdef!).  Non-macro tags include \verb!TEXT!, \verb!RCODE!,
\verb!VERB!, or \verb!COMMENT!.
\item[\Rdoption] Markup lists which had an optional parameter will have it stored in
the \Rdoption attribute.
\item[srcref and srcfile] Objects include source references.
\end{description}

\end{document}
