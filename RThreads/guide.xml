<?xml version="1.0"?>
<!DOCTYPE article [
 <!ENTITY C "C">
 <!ENTITY R "R">
]>

<article xmlns:c="http://www.C.org">
<author>
Duncan Temple Lang
<br/>
Robert Gentleman
</author>
<title>Steps for Making  &C; code in &R; Thread-safe</title>

<abstract>

Future versions of &R; will (optionally) support internal, and
probably user-level threads, and so it is desirable that &C; code
accessed from &R; also be thread-safe.  By this we essentiall mean
that two different streams of executions can be running concurrently,
executing the same code but have different local variables.
This document is intended to provide guidelines for those writing
&C; code to be used with &R; to make it thread-safe.
It is the first in a number of documents that we will attempt
to provide that discuss threads.
</abstract>

<section>
<title>Making <c:routine>do_allnames</c:routine> thread-safe</title>
The idea here is to take a small, specific segment of code within the
&R; tree as it currently is and to re-organize it so as to make it
thread-safe.  In very simple terms, what this means is that we avoid
global variables<footnote>Being thread-safe does not require avoidance
of global variables, but synchronized access to these. But that will
bring us away from our primary goal of this document which is to
describe how one can remove global variables.</footnote>.
The code that we focus on is the &C; routine
<c:routine>do_allnames</c:routine> and the associated routine
<c:routine>namewalk</c:routine> both in 
<file>list.c</file>. We will resist any temptation to
rewrite this code except for the purpose of removing the use of
global/static variables.

<p/>
There are 6 static variables defined
in list.c
<code lang="C">
static SEXP	ans;
static int	UniqueNames;
static int	IncludeFunctions;
static int	StoreValues;
static int	ItemCounts;
static int	MaxCount;
</code>

These naturally form a group of related variables that are to be used
in associate with each other.  In many respects, a class would be an
obvious way to group them. We will use &C;'s equivalent
of this which is a <c:keyword>struct</c:keyword>
and gather these variables into a single variable.
<code lang="C">
typdef struct {
 SEXP	ans;
 int	UniqueNames;
 int	IncludeFunctions;
 int	StoreValues;
 int	ItemCounts;
 int	MaxCount;
} NameWalkerData;
</code>

<p/>
We can start our changes by declaring a global variable
which is an instance of this structure.
<code lang="C">
<![CDATA[
  static NameWalkerData GlobalNameData;
  static NameWalkerData *nameData = &GlobalNameData;
]]>
</code>

<c:variable>GlobalNameData</c:variable> is an instance of this
structure. For reasons that will become clearer later on, we will want
to refer to the fields in this instance of the structure via a
pointer. Hence we define <c:variable>nameData</c:variable> as a pointer
to a <c:struct>NameWalkerData</c:struct> instance and set it to point to
<c:variable>GlobalNameData</c:variable>.
<p/>

Of course, <c:variable>GlobalNameData</c:variable> is a global/static variable and so will not be
thread-safe. We have simply reduced the number of globals from 6 to 1
(or 2 because of the use of a pointer).
We will remove this global variable later, but will use it to focus on
the changes to the code that use the original 6 variables.
<p/>

We should note that this may not work with all compilers
(i.e. initializing a static variable as the address of another static
variable), but we will remove this code and are using it only for
purposes of explanation.


<p/>
If we recompile with these two  changes (defining the structure and
declaring an instance of it), we will obviously get numerous error
messages about the original 6 variables not being defined.  We can use
these errors to step through the code (i.e. using something like
emacs' navigation facilities for jumping to the point of compilation
errors).

<p/>

We have several different  ways to go about changing the code
and the approach one choses depends on how much time one wants to put
in<footnote>At this point in time. The quick approach may come back to
haunt you and eat up much more time in debugging problems causes by
pre-processor details.</footnote>.
<description>
<item><label>Update variable references</label>
 This is the obvious approach where we replace all the 
references (e.g. <c:variable>MaxCount</c:variable>) 
with a reference to the corresponding field
in <c:variable>nameData</c:variable>.
Therefore, code such as 
<code lang="C">
<![CDATA[
    switch(TYPEOF(s)) {
    case SYMSXP:
	if(ItemCounts < MaxCount) {
]]>
</code>
becomes
<code lang="C">
<![CDATA[
    switch(TYPEOF(s)) {
    case SYMSXP:
	if(nameData->ItemCounts < nameData->MaxCount) {
]]>
</code>
</item>
<item><label>Use Macros</label></item>
A trick that minimizes the amount of work we need to
do (initially) is to define the <c:struct>NameWalkerData</c:struct>
<c:keyword>struct</c:keyword> with field names prefixed by an
underscode <code>_</code>.
That is
<code lang="C">
typdef struct {
 SEXP	_ans;
 int	_UniqueNames;
 int	_IncludeFunctions;
 int	_StoreValues;
 int	_ItemCounts;
 int	_MaxCount;
} NameWalkerData;
</code>
Then we define macros for the names of the original variables
to refer to the corresponding element  in the
<c:variable>nameData</c:variable> variable.
I.e.
<code lang="C">
 #define ans nameData->_ans
 #define MaxCount nameData->_MaxCount
</code>
<p/>

This approach means that the compilation should proceed without
requiring other changes.  Of course, we now have hideous substitutions
throughout the remainder of this file (or any file that includes such
code) that maps <c:variable>ans</c:variable> to
<c:variable>_ans</c:variable> making it harder to debug and understand
at the object code level.

<p/>
In short, do this only if you don't have time to
change all the references the original variables.
</description>

<p/>
We have used the first approach 
and the resulting code
can be seen in <a href="step1.html">step1.html</a>

<subsection>
<title>Removing the Final Globals</title>

The next thing to consider is that we must reset the contents of
<c:variable>GlobalNameData</c:variable> for each top-level call to
<c:routine>do_allnames</c:routine>.  Basically, we must initialize
<c:variable>GlobalNameData</c:variable> for each call to
<c:routine>do_allnames</c:routine>.  The simplest way to do this is to
remove <c:variable>GlobalNameData</c:variable> altogether and
simply have a local instance of <c:struct>NameWalkerData</c:struct>.
We can then set the <c:variable>nameData</c:variable> to point
to this and all will be well.

<code lang="C">
SEXP do_allnames(SEXP call, SEXP op, SEXP args, SEXP env)
{
    SEXP expr;
    int i, savecount;
<b>
    NameWalkerData localData;
    nameData = &amp;localData;
</b>
    checkArity(op, args);

    expr = CAR(args);

</code>

The code at the end of this step is in <a href="step2.html">step2.html</a>

</subsection>

<subsection>
<title>The final step</title>

The final step is to remove the global
<c:variable>nameData</c:variable>.  To be thread-safe, this is
essential. Why?  Consider two threads in each of which there is a call
to <c:routine>do_allnames</c:routine>.  Obviously, it these calls are
concurrent, they will both see the same
<c:variable>nameData</c:variable> object and each will access and write
over the fields in that structure. Clearly the results are highly
order dependent  and unlikely to be reproduced.

<p/> 

So how can we get rid of this global variable?  At this point in the
process, it is easy to see that we can simply pass the instance of
<c:struct>NameWalkerData</c:struct> as an argument to
<c:routine>namewalk</c:routine> from <c:routine>do_allnames</c:routine>
and all recursive calls to <c:routine>namewalk</c:routine>.  We remove
the global variable <c:variable>nameData</c:variable> and make it local
to <c:routine>do_allnames</c:routine> and point to
<c:variable>localData</c:variable> within that routine.  Then, we modify
the declaration for <c:routine>namewalk</c:routine> to take an
additional argument of type <c:struct>NameWalkerData *</c:struct> and we
make certain to call this parameter <c:variable>nameData</c:variable>.
This means we do not have to change any references to the different
fields that we introduced in step 1.  Recompiling at this point will
identify all the places that we call <c:routine>namewalk</c:routine>
without the new argument and we can change these calls to include the
local variable <c:variable>nameData</c:variable>.

<p/>
The code at the end of this step is in <a href="step3.html">step3.html</a>

</subsection>
</section>

<section>
<title>Identifying Global Variables</title>

The <c:routine>do_allnames</c:routine> example was reasonably
straightforward and we also managed to ignore an important point.  And
that is how did we know that there were global variables in that
section of the code? In other words, how did we know it may not
be thread-safe.
<p/>

The simplest mechanism for finding global (i.e. non-local) variables
is to compile the C code and to use the 
<executable>nm</executable> utility<footnote>There are different
variants of <executable>nm</executable> but they all provide
the same type of information.</footnote>.


</section>

</article>