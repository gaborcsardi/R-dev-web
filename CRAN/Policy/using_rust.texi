\input texinfo
@c %**start of header
@setfilename external_libs.info
@settitle Using Rust in CRAN packages
@documentlanguage en

@titlepage
@title Using Rust in CRAN packages
@author CRAN Repository Maintainers
@end titlepage


Packages wishing to use Rust code should either
@itemize @bullet
@item
include the code in the package, or
@item
download a specific version from a secure site and check that the
  download is the expected code by some sort of checksum, such as
  @code{tools::md5sum()}.  The expected checksum needs to be embedded in the
  source package.
@end itemize

In either case, the authorship and copyright information for the Rust
code must be included in the @code{DESCRIPTION} file.  That includes any
Rust sourcea downloaded as dependncies (see the CRAN policy).

The package should declare
@example
SystemRequirements: Cargo (Rust's package manager), rustc
@end example

as they can be packaged separately, and can have different versions.
So state carefully any version requirement.

The @file{configure}/@file{configure.win} script should check for the
presence of commands @command{cargo} and @command{rustc}, and check
their versions if required.  This includes checking for system versions
on the path and personal versions in @file{~/.cargo/bin} (which are
often not on the path).  The Linux servers on the CRAN check farm will
use system versions, and Linux distributions are often slow to update
these so version requirements need to be conservative.

If suitable @command{cargo}/@command{rustc} are not found, ask the user
to install them, either on their Linux system by something like
@example
dnf @var{or} apt-get install cargo rustc
@end example
@noindent
or by using @command{rustup} from @uref{https://rustup.rs/} .  The package
should not attempt to install these for itself.

@strong{Caveats:}
In practice maintainers have found it nigh-impossible to meet these
conditions whilst downloading as they have too little control.  For
example
@itemize
@item
The standard way to download a Rust `crate' is by its version number,
and these have been changed without changing their number.

@item
Downloading a `crate' normally entails downloading its dependencies, and
that is done without fixing their version numbers, so their authorship,
copyrights, dependencies and @command{cargo} version requirements can
all change after submission.
@end itemize

So downloading of Rust `crates' will in future require the explicit
permission of the CRAN team.

A better alternative is to bundle all the Rust software in the package.
Thanks to Hiroaki Yutani for providing an example of doing that in his
@code{string2path} package (version 0.1.5 at the time of writing).  Even
if the bundle is too large to include in the package sources, it could
be downloaded from elsewhere (and check-summed).

@bye
