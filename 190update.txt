Updating packages for 1.9.0
===========================

Package maintainers should be aware of the following changes scheduled
to appear in 1.9.0.


1) The standard packages have been reorganized.

   The packages ctest eda lqs modreg mva nls stepfun ts continue to
   exist but provide no R code and if called will issue a warning and
   load the new home for their code (stats except MASS for lqs).
   Please update references to them in the DESCRIPTION file, in R code,
   .Rd files and NAMESPACE files (as they no longer have name spaces).

   Strictly you should declare any dependencies on the new packages
   graphics, stats and utils, but we believe it to be fairly safe not
   to.  What is essential is to update NAMESPACE files to import any
   generics used from graphics, stats and utils.


2) Package checking `` for code/documentation mismatches ''
   now gives more   `` Codoc mismatches from documentation object ... '' .

   The default for codoc() {in package tools} has been changed to
   `use.values = NULL' (from `use.values = FALSE') since we found that in
   almost all places such documentation mismatches are accidental and can
   be misleading.

   In the \usage section, you should usually specify the default
   values of arguments exactly as they are in the R code.  If a
   default value is too complicated, you should not specify it at all.
   Rather, we recommend using `arg = ' (with an empty right hand side
   but with "="), because this still suggests that the code has an
   explicit default value (which can be described in the \arguments or
   \details sections).


3) The `package' argument to data() is no longer allowed to be an
   unquoted name, e.g., you must use data(state, package = "base")
   instead of data(state, package = base).  However, unless really
   necessary we suggest you do not use it all as the organization of
   system datasets is under review.


4) R CMD check now runs the (Rd)examples with default RNGkind (uniform
   & normal) and set.seed(1).  This may change the output from your
   examples.  Note that example(*, setRNG = TRUE) uses the same RNG
   setup.  Also, the search path is reset before running each example,
   which will help to find unintentional dependencies on earlier
   examples.


5) When model.frame() is called, it adds to its terms attribute an
   attribute "dataClasses", and this can be checked against the
   newdata argument by a call to .checkMFClasses: see lm and
   predict.lm for how to do so.  Developers who use predict(newdata=)
   may wish to add such code to their packages.  (You can use

        if (!is.null(cl <- attr(Terms, "dataClasses")) &&
            exists(".checkMFClasses", envir=NULL))
            .checkMFClasses(cl, m)

  to be backwards compatible.)  If your code is like rpart and handles
  ordered and unordered factors differently use .checkMFClasses(cl, m,
  TRUE) --- this is not needed for code like lm as both the set of
  levels of the factors and the contrasts used at fit time are
  recorded in the fit object and retrieved by the predict methods.

  For more details, see
  http://developer.r-project.org/model-fitting-functions.txt .


6) The implementation of grid graphical objects ("grob"s) has changed.
   This will affect any use of grid.edit(), grid.pack(), grid.place()
   and may affect uses of "grobwidth" and "grobheight" units.  

   For more details see the documentation on the grid web site
   http://www.stat.auckland.ac.nz/~paul/grid/grid.html#docs

   This ONLY affects direct usage of grid.  For example, there should
   be no impact on code which calls lattice functions.
