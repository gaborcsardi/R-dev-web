#!/bin/sh

if [ -z "$1" -o x$1 == x-h -o x$1 == x--help ]; then
    echo ""
    echo " buildR <directory> [<arch> <target>]"
    echo ""
    echo " default: <directory> native <oscode>-<arch>"
    echo " example: R-devel i386 tiger-i386"
    echo ""
    echo " sources are expected in <directory>"
    echo " build goes to <target>/<directory>, no install is performed."
    echo ""
    echo " special value for arch: 'native' doesn't use r_arch at all."
    echo ""
    echo " Optional env. settings:"
    echo "   BASE    - abs. path to build system base"
    echo ""
    exit 0;
fi

: ${BASE=/Builds/R-builds/nightly}

RBUILDS=$BASE

. $BASE/common

RD="$1"
TARCH="$2"
TNAME="$3"

if [ -z "$TARCH" ]; then
    TARCH=native
fi

if [ -z "$TNAME" ]; then
    TNAME="$oscode-$ARCH"
fi

PATH=/usr/local/bin:/usr/local/teTeX/bin/${texarch}-apple-darwin-current:$PATH
host=`hostname -s`
if [ "$host" == "imac86" -a -e /usr/local/gcc4.0 ]; then
  PATH=/usr/local/gcc4.0/bin:$PATH
fi

ncpu=`sysctl hw.ncpu|sed -n 's/hw.ncpu: //p'`
if [ -n "${ncpu}" ]; then
    : ${MAKEF=-j$ncpu}
fi

export PATH
mkdir -p $BASE/$TNAME

cd $BASE
TS=`date +%s:%Y%m%d:%H%M%S`
if [ $TARCH = native ]; then
    RARCH=''
else
    RARCH="r_arch=$TARCH"
fi

echo "Building $RD for $TNAME (arch $TARCH)"

mkdir -p $BASE/$TNAME

rm -f $BASE/$TNAME/$RD-$TNAME-bld.tar.gz

echo "$TS:$RD:configure" >> $BASE/$TNAME/build.log
rm -rf $BASE/$TNAME/$RD
mkdir -p $BASE/$TNAME/$RD
rm -f $BASE/$TNAME/$RD.FAILED $BASE/$TNAME/$RD.SUCCESS
cd $BASE/$TNAME/$RD
if [ $TARCH = ppc -a $ARCH = i386 ]; then
    HOST=`../../$RD/tools/config.guess|sed s/^i386/powerpc/`
    echo " (cross-compiling for $HOST)"
    RARCH="--build=$HOST $RARCH"
fi
CONFF=`cat $BASE/conf.$TNAME 2>/dev/null`
echo "Using configure $RARCH $CONFF"
TS=`date +%s:%Y%m%d:%H%M%S`
echo "$TS:$RD:confcall $RARCH $CONFF" >> $BASE/$TNAME/build.log
sh -c "../../$RD/configure $RARCH $CONFF" > $BASE/$TNAME/$RD.conf 2> $BASE/$TNAME/$RD.conf.err
CRES=$?
TS=`date +%s:%Y%m%d:%H%M%S`
echo "$TS:$RD:configure:$CRES" >> $BASE/$TNAME/build.log
if [ $CRES = 0 ]; then
    cd $BASE/$TNAME/$RD
    echo "make $MAKEF"
    echo "$TS:$RD:make" >> $BASE/$TNAME/build.log
    make $MAKEF > $BASE/$TNAME/$RD.build 2> $BASE/$TNAME/$RD.build.err
    MRES=$?
    TS=`date +%s:%Y%m%d:%H%M%S`
    echo "$TS:$RD:make:$MRES" >> $BASE/$TNAME/build.log

    if [ $MRES = 0 ]; then
	cd $BASE/$TNAME
	
        # create a build tar-ball, e.g. for check on another machine
	echo "$BASE/$TNAME" > $RD/build-base
	tar fcz $RD-$TNAME-bld.tar.gz $RD
	cd $BASE/$TNAME/$RD
	TS=`date +%s:%Y%m%d:%H%M%S`
	if [ $TARCH = $ARCH -o $TARCH = native ]; then
	    echo "make check"
	    echo "$TS:$RD:check" >> $BASE/$TNAME/build.log
	    make check > $BASE/$TNAME/$RD.check 2> $BASE/$TNAME/$RD.check.err
	    CR=$?
	    TS=`date +%s:%Y%m%d:%H%M%S`
	    echo "$TS:$RD:check:$CR" >> $BASE/$TNAME/build.log
	else
	    echo "$TS:$RD:nocheck (cross-build)" >> $BASE/$TNAME/build.log
	    CR=0
	fi
	if [ $CR = 0 ]; then
	    echo "SUCCESS"
	    touch $BASE/$TNAME/$RD.SUCCESS
	else
	    echo "make check FAILED" > $BASE/$TNAME/$RD.FAILED
	fi
    else
	echo "make  FAILED" > $BASE/$TNAME/$RD.FAILED
    fi
else
    echo "Configure FAILED"
    echo "configure FAILED" > $BASE/$TNAME/$RD.FAILED
fi
