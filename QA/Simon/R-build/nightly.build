#!/bin/sh
#
# nightly.build [cron|subcron]
#
# flag defaults: rebuild=yes, mkfw=yes, gui=yes
#
# cron = run nightly.web when finished
# subcron = deploy to master and run nightly.web on master when finished
#

: ${BASE=/Builds/R-builds/nightly}
: ${RDIRS=`cat $BASE/builds`}

: ${mastersrv=ginaz}
: ${masterbase=${BASE}}

RBUILDS=$BASE

PATH=$PATH:/usr/local/subversion/bin
export PATH

OSVERMAJ=`uname -r|sed 's:\(^[0-9]\).*:\1:'`
if [ "$OSVERMAJ" = 9 ]; then
    # we build tiger binaries on Leopard for now ...
    oscode=tiger
    export oscode
    FORCE_OS_VERSION=8.10.0
    export FORCE_OS_VERSION
fi

. $BASE/common

export RDIRS

if [ -e $BASE/lock.nightly.build ]; then
    LPID=`cat $BASE/lock.nightly.build`
    if ps -p $LPID|grep nightly; then
	echo "Nightly build is locked by another build, pid $LPID." &1>2
	exit 1
    else
	echo "Stale lock for pid $LPID, removing"
	rm -f $BASE/lock.nightly.build
    fi
fi

echo "$$" > $BASE/lock.nightly.build

date > $BASE/nightly.log

rm -f $BASE/GUIs $BASE/R-GUI-*.tar.gz $BASE/R-GUI-*.dmg $BASE/pkgs $BASE/*-mini.dmg

: ${rebuild=yes}
: ${mkfw=yes}
: ${gui=yes}
: ${pkg=yes}

applecc=yes
if which gcc|grep /gcc4.0/ > /dev/null; then
    applecc=no
fi

for RD in $RDIRS; do
    echo "$RD"
    ok=yes
    if [ $rebuild = yes ]; then
	if [ $ARCH = i386 ]; then
	    if [ -n "${QUAD}" ]; then
		cd $BASE
		# due to a bug in foreign we must set the pre-processor when calling make
		XTRAMAKEF="'CPP=gcc -arch ppc64 -E'" ./buildR $RD ppc64 $oscode-ppc64
		cd $BASE
		./buildR $RD x86_64 $oscode-x86_64
	    fi
	    cd $BASE
	    ./buildR $RD ppc $oscode-ppc
	    cd $BASE
	    ./buildR $RD i386 $oscode-i386
	else
	    echo "Sorry, I cannot build universal binaries on ppc machines"
	    rm -f $BASE/lock.nightly.build
	    exit 1
	fi
    fi

    if [ $ok = yes ]; then
	if [ $mkfw = yes ]; then
	    cd $BASE
	    ./universal $RD
	fi

	if [ -e $BASE/$oscode-universal/${RD}.SUCCESS -a $gui = yes ]; then
	    echo "Universal framework built successfully." >> $BASE/nightly.log
	    cd $BASE/Mac-GUI
	    echo "Updating Mac-GUI" >> $BASE/nightly.log
	    svn up 2>> $BASE/nightly.log
	    SVNREV=`sed -n 's/.*revision="\(.*\)".*/\1/p' .svn/entries|head -n 1`
	    if [ -z "${SVNREV}" ]; then
		SVNREV=`sed -n '4 p' .svn/entries`		
	    fi
	    CURRENT_R_VER=`readlink /Library/Frameworks/R.framework/Versions/Current`
	    SHORTVER=`echo ${CURRENT_R_VER} | sed 's/^\([0-9]\{1,\}\.[0-9]\).*/\1/'`
	    BLD=/Builds
	    BSTYLES="Deployment"
	    for bst in $BSTYLES; do
		cd $BASE/Mac-GUI
		rm -rf $BLD/$bst $BLD/R.build
		echo "Mac-GUI for $SHORTVER, $bst" >> $BASE/nightly.log
		if [ $applecc = yes ]; then
		    xcodebuild -alltargets -configuration $bst BUILD_DIR=$BLD 2>> $BASE/nightly.log
		    RAPPDIR="$BLD/$bst"
		else
		    #-- FSF-style build
		    make clean 2>> $BASE/nightly.log
		    STYLE=$bst make 2>> $BASE/nightly.log
		    RAPPDIR="$BASE/Mac-GUI"
		fi
		if [ -e $RAPPDIR/R.app/Contents/MacOS/R ]; then
		    cd $RAPPDIR
		    chgrp -R admin R.app
		    chmod -R g+w R.app
		    find R.app -name .svn |xargs rm -rf
		    tar fcz $BASE/R-GUI-$SVNREV-$SHORTVER-$bst.tar.gz R.app
		    rm -rf R-GUI-$SVNREV-$SHORTVER-$bst
		    mkdir R-GUI-$SVNREV-$SHORTVER-$bst
		    mv R.app R-GUI-$SVNREV-$SHORTVER-$bst/
		    rm -f $BASE/R-GUI-$SVNREV-$SHORTVER-$bst.dmg
		    hdiutil create -srcfolder R-GUI-$SVNREV-$SHORTVER-$bst $BASE/R-GUI-$SVNREV-$SHORTVER-$bst.dmg
		    rm -rf R-GUI-$SVNREV-$SHORTVER-$bst
		    echo "R-GUI-$SVNREV-$SHORTVER-$bst" >> $BASE/GUIs
		fi
		make clean
		rm -rf $BLD/$bst $BLD/R.build $RAPPDIR/R.app
		cd $BASE
	    done

	    if [ "$pkg" = yes ]; then
		rm -rf "$BASE/packaging/GUI-build" "$BASE/packaging/last"
		mkdir "$BASE/packaging/GUI-build"
		echo "tar fxz $BASE/R-GUI-$SVNREV-$SHORTVER-Deployment.tar.gz -C $BASE/packaging/GUI-build"
		tar fxz "$BASE/R-GUI-$SVNREV-$SHORTVER-Deployment.tar.gz" -C "$BASE/packaging/GUI-build"
		if [ -z "${RRELEASE}" ]; then
		    CLEAN=1 ALL=1 MINIONLY=1 GUIPATH=$BASE/packaging/GUI-build $BASE/packaging/mkskel > $BASE/pkg-$SHORTVER.log 2>&1
		else
		    CLEAN=1 ALL=1 GUIPATH=$BASE/packaging/GUI-build $BASE/packaging/mkskel > $BASE/pkg-rel-$SHORTVER.log 2>&1
		fi
		LAST=`cat $BASE/packaging/last`
		if [ -n "${LAST}" ]; then
		    export LAST
		    PKGVER=`sh -c '. ${LAST}/conf; echo $VER'`
		    PKGSVN=`sh -c '. ${LAST}/conf; echo $SVN'`
		    PKGFN="${LAST}/R-${PKGVER}-mini.dmg"
		    if [ -e $PKGFN ]; then
			mv ${PKGFN} ${BASE}/${RD}-${PKGSVN}.dmg
			echo "${RD}-${PKGSVN}.dmg" >> $BASE/pkgs
		    fi
		fi
	    fi
	fi
    fi
done

# create deployment structure
$BASE/old2new

# remove old stuff
$BASE/rmold

if [ "$1" = cron ]; then
    $BASE/nightly.web
fi

# synchronize deployment with master
if [ "$1" = subcron ]; then
    for RD in ${RDIRS}; do
	rsync -av --delete ${BASE}/deploy/${oscode}/${RD}/ ${mastersrv}:${masterbase}/deploy/${oscode}/${RD}/
    done
    ssh ${mastersrv} ${masterbase}/nightly.web
fi

rm -f $BASE/lock.nightly.build
